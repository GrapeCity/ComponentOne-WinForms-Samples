<?xml version="1.0" encoding="utf-8"?>
<ArrayOfCodeSample xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <CodeSample Name="01.Creating Charts" Text="Creating Charts" />
  <CodeSample Name="01.Basic Charts" ParentName="01.Creating Charts" Text="Basic Charts" />
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\01.Bar" ParentName="01.Basic Charts" Text="Bar">
    <CodeCS>//&lt;Info&gt;
//Demonstrates creating different variations of bar chart.
//&lt;/Info&gt;
public class Bar: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox3D_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "Inverted";
				cb2.CheckedChanged += new EventHandler(CheckBoxInverted_CheckChanged);

				System.Windows.Forms.ComboBox cb3 = new System.Windows.Forms.ComboBox();
				cb3.BackColor = System.Drawing.SystemColors.Control;
				cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb3.Items.AddRange(new object[] {"Normal","Stacked","100% Stacked"});
				cb3.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				cb3.Text = "Normal";
				cb3.SelectedIndexChanged += new EventHandler(ComboBoxStacked_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb3};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Data
		string[] items = new string[] { "Item1", "Item2", "Item3"};
		int[] sales2002 = new int[] { 800, 1500, 2000};
		int[] sales2003 = new int[] { 1000, 1200, 1400};
		
		//RtfNormal
		// Create first series
		C1.Win.C1Chart.ChartDataSeries ds2002 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2002.Label = "2002";
		ds2002.FillStyle.Color1 = Palette.Light1;
		ds2002.X.CopyDataIn( items);
		ds2002.Y.CopyDataIn( sales2002);
			
		// Create second series
		C1.Win.C1Chart.ChartDataSeries ds2003 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2003.Label = "2003";
		ds2003.FillStyle.Color1 = Palette.Light2;
		ds2003.AutoEnumerate = true;

		// Copy data into chart
		ds2003.Y.CopyDataIn( sales2003);

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfGray
		// Set x-axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
		c1chart1.ChartArea.AxisX.OnTop = true;
		c1chart1.ChartArea.AxisY.OnTop = true;
		// Show legend
		c1chart1.Legend.Visible = true;

//&lt;/CodeSnippet&gt;
		CheckBox3D_CheckChanged( _controls[0], EventArgs.Empty);
		CheckBoxInverted_CheckChanged( _controls[1], EventArgs.Empty);
		ComboBoxStacked_SelectedIndexChanged( _controls[2], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// handler for check box
	private void CheckBox3D_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if( cb.Checked)
		{
			c1chart1.ChartGroups[0].Use3D = true;
			c1chart1.ChartArea.PlotArea.View3D.Depth = 15;
			c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
			c1chart1.ChartArea.PlotArea.Boxed = true;
		}
		else
		{
			c1chart1.ChartGroups[0].Use3D = false;
			c1chart1.ChartArea.PlotArea.Boxed = false;
		}
	}

	// handler for check box
	private void CheckBoxInverted_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		c1chart1.ChartArea.Inverted = cb.Checked;
	}

	// handler for combo box
	private void ComboBoxStacked_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Normal":
				c1chart1.ChartGroups[0].Stacked = false;
				c1chart1.ChartGroups[0].Is100Percent = false;
				break;
			case "Stacked":
				c1chart1.ChartGroups[0].Stacked = true;
				c1chart1.ChartGroups[0].Is100Percent = false;
				break;
			case "100% Stacked":
				c1chart1.ChartGroups[0].Stacked = true;
				c1chart1.ChartGroups[0].Is100Percent = true;
				break;
		}
	}

//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Demonstrates creating different variations of bar chart.
'&lt;/Info&gt;
Public Class Bar
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "Inverted"
            AddHandler cb2.CheckedChanged, AddressOf CheckBoxInverted_CheckChanged
            
            Dim cb3 As New System.Windows.Forms.ComboBox()
            cb3.BackColor = System.Drawing.SystemColors.Control
            cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb3.Items.AddRange(New Object() {"Normal", "Stacked", "100% Stacked"})
            cb3.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            cb3.Text = "Normal"
            AddHandler cb3.SelectedIndexChanged, AddressOf ComboBoxStacked_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb3}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Data
      Dim items() As String = {"Item1", "Item2", "Item3"}
      Dim sales2002() As Integer = {800, 1500, 2000}
      Dim sales2003() As Integer = {1000, 1200, 1400}
      
      'RtfNormal
      ' Create first series
      Dim ds2002 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2002.Label = "2002"
      ds2002.FillStyle.Color1 = Palette.Light1
      ds2002.X.CopyDataIn(items)
      ds2002.Y.CopyDataIn(sales2002)
      
      ' Create second series
      Dim ds2003 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2003.Label = "2003"
      ds2003.FillStyle.Color1 = Palette.Light2
      ds2003.AutoEnumerate = True
      
      ' Copy data into chart
      ds2003.Y.CopyDataIn(sales2003)
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfGray
      ' Set x-axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
      c1chart1.ChartArea.AxisX.OnTop = True
      c1chart1.ChartArea.AxisY.OnTop = True
      ' Show legend
      c1chart1.Legend.Visible = True
      
      '&lt;/CodeSnippet&gt;
      CheckBox3D_CheckChanged(_controls(0), EventArgs.Empty)
      CheckBoxInverted_CheckChanged(_controls(1), EventArgs.Empty)
      ComboBoxStacked_SelectedIndexChanged(_controls(2), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' handler for check box
   Private Sub CheckBox3D_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Checked Then
         c1chart1.ChartGroups(0).Use3D = True
         c1chart1.ChartArea.PlotArea.View3D.Depth = 15
         c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
         c1chart1.ChartArea.PlotArea.Boxed = True
      Else
         c1chart1.ChartGroups(0).Use3D = False
         c1chart1.ChartArea.PlotArea.Boxed = False
      End If
   End Sub 'CheckBox3D_CheckChanged
   
   
   ' handler for check box
   Private Sub CheckBoxInverted_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      c1chart1.ChartArea.Inverted = cb.Checked
   End Sub 'CheckBoxInverted_CheckChanged
   
   
   ' handler for combo box
   Private Sub ComboBoxStacked_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Normal"
            c1chart1.ChartGroups(0).Stacked = False
            c1chart1.ChartGroups(0).Is100Percent = False
         Case "Stacked"
            c1chart1.ChartGroups(0).Stacked = True
            c1chart1.ChartGroups(0).Is100Percent = False
         Case "100% Stacked"
            c1chart1.ChartGroups(0).Stacked = True
            c1chart1.ChartGroups(0).Is100Percent = True
      End Select
   End Sub 'ComboBoxStacked_SelectedIndexChanged
End Class 'Bar

'&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Demonstrates creating different variations of bar chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\02.Line" ParentName="01.Basic Charts" Text="Line">
    <CodeCS>//&lt;Info&gt;
//Create simple line(ribbon) chart.
//&lt;/Info&gt;
public class Line: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox3D_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data		
		int n = 20;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		//RtfNormal		
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None;
		ds.LineStyle.Color = Palette.Dark1;
		ds.LineStyle.Thickness = 2;
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);
			
		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfGray
		// Set x-axis limits
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

//&lt;/CodeSnippet&gt;
		CheckBox3D_CheckChanged( _controls[0], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// Handler for check box
	private void CheckBox3D_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if( cb.Checked)
		{
			c1chart1.ChartGroups[0].Use3D = true;
			c1chart1.ChartArea.PlotArea.View3D.Depth = 15;
			c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
			c1chart1.ChartArea.PlotArea.Boxed = true;
		}
		else
		{
			c1chart1.ChartGroups[0].Use3D = false;
			c1chart1.ChartArea.PlotArea.Boxed = false;
		}
	}
//&lt;/CodeSnippet&gt;

}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create simple line(ribbon) chart.
'&lt;/Info&gt;
Public Class Line
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data		
      Dim n As Integer = 20
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      'RtfNormal		
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None
      ds.LineStyle.Color = Palette.Dark1
      ds.LineStyle.Thickness = 2
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfGray
      ' Set x-axis limits
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      '&lt;/CodeSnippet&gt;
      CheckBox3D_CheckChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' Handler for check box
   Private Sub CheckBox3D_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Checked Then
         c1chart1.ChartGroups(0).Use3D = True
         c1chart1.ChartArea.PlotArea.View3D.Depth = 15
         c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
         c1chart1.ChartArea.PlotArea.Boxed = True
      Else
         c1chart1.ChartGroups(0).Use3D = False
         c1chart1.ChartArea.PlotArea.Boxed = False
      End If
   End Sub 'CheckBox3D_CheckChanged
End Class 'Line '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Create simple line(ribbon) chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\03.Scatter" ParentName="01.Basic Charts" Text="Scatter">
    <CodeCS>//&lt;Info&gt;
//Create simple scatter chart.
//&lt;/Info&gt;
public class Scatter: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data		
		int n = 40;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = 2*(rnd.NextDouble()-0.5);
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.Label = "Series 1";

		// Setup data visual appearance
		ds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Box;
		ds.SymbolStyle.Color = Palette.Light1;
		ds.SymbolStyle.OutlineColor = Palette.Dark1;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfGray
		// Set axes limits
		c1chart1.ChartArea.AxisX.SetMinMax( -1, 1);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create simple scatter chart.
'&lt;/Info&gt;
Public Class Scatter
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data		
      Dim n As Integer = 40
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = 2 *(rnd.NextDouble() - 0.5)
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.Label = "Series 1"
      
      ' Setup data visual appearance
      ds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Box
      ds.SymbolStyle.Color = Palette.Light1
      ds.SymbolStyle.OutlineColor = Palette.Dark1
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfGray
      ' Set axes limits
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Scatter</CodeVB>
    <Info>Create simple scatter chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\04.Step" ParentName="01.Basic Charts" Text="Step">
    <CodeCS>//&lt;Info&gt;
//Create step chart.
//&lt;/Info&gt;
public class Step: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox3D_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1};
			}

			return _controls;
		}
	}


	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data		
		int n = 10;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.Label = "Series 1";

		// Setup data visual appearance
		ds.LineStyle.Color = Palette.Dark1;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Box;
		ds.SymbolStyle.Color = Palette.Light1;
		ds.SymbolStyle.OutlineColor = Palette.Dark1;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Step;

		//RtfGray
		// Set y-axis
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);

		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

//&lt;/CodeSnippet&gt;
		CheckBox3D_CheckChanged( _controls[0], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// Handler for check box
	private void CheckBox3D_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if( cb.Checked)
		{
			c1chart1.ChartGroups[0].Use3D = true;
			c1chart1.ChartArea.PlotArea.View3D.Depth = 15;
			c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
		}
		else
			c1chart1.ChartGroups[0].Use3D = false;
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create step chart.
'&lt;/Info&gt;
Public Class [Step]
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data		
      Dim n As Integer = 10
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.Label = "Series 1"
      
      ' Setup data visual appearance
      ds.LineStyle.Color = Palette.Dark1
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Box
      ds.SymbolStyle.Color = Palette.Light1
      ds.SymbolStyle.OutlineColor = Palette.Dark1
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Step
      
      'RtfGray
      ' Set y-axis
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      '&lt;/CodeSnippet&gt;
      CheckBox3D_CheckChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' Handler for check box
   Private Sub CheckBox3D_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Checked Then
         c1chart1.ChartGroups(0).Use3D = True
         c1chart1.ChartArea.PlotArea.View3D.Depth = 15
         c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
      Else
         c1chart1.ChartGroups(0).Use3D = False
      End If
   End Sub 'CheckBox3D_CheckChanged '&lt;/CodeSnippet&gt;
End Class '[Step]</CodeVB>
    <Info>Create step chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\05.Pie" ParentName="01.Basic Charts" Text="Pie">
    <CodeCS>//&lt;Info&gt;
//Create pie chart.
//&lt;/Info&gt;
public class Pie: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox3D_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "Offset";
				cb2.CheckedChanged += new EventHandler(CheckBoxOffset_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		//RtfGray
		// Sample data
		int[] sales2002 = new int[] { 800, 1500};
		int[] sales2003 = new int[] { 1000, 1200};

		//RtfNormal		
		// Create first series
		C1.Win.C1Chart.ChartDataSeries ds2002 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2002.Label = "2002";
		ds2002.FillStyle.Color1 = Palette.Light1;
		ds2002.AutoEnumerate = true;
		ds2002.Y.CopyDataIn( sales2002);
			
		// Create second series
		C1.Win.C1Chart.ChartDataSeries ds2003 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2003.Label = "2003";
		ds2003.FillStyle.Color1 = Palette.Light2;
		ds2003.AutoEnumerate = true;
		ds2003.Y.CopyDataIn( sales2003);

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie;

		//RtfGray
		// Show legend
		c1chart1.Legend.Visible = true;

//&lt;/CodeSnippet&gt;
		CheckBox3D_CheckChanged( _controls[0], EventArgs.Empty);
		CheckBoxOffset_CheckChanged( _controls[1], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// handler for check box
	private void CheckBox3D_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if( cb.Checked)
		{
			c1chart1.ChartGroups[0].Use3D = true;
			c1chart1.ChartArea.PlotArea.View3D.Depth = 25;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 30;
			c1chart1.ChartArea.PlotArea.Boxed = true;
		}
		else
		{
			c1chart1.ChartGroups[0].Use3D = false;
			c1chart1.ChartArea.PlotArea.Boxed = false;
		}
	}

	// handler for check box
	private void CheckBoxOffset_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
		{
			if( cb.Checked)
				ds.Offset = 20;
			else
				ds.Offset = 0;
		}
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create pie chart.
'&lt;/Info&gt;
Public Class Pie
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "Offset"
            AddHandler cb2.CheckedChanged, AddressOf CheckBoxOffset_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      'RtfGray
      ' Sample data
      Dim sales2002() As Integer = {800, 1500}
      Dim sales2003() As Integer = {1000, 1200}
      
      'RtfNormal		
      ' Create first series
      Dim ds2002 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2002.Label = "2002"
      ds2002.FillStyle.Color1 = Palette.Light1
      ds2002.AutoEnumerate = True
      ds2002.Y.CopyDataIn(sales2002)
      
      ' Create second series
      Dim ds2003 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2003.Label = "2003"
      ds2003.FillStyle.Color1 = Palette.Light2
      ds2003.AutoEnumerate = True
      ds2003.Y.CopyDataIn(sales2003)
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie
      
      'RtfGray
      ' Show legend
      c1chart1.Legend.Visible = True
      
      '&lt;/CodeSnippet&gt;
      CheckBox3D_CheckChanged(_controls(0), EventArgs.Empty)
      CheckBoxOffset_CheckChanged(_controls(1), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' handler for check box
   Private Sub CheckBox3D_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Checked Then
         c1chart1.ChartGroups(0).Use3D = True
         c1chart1.ChartArea.PlotArea.View3D.Depth = 25
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 30
         c1chart1.ChartArea.PlotArea.Boxed = True
      Else
         c1chart1.ChartGroups(0).Use3D = False
         c1chart1.ChartArea.PlotArea.Boxed = False
      End If
   End Sub 'CheckBox3D_CheckChanged
   
   
   ' handler for check box
   Private Sub CheckBoxOffset_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
         If cb.Checked Then
            ds.Offset = 20
         Else
            ds.Offset = 0
         End If
      Next ds
   End Sub 'CheckBoxOffset_CheckChanged '&lt;/CodeSnippet&gt;
End Class 'Pie</CodeVB>
    <Info>Create pie chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\05.Doughnut" ParentName="01.Basic Charts" Text="Doughnut">
    <CodeCS>//&lt;Info&gt;
// Shows Doughnut chart and parameters.
//&lt;/Info&gt;
public class Doughnut: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	const bool initial3D = true;
	const int initialDepth = 20;
	const int initialElevation = 45;
	const int initialInnerRadius = 30;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.Checked = initial3D;
				cb1.CheckedChanged += new EventHandler(CheckBox_CheckChanged);
				// 
				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right+5, 0);
				cb2.Width = 50;
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "Alpha";
				cb2.CheckedChanged += new EventHandler(CheckBox_CheckChanged);
				cb2.Checked = true;
				//
				System.Windows.Forms.CheckBox cb3 = new System.Windows.Forms.CheckBox();
				cb3.Location = new System.Drawing.Point( cb2.Right+5, 0);
				cb3.Width = 70;
				cb3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb3.Text = "Anti-Alias";
				cb3.CheckedChanged += new EventHandler(CheckBox_CheckChanged);
				//
				System.Windows.Forms.Label lab1 = new System.Windows.Forms.Label();
				lab1.Location = new System.Drawing.Point(cb3.Right+5, 0);
				lab1.Name = "lab1";
				lab1.Width = 40;
				lab1.Text = "Depth";
				lab1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
				// 
				System.Windows.Forms.NumericUpDown nud1 = new System.Windows.Forms.NumericUpDown();
				nud1.Location = new System.Drawing.Point(lab1.Right, 0);
				nud1.Name = "nudDepth";
				nud1.Width = 40;
				nud1.Minimum = 0;
				nud1.Maximum = 45;
				nud1.Enabled = initial3D;
				nud1.Value = initialDepth;
				nud1.Increment = 5;
				nud1.ValueChanged += new System.EventHandler(UpDown_ValueChanged);
				// 
				System.Windows.Forms.Label lab2 = new System.Windows.Forms.Label();
				lab2.Location = new System.Drawing.Point(nud1.Right+5, 0);
				lab2.Width = 55;
				lab2.Text = "Elevation";
				lab2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
				// 
				System.Windows.Forms.NumericUpDown nud2 = new System.Windows.Forms.NumericUpDown();
				nud2.Location = new System.Drawing.Point(lab2.Right, 0);
				nud2.Name = "nudElevation";
				nud2.Width = 40;
				nud2.Minimum = 0;
				nud2.Maximum = 45;
				nud2.Enabled = initial3D;
				nud2.Value = initialElevation;
				nud2.Increment = 5;
				nud2.ValueChanged += new System.EventHandler(UpDown_ValueChanged);
				// 
				System.Windows.Forms.Label lab3 = new System.Windows.Forms.Label();
				lab3.Location = new System.Drawing.Point(nud2.Right+5, 0);
				lab3.Width = 70;
				lab3.Text = "Inner Radius";
				lab3.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
				// 
				System.Windows.Forms.NumericUpDown nud3 = new System.Windows.Forms.NumericUpDown();
				nud3.Location = new System.Drawing.Point(lab3.Right, 0);
				nud3.Name = "nudInnerRadius";
				nud3.Width = 40;
				nud3.Minimum = 0;
				nud3.Maximum = 90;
				nud3.Increment = 5;
				nud3.Value = initialInnerRadius;
				nud3.Increment = 5;
				nud3.ValueChanged += new System.EventHandler(UpDown_ValueChanged);
				// 
				System.Windows.Forms.Label lab4 = new System.Windows.Forms.Label();
				lab4.Location = new System.Drawing.Point(nud3.Right+5, 0);
				lab4.Width = 70;
				lab4.Text = "Start Angle";
				lab4.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
				// 
				System.Windows.Forms.NumericUpDown nud4 = new System.Windows.Forms.NumericUpDown();
				nud4.Location = new System.Drawing.Point(lab4.Right, 0);
				nud4.Name = "nudStartAngle";
				nud4.Width = 50;
				nud4.Minimum = int.MinValue;
				nud4.Maximum = int.MaxValue;
				nud4.Increment = 5;
				nud4.ValueChanged += new System.EventHandler(UpDown_ValueChanged);

				_controls = new System.Windows.Forms.Control[]{cb1,cb2,cb3,lab1,nud1,lab2,nud2,lab3,nud3,lab4,nud4};
			}
			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);
		c1Chart1.Reset();

//&lt;CodeSnippet&gt;
		// Set the Chart to Pie type.
		c1Chart1.ChartGroups.Group0.ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie;

		// Set the Pie object InnerRadius property to provide the doughnut hole.
		c1chart1.ChartGroups.Group0.Pie.InnerRadius = initialInnerRadius;

		// Create a new series for each slice.  Since only a single Doughnut
		// is desired, each series has a single data point.  Note that AddNewSeries
		// returns a ChartDataSeries object, so the return value can be used to
		// manipulate each series.
		
		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = c1Chart1.ChartGroups[0].ChartData.SeriesList;

		// Add the first series and data
		C1.Win.C1Chart.ChartDataSeries cds = cdsc.AddNewSeries();
		cds.Y.CopyDataIn(new double[] {20});

		// Add the remaining series data directly.
		cdsc.AddNewSeries().Y.CopyDataIn(new double[] {16});	// series 1
		cdsc.AddNewSeries().Y.CopyDataIn(new double[] {10});	// series 2
		cdsc.AddNewSeries().Y.CopyDataIn(new double[] {08});	// series 3

		// Set the intial 3D parameters
		c1Chart1.ChartGroups.Group0.Use3D = false;
		c1Chart1.ChartArea.PlotArea.View3D.Depth = initialDepth;
		c1Chart1.ChartArea.PlotArea.View3D.Elevation = initialElevation;

		// Set up a mouse move handler to reset the offset of each slice.
		c1Chart1.Header.Text = "Left-click a slice to modify the offset.";
		c1Chart1.MouseDown += new System.Windows.Forms.MouseEventHandler(Chart_MouseDown);

//&lt;/CodeSnippet&gt;

		// set the alpha blending values.
		CheckBox_CheckChanged(_controls[0], new System.EventArgs());	// 3D values
		CheckBox_CheckChanged(_controls[1], new System.EventArgs());	// Alpha values
	}

	public override void Unload(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		c1Chart1.MouseDown -= new System.Windows.Forms.MouseEventHandler(Chart_MouseDown);
		base.Unload(c1Chart1);
	}

	//---------------------------------------------------------------------
//&lt;CodeSnippet&gt;

	// handler for check boxes
	private void CheckBox_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		if(cb.Text == "3D")
		{
			c1chart1.ChartGroups[0].Use3D = cb.Checked;
			c1chart1.ChartArea.PlotArea.Boxed = cb.Checked;

			foreach(System.Windows.Forms.Control cntrl in Controls)
			{
				if(cntrl.Name == "nudDepth" || cntrl.Name == "nudElevation")
					cntrl.Enabled = cb.Checked;
			}
		}
		else if(cb.Text == "Alpha")
		{
			byte alpha = (byte)(cb.Checked ? 64 : 255);
			C1.Win.C1Chart.ChartDataSeriesCollection cdsc = null;
			cdsc = c1chart1.ChartGroups.Group0.ChartData.SeriesList;

			foreach(C1.Win.C1Chart.ChartDataSeries cds in cdsc)
				cds.FillStyle.Alpha = alpha;
		}
		else if(cb.Text == "Anti-Alias")
		{
			c1chart1.UseAntiAliasedGraphics = cb.Checked;
		}
	}

	// handler for NumericUpDown ValueChanged
	private void UpDown_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.NumericUpDown nud = (System.Windows.Forms.NumericUpDown)sender;

		if(nud.Name == "nudDepth")
			c1chart1.ChartArea.PlotArea.View3D.Depth = (int)nud.Value;

		else if(nud.Name == "nudElevation")
			c1chart1.ChartArea.PlotArea.View3D.Elevation = (int)nud.Value;

		else if(nud.Name == "nudInnerRadius")
			c1chart1.ChartGroups.Group0.Pie.InnerRadius = (int)nud.Value;

		else if(nud.Name == "nudStartAngle")
		{
			int val = (int)nud.Value % 360;
			if(val &lt; 360) val += 360;
			c1chart1.ChartGroups.Group0.Pie.Start = val;
		}
	}

	// Handler for Chart MouseDown events to toggle Slice Offsets.
	private void Chart_MouseDown(object sender, System.Windows.Forms.MouseEventArgs e)
	{
		// Only operate on Left mouse button.
		if(e.Button == System.Windows.Forms.MouseButtons.Left)
		{
			C1.Win.C1Chart.C1Chart chart = (C1.Win.C1Chart.C1Chart)sender;

			// Can only be a slice, if the mouse down in the PlotArea
			if(chart.ChartRegionFromCoord(e.X,e.Y) == C1.Win.C1Chart.ChartRegionEnum.PlotArea)
			{
				int seriesIndex = -1, pointIndex = -1, distance = -1;

				chart.ChartGroups.Group0.CoordToDataIndex(e.X,e.Y,C1.Win.C1Chart.CoordinateFocusEnum.XandYCoord,
					ref seriesIndex, ref pointIndex, ref distance);

				// toggle the slice offset when clicked.
				if(distance == 0 &amp;&amp; seriesIndex &gt;= 0)
				{
					C1.Win.C1Chart.ChartDataSeries cds;
					cds = chart.ChartGroups.Group0.ChartData.SeriesList[seriesIndex];
					
					if(cds.Offset &gt; 0)
						cds.Offset = 0;
					else
						cds.Offset = 20;
				}
			}
		}
	}

//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows Doughnut chart and parameters.
'&lt;/Info&gt;
Public Class Doughnut
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private initial3D As Boolean = True
   Private initialDepth As Integer = 20
   Private initialElevation As Integer = 45
   Private initialInnerRadius As Integer = 30
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            cb1.Checked = initial3D
            AddHandler cb1.CheckedChanged, AddressOf CheckBox_CheckChanged
            ' 
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 5, 0)
            cb2.Width = 50
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "Alpha"
            AddHandler cb2.CheckedChanged, AddressOf CheckBox_CheckChanged
            cb2.Checked = True
            '
            Dim cb3 As New System.Windows.Forms.CheckBox()
            cb3.Location = New System.Drawing.Point(cb2.Right + 5, 0)
            cb3.Width = 70
            cb3.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb3.Text = "Anti-Alias"
            AddHandler cb3.CheckedChanged, AddressOf CheckBox_CheckChanged
            '
            Dim lab1 As New System.Windows.Forms.Label()
            lab1.Location = New System.Drawing.Point(cb3.Right + 5, 0)
            lab1.Name = "lab1"
            lab1.Width = 40
            lab1.Text = "Depth"
            lab1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            ' 
            Dim nud1 As New System.Windows.Forms.NumericUpDown()
            nud1.Location = New System.Drawing.Point(lab1.Right, 0)
            nud1.Name = "nudDepth"
            nud1.Width = 40
            nud1.Minimum = 0
            nud1.Maximum = 45
            nud1.Enabled = initial3D
            nud1.Value = initialDepth
            nud1.Increment = 5
            AddHandler nud1.ValueChanged, AddressOf UpDown_ValueChanged
            ' 
            Dim lab2 As New System.Windows.Forms.Label()
            lab2.Location = New System.Drawing.Point(nud1.Right + 5, 0)
            lab2.Width = 55
            lab2.Text = "Elevation"
            lab2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            ' 
            Dim nud2 As New System.Windows.Forms.NumericUpDown()
            nud2.Location = New System.Drawing.Point(lab2.Right, 0)
            nud2.Name = "nudElevation"
            nud2.Width = 40
            nud2.Minimum = 0
            nud2.Maximum = 45
            nud2.Enabled = initial3D
            nud2.Value = initialElevation
            nud2.Increment = 5
            AddHandler nud2.ValueChanged, AddressOf UpDown_ValueChanged
            ' 
            Dim lab3 As New System.Windows.Forms.Label()
            lab3.Location = New System.Drawing.Point(nud2.Right + 5, 0)
            lab3.Width = 70
            lab3.Text = "Inner Radius"
            lab3.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            ' 
            Dim nud3 As New System.Windows.Forms.NumericUpDown()
            nud3.Location = New System.Drawing.Point(lab3.Right, 0)
            nud3.Name = "nudInnerRadius"
            nud3.Width = 40
            nud3.Minimum = 0
            nud3.Maximum = 90
            nud3.Increment = 5
            nud3.Value = initialInnerRadius
            AddHandler nud3.ValueChanged, AddressOf UpDown_ValueChanged
            ' 
            Dim lab4 As New System.Windows.Forms.Label()
            lab4.Location = New System.Drawing.Point(nud3.Right + 5, 0)
            lab4.Width = 70
            lab4.Text = "Start Angle"
            lab4.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            ' 
            Dim nud4 As New System.Windows.Forms.NumericUpDown()
            nud4.Location = New System.Drawing.Point(lab4.Right, 0)
            nud4.Name = "nudStartAngle"
            nud4.Width = 50
            nud4.Minimum = Integer.MinValue
            nud4.Maximum = Integer.MaxValue
            nud4.Increment = 5
            AddHandler nud4.ValueChanged, AddressOf UpDown_ValueChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb3, lab1, nud1, lab2, nud2, lab3, nud3, lab4, nud4}
         End If
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      c1Chart1.Reset()
      
      '&lt;CodeSnippet&gt;
      ' Set the Chart to Pie type.
      c1Chart1.ChartGroups.Group0.ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie
      
      ' Set the Pie object InnerRadius property to provide the doughnut hole.
      c1chart1.ChartGroups.Group0.Pie.InnerRadius = initialInnerRadius
      
      ' Create a new series for each slice.  Since only a single Doughnut
      ' is desired, each series has a single data point.  Note that AddNewSeries
      ' returns a ChartDataSeries object, so the return value can be used to
      ' manipulate each series.
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = c1Chart1.ChartGroups(0).ChartData.SeriesList
      
      ' Add the first series and data
      Dim cds As C1.Win.C1Chart.ChartDataSeries = cdsc.AddNewSeries()
      cds.Y.CopyDataIn(New Double() {20})
      
      ' Add the remaining series data directly.
      cdsc.AddNewSeries().Y.CopyDataIn(New Double() {16}) ' series 1
      cdsc.AddNewSeries().Y.CopyDataIn(New Double() {10}) ' series 2
      cdsc.AddNewSeries().Y.CopyDataIn(New Double() {8}) ' series 3

      ' Set the intial 3D parameters
      c1Chart1.ChartGroups.Group0.Use3D = False
      c1Chart1.ChartArea.PlotArea.View3D.Depth = initialDepth
      c1Chart1.ChartArea.PlotArea.View3D.Elevation = initialElevation
      
      ' Set up a mouse move handler to reset the offset of each slice.
      c1Chart1.Header.Text = "Left-click a slice to modify the offset."
      AddHandler c1Chart1.MouseDown, AddressOf Chart_MouseDown
      
      '&lt;/CodeSnippet&gt;
      ' set the alpha blending values.
      CheckBox_CheckChanged(_controls(0), New System.EventArgs()) ' 3D values
      CheckBox_CheckChanged(_controls(1), New System.EventArgs()) ' Alpha values
   End Sub 'Load
   
   Public Overrides Sub Unload(c1Chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1Chart1.MouseDown, AddressOf Chart_MouseDown
      MyBase.Unload(c1Chart1)
   End Sub 'Unload   
   
   '---------------------------------------------------------------------
   '&lt;CodeSnippet&gt;
   ' handler for check boxes
   Private Sub CheckBox_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      If cb.Text = "3D" Then
         c1chart1.ChartGroups(0).Use3D = cb.Checked
         c1chart1.ChartArea.PlotArea.Boxed = cb.Checked
         
         Dim cntrl As System.Windows.Forms.Control
         For Each cntrl In  Controls
            If cntrl.Name = "nudDepth" Or cntrl.Name = "nudElevation" Then
               cntrl.Enabled = cb.Checked
            End If
         Next cntrl
      ElseIf cb.Text = "Alpha" Then
         Dim alpha As Byte = 255
         If cb.Checked Then alpha = 64
         
         Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = Nothing
         cdsc = c1chart1.ChartGroups.Group0.ChartData.SeriesList
         
         Dim cds As C1.Win.C1Chart.ChartDataSeries
         For Each cds In  cdsc
            cds.FillStyle.Alpha = alpha
         Next cds
      ElseIf cb.Text = "Anti-Alias" Then
         c1chart1.UseAntiAliasedGraphics = cb.Checked
      End If
   End Sub 'CheckBox_CheckChanged
   
   
   ' handler for NumericUpDown ValueChanged
   Private Sub UpDown_ValueChanged(sender As Object, e As System.EventArgs)
      Dim nud As System.Windows.Forms.NumericUpDown = CType(sender, System.Windows.Forms.NumericUpDown)
      
      If nud.Name = "nudDepth" Then
         c1chart1.ChartArea.PlotArea.View3D.Depth = CInt(nud.Value)
      
      ElseIf nud.Name = "nudElevation" Then
         c1chart1.ChartArea.PlotArea.View3D.Elevation = CInt(nud.Value)
      
      ElseIf nud.Name = "nudInnerRadius" Then
         c1chart1.ChartGroups.Group0.Pie.InnerRadius = CInt(nud.Value)
      
      ElseIf nud.Name = "nudStartAngle" Then
         Dim val As Integer = CInt(nud.Value) Mod 360
         If val &lt; 360 Then
            val += 360
         End If
         c1chart1.ChartGroups.Group0.Pie.Start = val
      End If
   End Sub 'UpDown_ValueChanged
   
   
   ' Handler for Chart MouseDown events to toggle Slice Offsets.
   Private Sub Chart_MouseDown(sender As Object, e As System.Windows.Forms.MouseEventArgs)
      ' Only operate on Left mouse button.
      If e.Button = System.Windows.Forms.MouseButtons.Left Then
         Dim chart As C1.Win.C1Chart.C1Chart = CType(sender, C1.Win.C1Chart.C1Chart)
         
         ' Can only be a slice, if the mouse down in the PlotArea
         If chart.ChartRegionFromCoord(e.X, e.Y) = C1.Win.C1Chart.ChartRegionEnum.PlotArea Then
            Dim seriesIndex As Integer = - 1
            Dim pointIndex As Integer = - 1
            Dim distance As Integer = - 1
            
            chart.ChartGroups.Group0.CoordToDataIndex(e.X, e.Y, C1.Win.C1Chart.CoordinateFocusEnum.XandYCoord, seriesIndex, pointIndex, distance)
            
            ' toggle the slice offset when clicked.
            If distance = 0 And seriesIndex &gt;= 0 Then
               Dim cds As C1.Win.C1Chart.ChartDataSeries
               cds = chart.ChartGroups.Group0.ChartData.SeriesList(seriesIndex)
               
               If cds.Offset &gt; 0 Then
                  cds.Offset = 0
               Else
                  cds.Offset = 20
               End If
            End If
         End If
      End If
   End Sub 'Chart_MouseDown 
End Class 'NewSample '&lt;/CodeSnippet&gt;</CodeVB>
    <Info> Shows Doughnut chart and parameters.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\06.Area" ParentName="01.Basic Charts" Text="Area">
    <CodeCS>//&lt;Info&gt;
//Create area chart.
//&lt;/Info&gt;
public class Area: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox3D_CheckChanged);

				System.Windows.Forms.ComboBox cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb2.Items.AddRange(new object[] {"Normal","Stacked","100% Stacked"});
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.Text = "Normal";
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxStacked_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Sample data
		double[] x = new double[] { 1, 2, 3};
		double[] y1 = new double[] { 1200, 1500, 2000};
		double[] y2 = new double[] { 700, 1200, 1400};
		
		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "Series 1";
		ds1.FillStyle.Color1 = Palette.Light1;
		ds1.X.CopyDataIn( x);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "Series 2";
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.X.CopyDataIn( x);
		ds2.Y.CopyDataIn( y2);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Area;

		//RtfGray
		// Set y-axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
		CheckBox3D_CheckChanged( _controls[0], EventArgs.Empty);
		ComboBoxStacked_SelectedIndexChanged( _controls[1], EventArgs.Empty);
	}

	// handler for check box
	private void CheckBox3D_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if( cb.Checked)
		{
			c1chart1.ChartGroups[0].Use3D = true;
			c1chart1.ChartArea.PlotArea.View3D.Depth = 15;
			c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
			c1chart1.ChartArea.PlotArea.Boxed = true;
		}
		else
		{
			c1chart1.ChartGroups[0].Use3D = false;
			c1chart1.ChartArea.PlotArea.Boxed = false;
		}
	}

	// handler for combo box
	private void ComboBoxStacked_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Normal":
				c1chart1.ChartGroups[0].Stacked = false;
				c1chart1.ChartGroups[0].Is100Percent = false;
				break;
			case "Stacked":
				c1chart1.ChartGroups[0].Stacked = true;
				c1chart1.ChartGroups[0].Is100Percent = false;
				break;
			case "100% Stacked":
				c1chart1.ChartGroups[0].Stacked = true;
				c1chart1.ChartGroups[0].Is100Percent = true;
				break;
		}
	}

}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create area chart.
'&lt;/Info&gt;
Public Class Area
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb2.Items.AddRange(New Object() {"Normal", "Stacked", "100% Stacked"})
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Text = "Normal"
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxStacked_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Sample data
      Dim x() As Double = {1, 2, 3}
      Dim y1() As Double = {1200, 1500, 2000}
      Dim y2() As Double = {700, 1200, 1400}
      
      'RtfNormal
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "Series 1"
      ds1.FillStyle.Color1 = Palette.Light1
      ds1.X.CopyDataIn(x)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "Series 2"
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.X.CopyDataIn(x)
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Area
      
      'RtfGray
      ' Set y-axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
      ' Show legend
      c1chart1.Legend.Visible = True
      '&lt;/CodeSnippet&gt;
      CheckBox3D_CheckChanged(_controls(0), EventArgs.Empty)
      ComboBoxStacked_SelectedIndexChanged(_controls(1), EventArgs.Empty)
   End Sub 'Load
   
   
   ' handler for check box
   Private Sub CheckBox3D_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Checked Then
         c1chart1.ChartGroups(0).Use3D = True
         c1chart1.ChartArea.PlotArea.View3D.Depth = 15
         c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
         c1chart1.ChartArea.PlotArea.Boxed = True
      Else
         c1chart1.ChartGroups(0).Use3D = False
         c1chart1.ChartArea.PlotArea.Boxed = False
      End If
   End Sub 'CheckBox3D_CheckChanged
   
   
   ' handler for combo box
   Private Sub ComboBoxStacked_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Normal"
            c1chart1.ChartGroups(0).Stacked = False
            c1chart1.ChartGroups(0).Is100Percent = False
         Case "Stacked"
            c1chart1.ChartGroups(0).Stacked = True
            c1chart1.ChartGroups(0).Is100Percent = False
         Case "100% Stacked"
            c1chart1.ChartGroups(0).Stacked = True
            c1chart1.ChartGroups(0).Is100Percent = True
      End Select
   End Sub 'ComboBoxStacked_SelectedIndexChanged
End Class 'Area
</CodeVB>
    <Info>Create area chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\07.Spline" ParentName="01.Basic Charts" Text="Spline">
    <CodeCS>//&lt;Info&gt;
//Create spline chart.
//&lt;/Info&gt;
public class Spline: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 20;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark1;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light1;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark1;

		// Set spline fit
		ds.FitType = C1.Win.C1Chart.FitTypeEnum.Spline;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfGray
		// Set axes limits
		c1chart1.ChartArea.AxisY.SetMinMax( -1.1, 1.1);
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create spline chart.
'&lt;/Info&gt;
Public Class Spline
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 20
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark1
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light1
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark1
      
      ' Set spline fit
      ds.FitType = C1.Win.C1Chart.FitTypeEnum.Spline
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfGray
      ' Set axes limits
      c1chart1.ChartArea.AxisY.SetMinMax(- 1.1, 1.1)
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Spline</CodeVB>
    <Info>Create spline chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\08.Polar" ParentName="01.Basic Charts" Text="Polar">
    <CodeCS>//&lt;Info&gt;
//Create polar chart.
//&lt;/Info&gt;
public class Polar: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Sample data
		double[] x = new double[] { 0, 45, 90, 135, 180, 225, 270, 315};
		double[] y1 = new double[] { 1, 2, 3, 4, 5, 6, 7, 8};
		double[] y2 = new double[] { 8, 7, 6, 5, 4, 3, 2, 1};

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "Series 1";
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.LineStyle.Color = Palette.Light1;
		ds1.LineStyle.Thickness = 2;
		ds1.X.CopyDataIn( x);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "Series 2";
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.LineStyle.Color = Palette.Light2;
		ds2.LineStyle.Thickness = 2;
		ds2.X.CopyDataIn( x);
		ds2.Y.CopyDataIn( y2);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Polar;

		//RtfGray
		// Set plot area color
		c1chart1.ChartArea.PlotArea.BackColor = Color.White;
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create polar chart.
'&lt;/Info&gt;
Public Class Polar
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Sample data
      Dim x() As Double = {0, 45, 90, 135, 180, 225, 270, 315}
      Dim y1() As Double = {1, 2, 3, 4, 5, 6, 7, 8}
      Dim y2() As Double = {8, 7, 6, 5, 4, 3, 2, 1}
      
      'RtfNormal
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "Series 1"
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.LineStyle.Color = Palette.Light1
      ds1.LineStyle.Thickness = 2
      ds1.X.CopyDataIn(x)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "Series 2"
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.LineStyle.Color = Palette.Light2
      ds2.LineStyle.Thickness = 2
      ds2.X.CopyDataIn(x)
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Polar
      
      'RtfGray
      ' Set plot area color
      c1chart1.ChartArea.PlotArea.BackColor = Color.White
      ' Show legend
      c1chart1.Legend.Visible = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Polar</CodeVB>
    <Info>Create polar chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\01.Basic Charts\09.Radar" ParentName="01.Basic Charts" Text="Radar">
    <CodeCS>//&lt;Info&gt;
//Create radar chart.
//&lt;/Info&gt;
public class Radar: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 60;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "Filled";
				cb1.CheckedChanged += new EventHandler(CheckBoxFilled_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "Stacked";
				cb2.CheckedChanged += new EventHandler(CheckBoxStacked_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Sample data
		string[] items = new string[] { "Item1", "Item2", "Item3", "Item4"};
		int[] sales2002 = new int[] { 8, 4, 2, 1};
		int[] sales2003 = new int[] { 1, 2, 4, 8};

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "2002";
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.LineStyle.Color = Palette.Light1;
		ds1.LineStyle.Thickness = 2;
		ds1.X.CopyDataIn( items);
		ds1.Y.CopyDataIn( sales2002);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "2003";
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.LineStyle.Color = Palette.Light2;
		ds2.LineStyle.Thickness = 2;
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( sales2003);

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Radar;

		//RtfGray
		// Set y-axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
		c1chart1.ChartArea.AxisX.Thickness = 1;
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
		CheckBoxFilled_CheckChanged( _controls[0], EventArgs.Empty);
		CheckBoxStacked_CheckChanged( _controls[1], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// handler for check box
	private void CheckBoxFilled_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		c1chart1.ChartGroups[0].Radar.Filled = cb.Checked;
	}

	// handler for check box
	private void CheckBoxStacked_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		c1chart1.ChartGroups[0].Stacked = cb.Checked;
	}
//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create radar chart.
'&lt;/Info&gt;
Public Class Radar
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 60
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "Filled"
            AddHandler cb1.CheckedChanged, AddressOf CheckBoxFilled_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "Stacked"
            AddHandler cb2.CheckedChanged, AddressOf CheckBoxStacked_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Sample data
      Dim items() As String = {"Item1", "Item2", "Item3", "Item4"}
      Dim sales2002() As Integer = {8, 4, 2, 1}
      Dim sales2003() As Integer = {1, 2, 4, 8}
      
      'RtfNormal
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "2002"
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.LineStyle.Color = Palette.Light1
      ds1.LineStyle.Thickness = 2
      ds1.X.CopyDataIn(items)
      ds1.Y.CopyDataIn(sales2002)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "2003"
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.LineStyle.Color = Palette.Light2
      ds2.LineStyle.Thickness = 2
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(sales2003)
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Radar
      
      'RtfGray
      ' Set y-axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
      c1chart1.ChartArea.AxisX.Thickness = 1
      ' Show legend
      c1chart1.Legend.Visible = True
      '&lt;/CodeSnippet&gt;
      CheckBoxFilled_CheckChanged(_controls(0), EventArgs.Empty)
      CheckBoxStacked_CheckChanged(_controls(1), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' handler for check box
   Private Sub CheckBoxFilled_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      c1chart1.ChartGroups(0).Radar.Filled = cb.Checked
   End Sub 'CheckBoxFilled_CheckChanged
   
   
   ' handler for check box
   Private Sub CheckBoxStacked_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      c1chart1.ChartGroups(0).Stacked = cb.Checked
   End Sub 'CheckBoxStacked_CheckChanged
End Class 'Radar '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Create radar chart.
</Info>
  </CodeSample>
  <CodeSample Name="02.Financial Charts" ParentName="01.Creating Charts" Text="Financial Charts" />
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\02.Financial Charts\01.HiLo" ParentName="02.Financial Charts" Text="HiLo">
    <CodeCS>//&lt;Info&gt;
//Create hi-lo chart.
//&lt;/Info&gt;
public class HiLo: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Sample data
		DateTime[] dates = new DateTime[]
		{
			new DateTime(2005,5,17),
			new DateTime(2005,5,18),
			new DateTime(2005,5,19),
			new DateTime(2005,5,20),
			new DateTime(2005,5,21),
			new DateTime(2005,5,22)
		};
		int[] hi_values = new int[] { 23, 22, 27, 29, 30, 29};
		int[] low_values = new int[] { 12, 13, 13, 16, 19, 18};

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.Label = "Series 1";
		ds.LineStyle.Color = Palette.Light1;
		ds.LineStyle.Thickness = 10;
		ds.X.CopyDataIn( dates);
		ds.Y.CopyDataIn( hi_values);
		ds.Y1.CopyDataIn( low_values);

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.HiLo;

		// Set axis label format
		c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort;
		c1chart1.ChartArea.AxisX.SetMinMax( dates[0].AddDays(-0.5), dates[dates.Length-1].AddDays(0.5));

		//RtfGray
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create hi-lo chart.
'&lt;/Info&gt;
Public Class HiLo
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Sample data
      Dim dates() As DateTime = {New DateTime(2005, 5, 17), New DateTime(2005, 5, 18), New DateTime(2005, 5, 19), New DateTime(2005, 5, 20), New DateTime(2005, 5, 21), New DateTime(2005, 5, 22)}
      Dim hi_values() As Integer = {23, 22, 27, 29, 30, 29}
      Dim low_values() As Integer = {12, 13, 13, 16, 19, 18}
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.Label = "Series 1"
      ds.LineStyle.Color = Palette.Light1
      ds.LineStyle.Thickness = 10
      ds.X.CopyDataIn(dates)
      ds.Y.CopyDataIn(hi_values)
      ds.Y1.CopyDataIn(low_values)
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.HiLo
      
      ' Set axis label format
      c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort
      c1chart1.ChartArea.AxisX.SetMinMax(dates(0).AddDays(- 0.5), dates((dates.Length - 1)).AddDays(0.5))
      
      'RtfGray
      ' Show legend
      c1chart1.Legend.Visible = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'HiLo</CodeVB>
    <Info>Create hi-lo chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\02.Financial Charts\02.HiLoOpenClose" ParentName="02.Financial Charts" Text="HiLoOpenClose">
    <CodeCS>//&lt;Info&gt;
//Create hi-lo-open-close chart.
//&lt;/Info&gt;
public class HiLoOpenClose: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.Label = "Series 1";
		ds.LineStyle.Color = Palette.Dark1;
		ds.LineStyle.Thickness = 1;
		ds.SymbolStyle.Size = 3;
		ds.X.DataType = typeof(DateTime);

		// Read data from resource which has the following scheme
		// Date       Open    High    Low     Close   Volume
		// 2005-04-18	1.29135	1.30455	1.28775	1.30145	8320	1.297
		System.IO.StreamReader sr = new System.IO.StreamReader( System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("eur_usd.txt"));
		sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin);
		while (sr.Peek() &gt; -1 &amp;&amp; ds.X.Length &lt; 20) 
		{
			string line = sr.ReadLine();
			string[] fields = line.Split( null);

			ds.X.Add( DateTime.Parse( fields[0], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y.Add( double.Parse( fields[2], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y1.Add( double.Parse( fields[3], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y2.Add( double.Parse( fields[1], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y3.Add( double.Parse( fields[4], System.Globalization.CultureInfo.InvariantCulture));
		}
		sr.Close();

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.HiLoOpenClose;

		//RtfGray
		// Set axis label format
		c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort;
		// Set y-axis text
		c1chart1.ChartArea.AxisY.Text = "Eur/Usd";
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create hi-lo-open-close chart.
'&lt;/Info&gt;
Public Class HiLoOpenClose
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.Label = "Series 1"
      ds.LineStyle.Color = Palette.Dark1
      ds.LineStyle.Thickness = 1
      ds.SymbolStyle.Size = 3
      ds.X.DataType = GetType(DateTime)
      
      ' Read data from resource which has the following scheme
      ' Date       Open    High    Low     Close   Volume
      ' 2005-04-18	1.29135	1.30455	1.28775	1.30145	8320	1.297
      Dim sr As New System.IO.StreamReader(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("eur_usd.txt"))
      sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin)
      While sr.Peek() &gt; - 1 And ds.X.Length &lt; 20
         Dim line As String = sr.ReadLine()
         Dim fields As String() = line.Split(Nothing)
         
         ds.X.Add(DateTime.Parse(fields(0), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y.Add(Double.Parse(fields(2), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y1.Add(Double.Parse(fields(3), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y2.Add(Double.Parse(fields(1), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y3.Add(Double.Parse(fields(4), System.Globalization.CultureInfo.InvariantCulture))
      End While
      sr.Close()
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.HiLoOpenClose
      
      'RtfGray
      ' Set axis label format
      c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort
      ' Set y-axis text
      c1chart1.ChartArea.AxisY.Text = "Eur/Usd"
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'HiLoOpenClose</CodeVB>
    <Info>Create hi-lo-open-close chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\02.Financial Charts\03.Candle" ParentName="02.Financial Charts" Text="Candle">
    <CodeCS>//&lt;Info&gt;
//Create candle chart.
//&lt;/Info&gt;
public class Candle: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.Label = "Series 1";
		ds.LineStyle.Color = Palette.Dark2;
		ds.LineStyle.Thickness = 1;
		ds.X.DataType = typeof(DateTime);

		// Read data from resource which has the following scheme
		// Date       Open    High    Low     Close   Volume
		// 2005-04-18	1.29135	1.30455	1.28775	1.30145	8320	1.297
		System.IO.StreamReader sr = new System.IO.StreamReader( System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("eur_usd.txt"));
		sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin);
		while (sr.Peek() &gt; -1 &amp;&amp; ds.X.Length &lt; 20) 
		{
			string line = sr.ReadLine();
			string[] fields = line.Split( null);

			ds.X.Add( DateTime.Parse( fields[0], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y.Add( double.Parse( fields[2], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y1.Add( double.Parse( fields[3], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y2.Add( double.Parse( fields[1], System.Globalization.CultureInfo.InvariantCulture));
			ds.Y3.Add( double.Parse( fields[4], System.Globalization.CultureInfo.InvariantCulture));
		}
		sr.Close();

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Candle;

		//RtfGray
		// Set axis label format
		c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create candle chart.
'&lt;/Info&gt;
Public Class Candle
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.Label = "Series 1"
      ds.LineStyle.Color = Palette.Dark2
      ds.LineStyle.Thickness = 1
      ds.X.DataType = GetType(DateTime)
      
      ' Read data from resource which has the following scheme
      ' Date       Open    High    Low     Close   Volume
      ' 2005-04-18	1.29135	1.30455	1.28775	1.30145	8320	1.297
      Dim sr As New System.IO.StreamReader(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("eur_usd.txt"))
      sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin)
      While sr.Peek() &gt; - 1 And ds.X.Length &lt; 20
         Dim line As String = sr.ReadLine()
         Dim fields As String() = line.Split(Nothing)
         
         ds.X.Add(DateTime.Parse(fields(0), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y.Add(Double.Parse(fields(2), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y1.Add(Double.Parse(fields(3), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y2.Add(Double.Parse(fields(1), System.Globalization.CultureInfo.InvariantCulture))
         ds.Y3.Add(Double.Parse(fields(4), System.Globalization.CultureInfo.InvariantCulture))
      End While
      sr.Close()
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Candle
      
      'RtfGray
      ' Set axis label format
      c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Candle</CodeVB>
    <Info>Create candle chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\02.Financial Charts\04.HLOC Volume" ParentName="02.Financial Charts" Text="HLOC Volume">
    <CodeCS>//&lt;Info&gt;
//Create complex hi-lo-open-close and bar chart.
//&lt;/Info&gt;
public class HLOC_Volume: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		//RtfNormal
		// Create Group1 data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.LineStyle.Color = Palette.Dark1;
		ds1.LineStyle.Thickness = 1;
		ds1.SymbolStyle.Size = 3;
		ds1.X.DataType = typeof(DateTime);

		// Create Group2 data series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[1].ChartData.SeriesList.AddNewSeries();
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.X.DataType = typeof(DateTime);

		// Read data from resource which has the following scheme
		// Date       Open    High    Low     Close   Volume
		// 2005-04-18	1.29135	1.30455	1.28775	1.30145	8320	1.297
		System.IO.StreamReader sr = new System.IO.StreamReader( System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("eur_usd.txt"));
		sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin);
		while (sr.Peek() &gt; -1) 
		{
			string line = sr.ReadLine();
			string[] fields = line.Split( null);

			ds1.X.Add( DateTime.Parse( fields[0], System.Globalization.CultureInfo.InvariantCulture));
			ds1.Y.Add( double.Parse( fields[2], System.Globalization.CultureInfo.InvariantCulture));
			ds1.Y1.Add( double.Parse( fields[3], System.Globalization.CultureInfo.InvariantCulture));
			ds1.Y2.Add( double.Parse( fields[1], System.Globalization.CultureInfo.InvariantCulture));
			ds1.Y3.Add( double.Parse( fields[4], System.Globalization.CultureInfo.InvariantCulture));

			ds2.X.Add( DateTime.Parse( fields[0], System.Globalization.CultureInfo.InvariantCulture));
			ds2.Y.Add( double.Parse( fields[5], System.Globalization.CultureInfo.InvariantCulture));
		}
		sr.Close();

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.HiLoOpenClose;

		c1chart1.ChartGroups[1].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfGray
		// Set axis label format
		c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort;
		// Set y-axis text
		c1chart1.ChartArea.AxisY.Text = "Eur/Usd";

		c1chart1.ChartArea.AxisY2.SetMinMax( 0, ds2.MaxY * 2);
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create complex hi-lo-open-close and bar chart.
'&lt;/Info&gt;
Public Class HLOC_Volume
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      'RtfNormal
      ' Create Group1 data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.LineStyle.Color = Palette.Dark1
      ds1.LineStyle.Thickness = 1
      ds1.SymbolStyle.Size = 3
      ds1.X.DataType = GetType(DateTime)
      
      ' Create Group2 data series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(1).ChartData.SeriesList.AddNewSeries()
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.X.DataType = GetType(DateTime)
      
      ' Read data from resource which has the following scheme
      ' Date       Open    High    Low     Close   Volume
      ' 2005-04-18	1.29135	1.30455	1.28775	1.30145	8320	1.297
      Dim sr As New System.IO.StreamReader(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("eur_usd.txt"))
      sr.BaseStream.Seek(0, System.IO.SeekOrigin.Begin)
      While sr.Peek() &gt; - 1
         Dim line As String = sr.ReadLine()
         Dim fields As String() = line.Split(Nothing)
         
         ds1.X.Add(DateTime.Parse(fields(0), System.Globalization.CultureInfo.InvariantCulture))
         ds1.Y.Add(Double.Parse(fields(2), System.Globalization.CultureInfo.InvariantCulture))
         ds1.Y1.Add(Double.Parse(fields(3), System.Globalization.CultureInfo.InvariantCulture))
         ds1.Y2.Add(Double.Parse(fields(1), System.Globalization.CultureInfo.InvariantCulture))
         ds1.Y3.Add(Double.Parse(fields(4), System.Globalization.CultureInfo.InvariantCulture))
         
         ds2.X.Add(DateTime.Parse(fields(0), System.Globalization.CultureInfo.InvariantCulture))
         ds2.Y.Add(Double.Parse(fields(5), System.Globalization.CultureInfo.InvariantCulture))
      End While
      sr.Close()
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.HiLoOpenClose
      
      c1chart1.ChartGroups(1).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfGray
      ' Set axis label format
      c1chart1.ChartArea.AxisX.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort
      ' Set y-axis text
      c1chart1.ChartArea.AxisY.Text = "Eur/Usd"
      
      c1chart1.ChartArea.AxisY2.SetMinMax(0, ds2.MaxY * 2)
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'HLOC_Volume</CodeVB>
    <Info>Create complex hi-lo-open-close and bar chart.
</Info>
  </CodeSample>
  <CodeSample Name="03.Complex Charts" ParentName="01.Creating Charts" Text="Complex Charts" />
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\03.Complex Charts\01.Bubble" ParentName="03.Complex Charts" Text="Bubble">
    <CodeCS>//&lt;Info&gt;
//Create bubble chart.
//&lt;/Info&gt;
public class Bubble: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Colors
		Color[] clrs1 = new Color[]{ Palette.Light1, Palette.Light2, Palette.Light3};
		Color[] clrs2 = new Color[]{ Palette.Dark1, Palette.Dark2, Palette.Dark3};

		// Sample data
		double[] x = new double[] { 1, 2, 3};
		double[] y = new double[] { 2, 3, 1};
		double[] size = new double[] { 10, 50, 30};

		//RtfNormal		
		for( int i=0; i&lt;x.Length; i++)
		{
			// Create data series
			C1.Win.C1Chart.ChartDataSeries ds =
				c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
			ds.Label = "Series" + i.ToString();
			ds.X.Add( x[i]);
			ds.Y.Add( y[i]);
			ds.Y1.Add( size[i]);
			ds.SymbolStyle.Color = clrs1[i];
			ds.SymbolStyle.OutlineColor = clrs2[i];
			ds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		}

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bubble;

		// Set size of symbols
		c1chart1.ChartGroups[0].Bubble.MaximumSize = 50;
		c1chart1.ChartGroups[0].Bubble.MinimumSize = 10;

		//RtfGray
		// Set axis limits
		c1chart1.ChartArea.AxisX.SetMinMax( 0, 4);
		c1chart1.ChartArea.AxisY.SetMinMax( 0, 4);
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create bubble chart.
'&lt;/Info&gt;
Public Class Bubble
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Colors
      Dim clrs1() As Color = {Palette.Light1, Palette.Light2, Palette.Light3}
      Dim clrs2() As Color = {Palette.Dark1, Palette.Dark2, Palette.Dark3}
      
      ' Sample data
      Dim x() As Double = {1, 2, 3}
      Dim y() As Double = {2, 3, 1}
      Dim size() As Double = {10, 50, 30}
      
      'RtfNormal		
      Dim i As Integer
      For i = 0 To x.Length - 1
         ' Create data series
         Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
         ds.Label = "Series" + i.ToString()
         ds.X.Add(x(i))
         ds.Y.Add(y(i))
         ds.Y1.Add(size(i))
         ds.SymbolStyle.Color = clrs1(i)
         ds.SymbolStyle.OutlineColor = clrs2(i)
         ds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      Next i
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bubble
      
      ' Set size of symbols
      c1chart1.ChartGroups(0).Bubble.MaximumSize = 50
      c1chart1.ChartGroups(0).Bubble.MinimumSize = 10
      
      'RtfGray
      ' Set axis limits
      c1chart1.ChartArea.AxisX.SetMinMax(0, 4)
      c1chart1.ChartArea.AxisY.SetMinMax(0, 4)
      ' Show legend
      c1chart1.Legend.Visible = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Bubble</CodeVB>
    <Info>Create bubble chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\03.Complex Charts\02.ComplexChart" ParentName="03.Complex Charts" Text="ComplexChart">
    <CodeCS>//&lt;Info&gt;
//Create combimation of bar and line charts.
//&lt;/Info&gt;
public class ComplexChart: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D(Group 1)";
				cb1.CheckedChanged += new EventHandler(CheckBox3D1_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "3D(Group 2)";
				cb2.CheckedChanged += new EventHandler(CheckBox3D2_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2};
			}

			return _controls;
		}
	}


	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Sample data
		float[] x = new float[] { 1, 2, 3};
		int[] y1 = new int[] { 8, 15, 20};
		int[] y2 = new int[] { 1000, 1200, 1400};

		//RtfNormal		
        	// Create line chart data series	
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "DataSeries(Group1)";
		ds1.LineStyle.Color = Palette.Dark1;
		ds1.LineStyle.Thickness = 2;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x);
		ds1.Y.CopyDataIn( y1);

        	// Create bar chart data series				
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[1].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "DataSeries(Group2)";
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.X.CopyDataIn( x);
		ds2.Y.CopyDataIn( y2);

		// Set chart types
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;
		c1chart1.ChartGroups[1].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfGray
		// Set axis minimum
		c1chart1.ChartArea.AxisY2.Min = 0;

		// Show legent at the bottom
		c1chart1.Legend.Visible = true;
		c1chart1.Legend.Compass = C1.Win.C1Chart.CompassEnum.South;

		c1chart1.ChartArea.PlotArea.Boxed = true;
//&lt;/CodeSnippet&gt;
		CheckBox3D1_CheckChanged( _controls[0], EventArgs.Empty);
		CheckBox3D2_CheckChanged( _controls[1], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	void Set3D( C1.Win.C1Chart.ChartGroup grp, bool is3D)
	{
		grp.Use3D = is3D;

		if( is3D)
		{
			c1chart1.ChartArea.PlotArea.View3D.Depth = 10;
			c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
		}
	}

	// Handler for check box
	private void CheckBox3D1_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		Set3D( c1chart1.ChartGroups[0], cb.Checked);
	}

	// Handler for check box
	private void CheckBox3D2_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		Set3D( c1chart1.ChartGroups[1], cb.Checked);
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create combimation of bar and line charts.
'&lt;/Info&gt;
Public Class ComplexChart
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D(Group 1)"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D1_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "3D(Group 2)"
            AddHandler cb2.CheckedChanged, AddressOf CheckBox3D2_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Sample data
      Dim x() As Single = {1, 2, 3}
      Dim y1() As Integer = {8, 15, 20}
      Dim y2() As Integer = {1000, 1200, 1400}
      
      'RtfNormal		
      ' Create line chart data series	
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "DataSeries(Group1)"
      ds1.LineStyle.Color = Palette.Dark1
      ds1.LineStyle.Thickness = 2
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x)
      ds1.Y.CopyDataIn(y1)
      
      ' Create bar chart data series				
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(1).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "DataSeries(Group2)"
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.X.CopyDataIn(x)
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart types
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      c1chart1.ChartGroups(1).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfGray
      ' Set axis minimum
      c1chart1.ChartArea.AxisY2.Min = 0
      
      ' Show legent at the bottom
      c1chart1.Legend.Visible = True
      c1chart1.Legend.Compass = C1.Win.C1Chart.CompassEnum.South
      
      c1chart1.ChartArea.PlotArea.Boxed = True
      '&lt;/CodeSnippet&gt;
      CheckBox3D1_CheckChanged(_controls(0), EventArgs.Empty)
      CheckBox3D2_CheckChanged(_controls(1), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   Sub Set3D(grp As C1.Win.C1Chart.ChartGroup, is3D As Boolean)
      grp.Use3D = is3D
      
      If is3D Then
         c1chart1.ChartArea.PlotArea.View3D.Depth = 10
         c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
      End If
   End Sub 'Set3D
   
   
   ' Handler for check box
   Private Sub CheckBox3D1_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      Set3D(c1chart1.ChartGroups(0), cb.Checked)
   End Sub 'CheckBox3D1_CheckChanged
   
   
   ' Handler for check box
   Private Sub CheckBox3D2_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      Set3D(c1chart1.ChartGroups(1), cb.Checked)
   End Sub 'CheckBox3D2_CheckChanged
End Class 'ComplexChart '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Create combimation of bar and line charts.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\01.Creating Charts\03.Complex Charts\03.Gantt" ParentName="03.Complex Charts" Text="Gantt">
    <CodeCS>//&lt;Info&gt;
//Create gantt chart.
//&lt;/Info&gt;
public class Gantt: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox3D_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1};
			}

			return _controls;
		}
	}


	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Colors
		Color[] clrs = new Color[]{ Palette.Light1, Palette.Light2, Palette.Light3};

		// Sample data
		DateTime[] start_dates = new DateTime[]
		{
			new DateTime(2003,1,1),
			new DateTime(2003,1,2),
			new DateTime(2003,1,3)
		};
		DateTime[] end_dates = new DateTime[]
		{
			new DateTime(2003,1,5),
			new DateTime(2003,1,4),
			new DateTime(2003,1,7)
		};

		//RtfNormal
		for( int i=0; i&lt;start_dates.Length; i++)
		{
			// Create data series
			C1.Win.C1Chart.ChartDataSeries ds =
				c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
			ds.Label = "Task " + i.ToString();
			ds.Y.Add( start_dates[i]);
			ds.Y1.Add( end_dates[i]);
			ds.FillStyle.Color1 = clrs[i];
		}
		
		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Gantt;
		// Invert chart area
		c1chart1.ChartArea.Inverted = true;

		//RtfGray
		// Setup axis appearance
		c1chart1.ChartArea.AxisY.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort;
		c1chart1.ChartArea.AxisX.TickMinor = C1.Win.C1Chart.TickMarksEnum.None;
		c1chart1.ChartArea.AxisX.OnTop = true;

		// Set axis limits
		c1chart1.ChartArea.AxisX.Min = -0.5;
		c1chart1.ChartArea.AxisX.Max = 2.5;
//&lt;/CodeSnippet&gt;
		CheckBox3D_CheckChanged( _controls[0], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// Handler for check box
	private void CheckBox3D_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if( cb.Checked)
		{
			// Setup 3D appearance
			c1chart1.ChartGroups[0].Use3D = true;
			c1chart1.ChartArea.PlotArea.View3D.Depth = 10;
			c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
			c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
			c1chart1.ChartArea.PlotArea.Boxed = true;
		}
		else
		{
			// Set "flat" view
			c1chart1.ChartGroups[0].Use3D = false;
			c1chart1.ChartArea.PlotArea.Boxed = false;
		}
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create gantt chart.
'&lt;/Info&gt;
Public Class Gantt
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox3D_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Colors
      Dim clrs() As Color = {Palette.Light1, Palette.Light2, Palette.Light3}
      
      ' Sample data
      Dim start_dates() As DateTime = {New DateTime(2003, 1, 1), New DateTime(2003, 1, 2), New DateTime(2003, 1, 3)}
      Dim end_dates() As DateTime = {New DateTime(2003, 1, 5), New DateTime(2003, 1, 4), New DateTime(2003, 1, 7)}
      
      'RtfNormal
      Dim i As Integer
      For i = 0 To start_dates.Length - 1
         ' Create data series
         Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
         ds.Label = "Task " + i.ToString()
         ds.Y.Add(start_dates(i))
         ds.Y1.Add(end_dates(i))
         ds.FillStyle.Color1 = clrs(i)
      Next i
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Gantt
      ' Invert chart area
      c1chart1.ChartArea.Inverted = True
      
      'RtfGray
      ' Setup axis appearance
      c1chart1.ChartArea.AxisY.AnnoFormat = C1.Win.C1Chart.FormatEnum.DateShort
      c1chart1.ChartArea.AxisX.TickMinor = C1.Win.C1Chart.TickMarksEnum.None
      c1chart1.ChartArea.AxisX.OnTop = True
      
      ' Set axis limits
      c1chart1.ChartArea.AxisX.Min = - 0.5
      c1chart1.ChartArea.AxisX.Max = 2.5
      '&lt;/CodeSnippet&gt;
      CheckBox3D_CheckChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' Handler for check box
   Private Sub CheckBox3D_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Checked Then
         ' Setup 3D appearance
         c1chart1.ChartGroups(0).Use3D = True
         c1chart1.ChartArea.PlotArea.View3D.Depth = 10
         c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
         c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
         c1chart1.ChartArea.PlotArea.Boxed = True
      Else
         ' Set "flat" view
         c1chart1.ChartGroups(0).Use3D = False
         c1chart1.ChartArea.PlotArea.Boxed = False
      End If
   End Sub 'CheckBox3D_CheckChanged
End Class 'Gantt '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Create gantt chart.
</Info>
  </CodeSample>
  <CodeSample Name="02.Appearance" Text="Appearance" />
  <CodeSample Name="02.Titles" ParentName="02.Appearance" Text="Titles" />
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\02.Titles\01.Header" ParentName="02.Titles" Text="Header">
    <CodeCS>//&lt;Info&gt;
//Create and setup chart header.
//&lt;/Info&gt;
public class Header: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		// Set font
		c1chart1.Header.Style.Font = new System.Drawing.Font("Arial",12,FontStyle.Underline);
		// Create hearder text
		c1chart1.Header.Text = string.Format( "{0} chart with {1} data series",
		  c1chart1.ChartGroups[0].ChartType.ToString(),
		  c1chart1.ChartGroups[0].ChartData.SeriesList.Count);
		// Show header
		c1chart1.Header.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create and setup chart header.
'&lt;/Info&gt;
Public Class Header
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      ' Set font
      c1chart1.Header.Style.Font = New System.Drawing.Font("Arial", 12, FontStyle.Underline)
      ' Create hearder text
      c1chart1.Header.Text = String.Format("{0} chart with {1} data series", c1chart1.ChartGroups(0).ChartType.ToString(), c1chart1.ChartGroups(0).ChartData.SeriesList.Count)
      ' Show header
      c1chart1.Header.Visible = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Header</CodeVB>
    <Info>Create and setup chart header.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\02.Titles\02.Footer" ParentName="02.Titles" Text="Footer">
    <CodeCS>//&lt;Info&gt;
//Create and setup 2-line chart footer.
//&lt;/Info&gt;
public class Footer: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Create border
		C1.Win.C1Chart.Border b = c1chart1.Footer.Style.Border;
		b.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;
		b.Color = Palette.Back2;
		b.Rounding.LeftTop = 10;
		b.Rounding.RightTop = 10;

		//RtfNormal
		// Set footer text
		c1chart1.Footer.Text = string.Format("Created: {0}\nC1Chart version: {1}",
		  DateTime.Now, c1chart1.ProductVersion);
		
		// Show footer
		c1chart1.Footer.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create and setup 2-line chart footer.
'&lt;/Info&gt;
Public Class Footer
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Create border
      Dim b As C1.Win.C1Chart.Border = c1chart1.Footer.Style.Border
      b.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      b.Color = Palette.Back2
      b.Rounding.LeftTop = 10
      b.Rounding.RightTop = 10
      
      'RtfNormal
      ' Set footer text
      c1chart1.Footer.Text = String.Format("Created: {0}" + ControlChars.Lf + "C1Chart version: {1}", DateTime.Now, c1chart1.ProductVersion)
      
      ' Show footer
      c1chart1.Footer.Visible = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Footer</CodeVB>
    <Info>Create and setup 2-line chart footer.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\02.Titles\03.Rtf" ParentName="02.Titles" Text="Rtf">
    <CodeCS>//&lt;Info&gt;
//Create chart footer with RTF.
//&lt;/Info&gt;
public class Rtf: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		c1chart1.Footer.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.None;

		System.Drawing.Font font = c1chart1.Footer.Style.Font;
		System.Windows.Forms.HorizontalAlignment align = System.Windows.Forms.HorizontalAlignment.Center;
		c1chart1.Footer.Rtf = "";
		c1chart1.Footer.Visible = true;
		c1chart1.Footer.AppendRtfText( "Red\n", System.Drawing.Color.Red, font, align);
		c1chart1.Footer.AppendRtfText( "Green\n", System.Drawing.Color.Green, font, align);
		c1chart1.Footer.AppendRtfText( "Blue", System.Drawing.Color.Blue, font, align);
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.Footer.Rtf = "";
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create chart footer with RTF.
'&lt;/Info&gt;
Public Class Rtf
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      c1chart1.Footer.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.None
      
      Dim font As System.Drawing.Font = c1chart1.Footer.Style.Font
      Dim align As System.Windows.Forms.HorizontalAlignment = System.Windows.Forms.HorizontalAlignment.Center
      c1chart1.Footer.Rtf = ""
      c1chart1.Footer.Visible = True
      c1chart1.Footer.AppendRtfText("Red" + ControlChars.Lf, System.Drawing.Color.Red, font, align)
      c1chart1.Footer.AppendRtfText("Green" + ControlChars.Lf, System.Drawing.Color.Green, font, align)
      c1chart1.Footer.AppendRtfText("Blue", System.Drawing.Color.Blue, font, align)
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      c1chart1.Footer.Rtf = ""
   End Sub 'Unload
End Class 'Rtf</CodeVB>
    <Info>Create chart footer with RTF.
</Info>
  </CodeSample>
  <CodeSample Name="03.Axes" ParentName="02.Appearance" Text="Axes" />
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Axes\01.Position" ParentName="03.Axes" Text="Position">
    <CodeCS>//&lt;Info&gt;
//Shows different axis positions.
//&lt;/Info&gt;
public class Position: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Label lbl1 = new System.Windows.Forms.Label();
				lbl1.Location = new System.Drawing.Point( 10, 0);
				lbl1.Width = 35;
				lbl1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				lbl1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
				lbl1.Text = "X axis";

				System.Windows.Forms.ComboBox cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb2.Items.AddRange(new object[] {"Not Visible","North","South"});
				cb2.Location = new System.Drawing.Point( lbl1.Right + 5, 0);
				cb2.Width = 60;
				cb2.Text = "North";
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxX_SelectedIndexChanged);

				System.Windows.Forms.Label lbl3 = new System.Windows.Forms.Label();
				lbl3.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				lbl3.Width = 35;
				lbl3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				lbl3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
				lbl3.Text = "Y axis";

				System.Windows.Forms.ComboBox cb4 = new System.Windows.Forms.ComboBox();
				cb4.BackColor = System.Drawing.SystemColors.Control;
				cb4.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb4.Items.AddRange(new object[] {"Not Visible","West","East"});
				cb4.Location = new System.Drawing.Point( lbl3.Right + 5, 0);
				cb4.Width = 60;
				cb4.Text = "East";
				cb4.SelectedIndexChanged += new EventHandler(ComboBoxY_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ lbl1, cb2, lbl3, cb4};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// clear previous settings
		c1chart1.Reset();

		// create sample data		
		int n = 10;
		double[] x1 = new double[n], x2 = new double[n];
		double[] y1 = new double[n], y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		// Show legend
		c1chart1.Legend.Visible = true;

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		// Show plot area border
		c1chart1.ChartArea.PlotArea.Boxed = true;

		// Set plot area color
		c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3;

		//RtfNormal
		// setup axes
		c1chart1.ChartArea.AxisX.Text = "X-axis";
		c1chart1.ChartArea.AxisX.SetMinMax(-1, 1);
		c1chart1.ChartArea.AxisX.Compass = C1.Win.C1Chart.CompassEnum.North;

		c1chart1.ChartArea.AxisY.Text = "Y-axis";
		c1chart1.ChartArea.AxisY.SetMinMax(-1, 1);
		c1chart1.ChartArea.AxisY.Compass = C1.Win.C1Chart.CompassEnum.East;
//&lt;/CodeSnippet&gt;
		ComboBoxX_SelectedIndexChanged( _controls[1], EventArgs.Empty);
		ComboBoxY_SelectedIndexChanged( _controls[3], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	// handler for combo box
	private void ComboBoxX_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Not Visible":
				c1chart1.ChartArea.AxisX.Visible = false;
				break;
			case "North":
				c1chart1.ChartArea.AxisX.Compass = C1.Win.C1Chart.CompassEnum.North;
				c1chart1.ChartArea.AxisX.Visible = true;
				break;
			case "South":
				c1chart1.ChartArea.AxisX.Compass = C1.Win.C1Chart.CompassEnum.South;
				c1chart1.ChartArea.AxisX.Visible = true;
				break;
		}
	}

	// handler for combo box
	private void ComboBoxY_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Not Visible":
				c1chart1.ChartArea.AxisY.Visible = false;
				break;
			case "West":
				c1chart1.ChartArea.AxisY.Compass = C1.Win.C1Chart.CompassEnum.West;
				c1chart1.ChartArea.AxisY.Visible = true;
				break;
			case "East":
				c1chart1.ChartArea.AxisY.Compass = C1.Win.C1Chart.CompassEnum.East;
				c1chart1.ChartArea.AxisY.Visible = true;
				break;
		}
	}
//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows different axis positions.
'&lt;/Info&gt;
Public Class Position
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim lbl1 As New System.Windows.Forms.Label()
            lbl1.Location = New System.Drawing.Point(10, 0)
            lbl1.Width = 35
            lbl1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            lbl1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
            lbl1.Text = "X axis"
            
            Dim cb2 As New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb2.Items.AddRange(New Object() {"Not Visible", "North", "South"})
            cb2.Location = New System.Drawing.Point(lbl1.Right + 5, 0)
            cb2.Width = 60
            cb2.Text = "North"
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxX_SelectedIndexChanged
            
            Dim lbl3 As New System.Windows.Forms.Label()
            lbl3.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            lbl3.Width = 35
            lbl3.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            lbl3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
            lbl3.Text = "Y axis"
            
            Dim cb4 As New System.Windows.Forms.ComboBox()
            cb4.BackColor = System.Drawing.SystemColors.Control
            cb4.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb4.Items.AddRange(New Object() {"Not Visible", "West", "East"})
            cb4.Location = New System.Drawing.Point(lbl3.Right + 5, 0)
            cb4.Width = 60
            cb4.Text = "East"
            AddHandler cb4.SelectedIndexChanged, AddressOf ComboBoxY_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {lbl1, cb2, lbl3, cb4}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' clear previous settings
      c1chart1.Reset()
      
      ' create sample data		
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      ' Show legend
      c1chart1.Legend.Visible = True
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      ' Show plot area border
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      ' Set plot area color
      c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3
      
      'RtfNormal
      ' setup axes
      c1chart1.ChartArea.AxisX.Text = "X-axis"
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisX.Compass = C1.Win.C1Chart.CompassEnum.North
      
      c1chart1.ChartArea.AxisY.Text = "Y-axis"
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.Compass = C1.Win.C1Chart.CompassEnum.East
      '&lt;/CodeSnippet&gt;
      ComboBoxX_SelectedIndexChanged(_controls(1), EventArgs.Empty)
      ComboBoxY_SelectedIndexChanged(_controls(3), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   ' handler for combo box
   Private Sub ComboBoxX_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Not Visible"
            c1chart1.ChartArea.AxisX.Visible = False
         Case "North"
            c1chart1.ChartArea.AxisX.Compass = C1.Win.C1Chart.CompassEnum.North
            c1chart1.ChartArea.AxisX.Visible = True
         Case "South"
            c1chart1.ChartArea.AxisX.Compass = C1.Win.C1Chart.CompassEnum.South
            c1chart1.ChartArea.AxisX.Visible = True
      End Select
   End Sub 'ComboBoxX_SelectedIndexChanged
   
   
   ' handler for combo box
   Private Sub ComboBoxY_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Not Visible"
            c1chart1.ChartArea.AxisY.Visible = False
         Case "West"
            c1chart1.ChartArea.AxisY.Compass = C1.Win.C1Chart.CompassEnum.West
            c1chart1.ChartArea.AxisY.Visible = True
         Case "East"
            c1chart1.ChartArea.AxisY.Compass = C1.Win.C1Chart.CompassEnum.East
            c1chart1.ChartArea.AxisY.Visible = True
      End Select
   End Sub 'ComboBoxY_SelectedIndexChanged
End Class 'Position
'&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows different axis positions.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Axes\02.Origin" ParentName="03.Axes" Text="Origin">
    <CodeCS>//&lt;Info&gt;
//Shows using axis Origin property.
//&lt;/Info&gt;
public class Origin: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Label lbl1 = new System.Windows.Forms.Label();
				lbl1.Location = new System.Drawing.Point( 10, 0);
				lbl1.Width = 35;
				lbl1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				lbl1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
				lbl1.Text = "X axis";

				System.Windows.Forms.TrackBar tb2 = new System.Windows.Forms.TrackBar();
				tb2.BackColor = System.Drawing.SystemColors.Control;
				tb2.Location = new System.Drawing.Point( lbl1.Right + 5, 0);
				tb2.Width = 100;
				tb2.Minimum = -10;
				tb2.Maximum = 10;
				tb2.TickStyle = System.Windows.Forms.TickStyle.None;
				tb2.SmallChange = 2;
				tb2.Value = 0;
				tb2.ValueChanged += new EventHandler(TrackBarX_ValueChanged);

				System.Windows.Forms.Label lbl3 = new System.Windows.Forms.Label();
				lbl3.Location = new System.Drawing.Point( tb2.Right + 10, 0);
				lbl3.Width = 35;
				lbl3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				lbl3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
				lbl3.Text = "Y axis";

				System.Windows.Forms.TrackBar tb4 = new System.Windows.Forms.TrackBar();
				tb4.BackColor = System.Drawing.SystemColors.Control;
				tb4.Location = new System.Drawing.Point( lbl3.Right + 5, 0);
				tb4.Width = 100;
				tb4.Minimum = -10;
				tb4.Maximum = 10;
				tb4.TickStyle = System.Windows.Forms.TickStyle.None;
				tb4.SmallChange = 2;
				tb4.Value = 0;
				tb4.ValueChanged += new EventHandler(TrackBarY_ValueChanged);

				_controls = new System.Windows.Forms.Control[]{ lbl1, tb2, lbl3, tb4};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// clear previous settings
		c1chart1.Reset();

		// create sample data		
		int n = 10;
		double[] x1 = new double[n], x2 = new double[n];
		double[] y1 = new double[n], y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		// Show legend
		c1chart1.Legend.Visible = true;

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		// Create chart area border
		C1.Win.C1Chart.Border b = c1chart1.ChartArea.Style.Border;
		b.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		// Set chart area color
		c1chart1.ChartArea.Style.BackColor = Palette.Back3;

		//RtfNormal
		// setup axes
		c1chart1.ChartArea.AxisX.SetMinMax(-1, 1);
		c1chart1.ChartArea.AxisX.Origin = 0;

		c1chart1.ChartArea.AxisY.SetMinMax(-1, 1);
		c1chart1.ChartArea.AxisY.Origin = 0;
//&lt;/CodeSnippet&gt;
		TrackBarX_ValueChanged( _controls[1], EventArgs.Empty);
		TrackBarY_ValueChanged( _controls[3], EventArgs.Empty);
	}
//&lt;CodeSnippet&gt;
	// handler for track bar
	private void TrackBarX_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.TrackBar tb = (System.Windows.Forms.TrackBar)sender;
		
		c1chart1.ChartArea.AxisX.Origin = tb.Value * 0.1;
	}

	// handler for track bar
	private void TrackBarY_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.TrackBar tb = (System.Windows.Forms.TrackBar)sender;
		
		c1chart1.ChartArea.AxisY.Origin = tb.Value  * 0.1;
	}
//&lt;/CodeSnippet&gt;

}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using axis Origin property.
'&lt;/Info&gt;
Public Class Origin
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim lbl1 As New System.Windows.Forms.Label()
            lbl1.Location = New System.Drawing.Point(10, 0)
            lbl1.Width = 35
            lbl1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            lbl1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
            lbl1.Text = "X axis"
            
            Dim tb2 As New System.Windows.Forms.TrackBar()
            tb2.BackColor = System.Drawing.SystemColors.Control
            tb2.Location = New System.Drawing.Point(lbl1.Right + 5, 0)
            tb2.Width = 100
            tb2.Minimum = - 10
            tb2.Maximum = 10
            tb2.TickStyle = System.Windows.Forms.TickStyle.None
            tb2.SmallChange = 2
            tb2.Value = 0
            AddHandler tb2.ValueChanged, AddressOf TrackBarX_ValueChanged
            
            Dim lbl3 As New System.Windows.Forms.Label()
            lbl3.Location = New System.Drawing.Point(tb2.Right + 10, 0)
            lbl3.Width = 35
            lbl3.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            lbl3.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
            lbl3.Text = "Y axis"
            
            Dim tb4 As New System.Windows.Forms.TrackBar()
            tb4.BackColor = System.Drawing.SystemColors.Control
            tb4.Location = New System.Drawing.Point(lbl3.Right + 5, 0)
            tb4.Width = 100
            tb4.Minimum = - 10
            tb4.Maximum = 10
            tb4.TickStyle = System.Windows.Forms.TickStyle.None
            tb4.SmallChange = 2
            tb4.Value = 0
            AddHandler tb4.ValueChanged, AddressOf TrackBarY_ValueChanged
            
            _controls = New System.Windows.Forms.Control() {lbl1, tb2, lbl3, tb4}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' clear previous settings
      c1chart1.Reset()
      
      ' create sample data		
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      ' Show legend
      c1chart1.Legend.Visible = True
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      ' Create chart area border
      Dim b As C1.Win.C1Chart.Border = c1chart1.ChartArea.Style.Border
      b.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      ' Set chart area color
      c1chart1.ChartArea.Style.BackColor = Palette.Back3
      
      'RtfNormal
      ' setup axes
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisX.Origin = 0
      
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.Origin = 0
      '&lt;/CodeSnippet&gt;
      TrackBarX_ValueChanged(_controls(1), EventArgs.Empty)
      TrackBarY_ValueChanged(_controls(3), EventArgs.Empty)
   End Sub 'Load
   
   '&lt;CodeSnippet&gt;
   ' handler for track bar
   Private Sub TrackBarX_ValueChanged(sender As Object, e As System.EventArgs)
      Dim tb As System.Windows.Forms.TrackBar = CType(sender, System.Windows.Forms.TrackBar)
      
      c1chart1.ChartArea.AxisX.Origin = tb.Value * 0.1
   End Sub 'TrackBarX_ValueChanged
   
   
   ' handler for track bar
   Private Sub TrackBarY_ValueChanged(sender As Object, e As System.EventArgs)
      Dim tb As System.Windows.Forms.TrackBar = CType(sender, System.Windows.Forms.TrackBar)
      
      c1chart1.ChartArea.AxisY.Origin = tb.Value * 0.1
   End Sub 'TrackBarY_ValueChanged
End Class 'Origin '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using axis Origin property.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Axes\03.Gridlines" ParentName="03.Axes" Text="Gridlines">
    <CodeCS>//&lt;Info&gt;
//Shows gridlines over plot area.
//&lt;/Info&gt;
public class Gridlines: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 60;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "X Major";
				cb1.Checked = true;
				cb1.CheckedChanged += new EventHandler(CheckBoxXMajor_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.Width = 60;
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "X Minor";
				cb2.Checked = true;
				cb2.CheckedChanged += new EventHandler(CheckBoxXMinor_CheckChanged);

				System.Windows.Forms.CheckBox cb3 = new System.Windows.Forms.CheckBox();
				cb3.Width = 60;
				cb3.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				cb3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb3.Text = "Y Major";
				cb3.Checked = true;
				cb3.CheckedChanged += new EventHandler(CheckBoxYMajor_CheckChanged);

				System.Windows.Forms.CheckBox cb4 = new System.Windows.Forms.CheckBox();
				cb4.Width = 60;
				cb4.Location = new System.Drawing.Point( cb3.Right + 10, 0);
				cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb4.Text = "Y Minor";
				cb4.Checked = true;
				cb4.CheckedChanged += new EventHandler(CheckBoxYMinor_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb3, cb4};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// clear previous settings
		c1chart1.Reset();

		// create sample data		
		int n = 10;
		double[] x1 = new double[n], x2 = new double[n];
		double[] y1 = new double[n], y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		// Show legend
		c1chart1.Legend.Visible = true;

		// Set plot area color
		c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3;

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// setup axes
		c1chart1.ChartArea.AxisX.SetMinMax(-1, 1);
		c1chart1.ChartArea.AxisX.GridMajor.Visible = true;
		c1chart1.ChartArea.AxisX.GridMajor.Color = Color.Black;
		c1chart1.ChartArea.AxisX.GridMajor.Pattern = C1.Win.C1Chart.LinePatternEnum.Solid;
		c1chart1.ChartArea.AxisX.GridMinor.Visible = true;
		c1chart1.ChartArea.AxisX.GridMinor.Color = Color.Gray;

		c1chart1.ChartArea.AxisY.SetMinMax(-1, 1);
		c1chart1.ChartArea.AxisY.GridMajor.Visible = true;
		c1chart1.ChartArea.AxisY.GridMajor.Color = Color.Black;
		c1chart1.ChartArea.AxisY.GridMajor.Pattern = C1.Win.C1Chart.LinePatternEnum.Solid;
		c1chart1.ChartArea.AxisY.GridMinor.Visible = true;
		c1chart1.ChartArea.AxisY.GridMinor.Color = Color.Gray;
//&lt;/CodeSnippet&gt;
		CheckBoxXMajor_CheckChanged( _controls[0], EventArgs.Empty);
		CheckBoxXMinor_CheckChanged( _controls[1], EventArgs.Empty);
		CheckBoxYMajor_CheckChanged( _controls[2], EventArgs.Empty);
		CheckBoxYMinor_CheckChanged( _controls[3], EventArgs.Empty);
	}
//&lt;CodeSnippet&gt;
	// handler for check box
	private void CheckBoxXMajor_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		c1chart1.ChartArea.AxisX.GridMajor.Visible = cb.Checked;
	}

	// handler for check box
	private void CheckBoxXMinor_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		c1chart1.ChartArea.AxisX.GridMinor.Visible = cb.Checked;
	}

	// handler for check box
	private void CheckBoxYMajor_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		c1chart1.ChartArea.AxisY.GridMajor.Visible = cb.Checked;
	}

	// handler for check box
	private void CheckBoxYMinor_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		c1chart1.ChartArea.AxisY.GridMinor.Visible = cb.Checked;
	}
//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows gridlines over plot area.
'&lt;/Info&gt;
Public Class Gridlines
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 60
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "X Major"
            cb1.Checked = True
            AddHandler cb1.CheckedChanged, AddressOf CheckBoxXMajor_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Width = 60
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "X Minor"
            cb2.Checked = True
            AddHandler cb2.CheckedChanged, AddressOf CheckBoxXMinor_CheckChanged
            
            Dim cb3 As New System.Windows.Forms.CheckBox()
            cb3.Width = 60
            cb3.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            cb3.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb3.Text = "Y Major"
            cb3.Checked = True
            AddHandler cb3.CheckedChanged, AddressOf CheckBoxYMajor_CheckChanged
            
            Dim cb4 As New System.Windows.Forms.CheckBox()
            cb4.Width = 60
            cb4.Location = New System.Drawing.Point(cb3.Right + 10, 0)
            cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb4.Text = "Y Minor"
            cb4.Checked = True
            AddHandler cb4.CheckedChanged, AddressOf CheckBoxYMinor_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb3, cb4}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' clear previous settings
      c1chart1.Reset()
      
      ' create sample data		
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      ' Show legend
      c1chart1.Legend.Visible = True
      
      ' Set plot area color
      c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' setup axes
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisX.GridMajor.Visible = True
      c1chart1.ChartArea.AxisX.GridMajor.Color = Color.Black
      c1chart1.ChartArea.AxisX.GridMajor.Pattern = C1.Win.C1Chart.LinePatternEnum.Solid
      c1chart1.ChartArea.AxisX.GridMinor.Visible = True
      c1chart1.ChartArea.AxisX.GridMinor.Color = Color.Gray
      
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.GridMajor.Visible = True
      c1chart1.ChartArea.AxisY.GridMajor.Color = Color.Black
      c1chart1.ChartArea.AxisY.GridMajor.Pattern = C1.Win.C1Chart.LinePatternEnum.Solid
      c1chart1.ChartArea.AxisY.GridMinor.Visible = True
      c1chart1.ChartArea.AxisY.GridMinor.Color = Color.Gray
      '&lt;/CodeSnippet&gt;
      CheckBoxXMajor_CheckChanged(_controls(0), EventArgs.Empty)
      CheckBoxXMinor_CheckChanged(_controls(1), EventArgs.Empty)
      CheckBoxYMajor_CheckChanged(_controls(2), EventArgs.Empty)
      CheckBoxYMinor_CheckChanged(_controls(3), EventArgs.Empty)
   End Sub 'Load
   
   '&lt;CodeSnippet&gt;
   ' handler for check box
   Private Sub CheckBoxXMajor_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      c1chart1.ChartArea.AxisX.GridMajor.Visible = cb.Checked
   End Sub 'CheckBoxXMajor_CheckChanged
   
   
   ' handler for check box
   Private Sub CheckBoxXMinor_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      c1chart1.ChartArea.AxisX.GridMinor.Visible = cb.Checked
   End Sub 'CheckBoxXMinor_CheckChanged
   
   
   ' handler for check box
   Private Sub CheckBoxYMajor_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      c1chart1.ChartArea.AxisY.GridMajor.Visible = cb.Checked
   End Sub 'CheckBoxYMajor_CheckChanged
   
   
   ' handler for check box
   Private Sub CheckBoxYMinor_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      c1chart1.ChartArea.AxisY.GridMinor.Visible = cb.Checked
   End Sub 'CheckBoxYMinor_CheckChanged
End Class 'Gridlines '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows gridlines over plot area.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Axes\04.Logarithmic" ParentName="03.Axes" Text="Logarithmic">
    <CodeCS>//&lt;Info&gt;
//Create chart with logarithmic axes.
//&lt;/Info&gt;
public class Logarithmic: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// clear previous settings
		c1chart1.Reset();

		// create sample data		
		int n = 10;
		double[] x1 = new double[n], x2 = new double[n];
		double[] y1 = new double[n], y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = rnd.NextDouble()*10;
			y1[i] = rnd.NextDouble()*10;
			x2[i] = rnd.NextDouble();
			y2[i] = rnd.NextDouble();
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		c1chart1.Legend.Visible = true;
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		// Set plot area color
		c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3;

		//RtfNormal
		// setup axes
		c1chart1.ChartArea.AxisX.SetMinMax(0.1, 10);
		c1chart1.ChartArea.AxisX.GridMajor.Visible = true;
		c1chart1.ChartArea.AxisX.GridMajor.Color = Color.Black;
		c1chart1.ChartArea.AxisX.GridMinor.Visible = true;
		c1chart1.ChartArea.AxisX.GridMinor.Color = Color.Black;
		c1chart1.ChartArea.AxisX.IsLogarithmic = true;

		c1chart1.ChartArea.AxisY.SetMinMax(0.1, 10);
		c1chart1.ChartArea.AxisY.GridMajor.Visible = true;
		c1chart1.ChartArea.AxisY.GridMajor.Color = Color.Black;
		c1chart1.ChartArea.AxisY.GridMinor.Visible = true;
		c1chart1.ChartArea.AxisY.GridMinor.Color = Color.Black;
		c1chart1.ChartArea.AxisY.IsLogarithmic = true;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create chart with logarithmic axes.
'&lt;/Info&gt;
Public Class Logarithmic
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' clear previous settings
      c1chart1.Reset()
      
      ' create sample data		
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = rnd.NextDouble() * 10
         y1(i) = rnd.NextDouble() * 10
         x2(i) = rnd.NextDouble()
         y2(i) = rnd.NextDouble()
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      c1chart1.Legend.Visible = True
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      ' Set plot area color
      c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3
      
      'RtfNormal
      ' setup axes
      c1chart1.ChartArea.AxisX.SetMinMax(0.1, 10)
      c1chart1.ChartArea.AxisX.GridMajor.Visible = True
      c1chart1.ChartArea.AxisX.GridMajor.Color = Color.Black
      c1chart1.ChartArea.AxisX.GridMinor.Visible = True
      c1chart1.ChartArea.AxisX.GridMinor.Color = Color.Black
      c1chart1.ChartArea.AxisX.IsLogarithmic = True
      
      c1chart1.ChartArea.AxisY.SetMinMax(0.1, 10)
      c1chart1.ChartArea.AxisY.GridMajor.Visible = True
      c1chart1.ChartArea.AxisY.GridMajor.Color = Color.Black
      c1chart1.ChartArea.AxisY.GridMinor.Visible = True
      c1chart1.ChartArea.AxisY.GridMinor.Color = Color.Black
      c1chart1.ChartArea.AxisY.IsLogarithmic = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Logarithmic</CodeVB>
    <Info>Create chart with logarithmic axes.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Axes\05.ValueLabels" ParentName="03.Axes" Text="ValueLabels">
    <CodeCS>//&lt;Info&gt;
//Creates value labels annotation.
//&lt;/Info&gt;
public class ValueLabels: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Data
		float[] data1 = new float[] { 800, 1500, 2000, 100};
		float[] data2 = new float[] { 1000, 1200, 1400, 200};
		
		// Create first series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.FillStyle.Color1 = Palette.Light1;
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( data1);
			
		// Create second series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( data2);

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfNormal
		string[] labels = new string[] { "Winter", "Spring", "Summer", "Autumn"};
		Color[] clrs = new Color[] { Color.Blue, Color.Green, Color.Orange, Color.Red};

		for( int i= 0; i&lt; labels.Length; i++)
		{
			C1.Win.C1Chart.ValueLabel vl = c1chart1.ChartArea.AxisX.ValueLabels.AddNewLabel();
			vl.NumericValue = i;
			vl.Text = labels[i];
			vl.Color = clrs[i];
		}

		// Change anno method
		c1chart1.ChartArea.AxisX.AnnoMethod = C1.Win.C1Chart.AnnotationMethodEnum.ValueLabels;
		

		//RtfGray
		// Set x-axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
		c1chart1.ChartArea.AxisX.OnTop = true;
		c1chart1.ChartArea.AxisY.OnTop = true;
		// Show legend
		// c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Creates value labels annotation.
'&lt;/Info&gt;
Public Class ValueLabels
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Data
      Dim data1() As Single = {800, 1500, 2000, 100}
      Dim data2() As Single = {1000, 1200, 1400, 200}
      
      ' Create first series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.FillStyle.Color1 = Palette.Light1
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(data1)
      
      ' Create second series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(data2)
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfNormal
      Dim labels() As String = {"Winter", "Spring", "Summer", "Autumn"}
      Dim clrs() As Color = {Color.Blue, Color.Green, Color.Orange, Color.Red}
      
      Dim i As Integer
      For i = 0 To labels.Length - 1
         Dim vl As C1.Win.C1Chart.ValueLabel = c1chart1.ChartArea.AxisX.ValueLabels.AddNewLabel()
         vl.NumericValue = i
         vl.Text = labels(i)
         vl.Color = clrs(i)
      Next i
      
      ' Change anno method
      c1chart1.ChartArea.AxisX.AnnoMethod = C1.Win.C1Chart.AnnotationMethodEnum.ValueLabels
      
      
      'RtfGray
      ' Set x-axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
      c1chart1.ChartArea.AxisX.OnTop = True
      c1chart1.ChartArea.AxisY.OnTop = True
   End Sub 'Load ' Show legend
End Class 'ValueLabels ' c1chart1.Legend.Visible = true;
'&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Creates value labels annotation.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Axes\06.Markers" ParentName="03.Axes" Text="Markers">
    <CodeCS>//&lt;Info&gt;
//Shows using value labels as markers.
//&lt;/Info&gt;
public class Markers: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();
		
		// Create sample data
		int n = 10;
		double[] x1 = new double[n];
		double[] x2 = new double[n];
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*rnd.NextDouble() - 1;
			y1[i] = 2*rnd.NextDouble() - 1;
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "Series 1";
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "Series 2";
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		c1chart1.Legend.Visible = true;
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		c1chart1.ChartArea.AxisX.SetMinMax( -1, 1);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		c1chart1.ChartArea.PlotArea.Boxed = true;

		//RtfNormal
		c1chart1.ChartArea.AxisX.AnnoMethod = C1.Win.C1Chart.AnnotationMethodEnum.Mixed;

		C1.Win.C1Chart.ValueLabel markerX = c1chart1.ChartArea.AxisX.ValueLabels.AddNewLabel();
		markerX.NumericValue = 0;
		markerX.Moveable = true;
		markerX.MarkerSize = 15;
		markerX.GridLine = true;
		markerX.Color = Palette.Dark1;
		markerX.Appearance = C1.Win.C1Chart.ValueLabelAppearanceEnum.ArrowMarker;

		c1chart1.ChartArea.AxisY.AnnoMethod = C1.Win.C1Chart.AnnotationMethodEnum.Mixed;
		C1.Win.C1Chart.ValueLabel markerY = c1chart1.ChartArea.AxisY.ValueLabels.AddNewLabel();
		markerY.NumericValue = 0;
		markerY.Moveable = true;
		markerY.MarkerSize = 15;
		markerY.GridLine = true;
		markerY.Color = Palette.Dark1;
		markerY.Appearance = C1.Win.C1Chart.ValueLabelAppearanceEnum.ArrowMarker;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using value labels as markers.
'&lt;/Info&gt;
Public Class Markers
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 * rnd.NextDouble() - 1
         y1(i) = 2 * rnd.NextDouble() - 1
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "Series 1"
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "Series 2"
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      c1chart1.Legend.Visible = True
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      'RtfNormal
      c1chart1.ChartArea.AxisX.AnnoMethod = C1.Win.C1Chart.AnnotationMethodEnum.Mixed
      
      Dim markerX As C1.Win.C1Chart.ValueLabel = c1chart1.ChartArea.AxisX.ValueLabels.AddNewLabel()
      markerX.NumericValue = 0
      markerX.Moveable = True
      markerX.MarkerSize = 15
      markerX.GridLine = True
      markerX.Color = Palette.Dark1
      markerX.Appearance = C1.Win.C1Chart.ValueLabelAppearanceEnum.ArrowMarker
      
      c1chart1.ChartArea.AxisY.AnnoMethod = C1.Win.C1Chart.AnnotationMethodEnum.Mixed
      Dim markerY As C1.Win.C1Chart.ValueLabel = c1chart1.ChartArea.AxisY.ValueLabels.AddNewLabel()
      markerY.NumericValue = 0
      markerY.Moveable = True
      markerY.MarkerSize = 15
      markerY.GridLine = True
      markerY.Color = Palette.Dark1
      markerY.Appearance = C1.Win.C1Chart.ValueLabelAppearanceEnum.ArrowMarker
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Markers</CodeVB>
    <Info>Shows using value labels as markers.
</Info>
  </CodeSample>
  <CodeSample Name="04.Data" ParentName="02.Appearance" Text="Data" />
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\04.Data\01.FillStyle" ParentName="04.Data" Text="FillStyle">
    <CodeCS>//&lt;Info&gt;
//Shows different data fill styles.
//&lt;/Info&gt;
public class FillStyle: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.ComboBox cb1, cb2;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				cb1 = new System.Windows.Forms.ComboBox();
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] { C1.Win.C1Chart.FillTypeEnum.SolidColor,
																					C1.Win.C1Chart.FillTypeEnum.Gradient,
																					C1.Win.C1Chart.FillTypeEnum.Hatch});
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Text = cb1.Items[0].ToString();
				cb1.SelectedIndexChanged += new EventHandler(ComboBoxFillType_SelectedIndexChanged);

				cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				FillComboBox( cb2, typeof(C1.Win.C1Chart.GradientStyleEnum));
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.Text = cb2.Items[0].ToString();
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxFillSubtype_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 5;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = rnd.NextDouble()*10;
			y2[i] = rnd.NextDouble()*10;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds1.FillStyle.Color2 = Palette.Dark1;
		ds1.FillStyle.Color1 = Palette.Light1;

		// Copy data into chart
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( y1);

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds2.FillStyle.Color2 = Palette.Dark2;
		ds2.FillStyle.Color1 = Palette.Light2;

		// Copy data into chart
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( y2);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfNormal

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
		ComboBoxFillType_SelectedIndexChanged( _controls[0], EventArgs.Empty);
		ComboBoxFillSubtype_SelectedIndexChanged( _controls[1], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;

	//RtfNormal
	void SetFillType( C1.Win.C1Chart.FillTypeEnum ft)
	{
		C1.Win.C1Chart.GradientStyleEnum gs = C1.Win.C1Chart.GradientStyleEnum.None;
		C1.Win.C1Chart.HatchStyleEnum hs = C1.Win.C1Chart.HatchStyleEnum.None;
		C1.Win.C1Chart.ChartData data =	c1chart1.ChartGroups[0].ChartData;

		foreach( C1.Win.C1Chart.ChartDataSeries ds in data.SeriesList)
		{
			ds.FillStyle.FillType = ft;
			gs = ds.FillStyle.GradientStyle;
			hs = ds.FillStyle.HatchStyle;
		}

		switch( ft)
		{
			case C1.Win.C1Chart.FillTypeEnum.SolidColor:
				cb2.Items.Clear();
				cb2.Enabled = false;
				break;
			case C1.Win.C1Chart.FillTypeEnum.Gradient:
				FillComboBox( cb2, typeof(C1.Win.C1Chart.GradientStyleEnum));;
				cb2.Enabled = true;
				cb2.SelectedItem = gs;
				break;
			case C1.Win.C1Chart.FillTypeEnum.Hatch:
				FillComboBox( cb2, typeof(C1.Win.C1Chart.HatchStyleEnum));
				cb2.Enabled = true;
				cb2.SelectedItem = hs;
				break;
		}
	}

	void SetFillGradientStyle( C1.Win.C1Chart.GradientStyleEnum gs)
	{
		C1.Win.C1Chart.ChartData data =	c1chart1.ChartGroups[0].ChartData;

		foreach( C1.Win.C1Chart.ChartDataSeries ds in data.SeriesList)
			ds.FillStyle.GradientStyle = gs;
	}

	void SetFillHatchStyle( C1.Win.C1Chart.HatchStyleEnum hs)
	{
		C1.Win.C1Chart.ChartData data =	c1chart1.ChartGroups[0].ChartData;

		foreach( C1.Win.C1Chart.ChartDataSeries ds in data.SeriesList)
			ds.FillStyle.HatchStyle = hs;
	}

	//RtfGray
	// handler for combo box
	private void ComboBoxFillType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;

		if( cb.SelectedItem is C1.Win.C1Chart.FillTypeEnum)
			SetFillType( (C1.Win.C1Chart.FillTypeEnum) cb.SelectedItem);
	}

	// handler for combo box
	private void ComboBoxFillSubtype_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		if( cb.SelectedItem is C1.Win.C1Chart.GradientStyleEnum )
			SetFillGradientStyle( (C1.Win.C1Chart.GradientStyleEnum) cb.SelectedItem);
		if( cb.SelectedItem is C1.Win.C1Chart.HatchStyleEnum )
			SetFillHatchStyle( (C1.Win.C1Chart.HatchStyleEnum) cb.SelectedItem);
	}
//&lt;/CodeSnippet&gt;

}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows different data fill styles.
'&lt;/Info&gt;
Public Class FillStyle
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private cb1, cb2 As System.Windows.Forms.ComboBox
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            cb1 = New System.Windows.Forms.ComboBox()
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {C1.Win.C1Chart.FillTypeEnum.SolidColor, C1.Win.C1Chart.FillTypeEnum.Gradient, C1.Win.C1Chart.FillTypeEnum.Hatch})
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Text = cb1.Items(0).ToString()
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBoxFillType_SelectedIndexChanged
            
            cb2 = New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            FillComboBox(cb2, GetType(C1.Win.C1Chart.GradientStyleEnum))
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Text = cb2.Items(0).ToString()
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxFillSubtype_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 5
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = rnd.NextDouble() * 10
         y2(i) = rnd.NextDouble() * 10
      Next i
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds1.FillStyle.Color2 = Palette.Dark1
      ds1.FillStyle.Color1 = Palette.Light1
      
      ' Copy data into chart
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(y1)
      
      ' Create data series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds2.FillStyle.Color2 = Palette.Dark2
      ds2.FillStyle.Color1 = Palette.Light2
      
      ' Copy data into chart
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfNormal
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      ' Show legend
      c1chart1.Legend.Visible = True
      '&lt;/CodeSnippet&gt;
      ComboBoxFillType_SelectedIndexChanged(_controls(0), EventArgs.Empty)
      ComboBoxFillSubtype_SelectedIndexChanged(_controls(1), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   'RtfNormal
   Sub SetFillType(ft As C1.Win.C1Chart.FillTypeEnum)
      Dim gs As C1.Win.C1Chart.GradientStyleEnum = C1.Win.C1Chart.GradientStyleEnum.None
      Dim hs As C1.Win.C1Chart.HatchStyleEnum = C1.Win.C1Chart.HatchStyleEnum.None
      Dim data As C1.Win.C1Chart.ChartData = c1chart1.ChartGroups(0).ChartData
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  data.SeriesList
         ds.FillStyle.FillType = ft
         gs = ds.FillStyle.GradientStyle
         hs = ds.FillStyle.HatchStyle
      Next ds
      
      Select Case ft
         Case C1.Win.C1Chart.FillTypeEnum.SolidColor
            cb2.Items.Clear()
            cb2.Enabled = False
         Case C1.Win.C1Chart.FillTypeEnum.Gradient
            FillComboBox(cb2, GetType(C1.Win.C1Chart.GradientStyleEnum))
            cb2.Enabled = True
            cb2.SelectedItem = gs
         Case C1.Win.C1Chart.FillTypeEnum.Hatch
            FillComboBox(cb2, GetType(C1.Win.C1Chart.HatchStyleEnum))
            cb2.Enabled = True
            cb2.SelectedItem = hs
      End Select
   End Sub 'SetFillType
   
   
   Sub SetFillGradientStyle(gs As C1.Win.C1Chart.GradientStyleEnum)
      Dim data As C1.Win.C1Chart.ChartData = c1chart1.ChartGroups(0).ChartData
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  data.SeriesList
         ds.FillStyle.GradientStyle = gs
      Next ds
   End Sub 'SetFillGradientStyle
    
   Sub SetFillHatchStyle(hs As C1.Win.C1Chart.HatchStyleEnum)
      Dim data As C1.Win.C1Chart.ChartData = c1chart1.ChartGroups(0).ChartData
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  data.SeriesList
         ds.FillStyle.HatchStyle = hs
      Next ds
   End Sub 'SetFillHatchStyle
    
   'RtfGray
   ' handler for combo box
   Private Sub ComboBoxFillType_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If TypeOf cb.SelectedItem Is C1.Win.C1Chart.FillTypeEnum Then
         SetFillType(CType(cb.SelectedItem, C1.Win.C1Chart.FillTypeEnum))
      End If
   End Sub 'ComboBoxFillType_SelectedIndexChanged
    
   ' handler for combo box
   Private Sub ComboBoxFillSubtype_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If TypeOf cb.SelectedItem Is C1.Win.C1Chart.GradientStyleEnum Then
         SetFillGradientStyle(CType(cb.SelectedItem, C1.Win.C1Chart.GradientStyleEnum))
      End If
      If TypeOf cb.SelectedItem Is C1.Win.C1Chart.HatchStyleEnum Then
         SetFillHatchStyle(CType(cb.SelectedItem, C1.Win.C1Chart.HatchStyleEnum))
      End If
   End Sub 'ComboBoxFillSubtype_SelectedIndexChanged '&lt;/CodeSnippet&gt;
End Class 'FillStyle</CodeVB>
    <Info>Shows different data fill styles.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\04.Data\02.Texture" ParentName="04.Data" Text="Texture">
    <CodeCS>//&lt;Info&gt;
//Show texture data fill style.
//&lt;/Info&gt;
public class Texture: ChartSample
{
	System.Drawing.Image _img1, _img2;

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 3;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = rnd.NextDouble()*10;
			y2[i] = rnd.NextDouble()*10;
		}

		//RtfNormal
		// load images from resource
		if( _img1 == null)
			_img1  = new Bitmap(System.Reflection.Assembly.GetExecutingAssembly()
			.GetManifestResourceStream("images.texture1.jpg"));

		if( _img2 == null)
			_img2  = new Bitmap(System.Reflection.Assembly.GetExecutingAssembly()
			.GetManifestResourceStream("images.texture2.jpg"));

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds1.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Texture;
		ds1.FillStyle.Image = _img1;

		// Copy data into chart
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( y1);

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds2.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Texture;
		ds2.FillStyle.Image = _img2;

		// Copy data into chart
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( y2);

		//RtfGray
		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Show texture data fill style.
'&lt;/Info&gt;
Public Class Texture
   Inherits ChartSample
   Private _img1, _img2 As System.Drawing.Image
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 3
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = rnd.NextDouble() * 10
         y2(i) = rnd.NextDouble() * 10
      Next i
      
      'RtfNormal
      ' load images from resource
      If _img1 Is Nothing Then
         _img1 = New Bitmap(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("images.texture1.jpg"))
      End If
      
      If _img2 Is Nothing Then
         _img2 = New Bitmap(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("images.texture2.jpg"))
      End If
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds1.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Texture
      ds1.FillStyle.Image = _img1
      
      ' Copy data into chart
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(y1)
      
      ' Create data series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds2.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Texture
      ds2.FillStyle.Image = _img2
      
      ' Copy data into chart
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(y2)
      
      'RtfGray
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      ' Show legend
      c1chart1.Legend.Visible = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Texture</CodeVB>
    <Info>Show texture data fill style.
</Info>
  </CodeSample>
  <CodeSample Name="05.Labels" ParentName="02.Appearance" Text="Labels" />
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\05.Labels\01.Labels" ParentName="05.Labels" Text="Labels">
    <CodeCS>//&lt;Info&gt;
//Shows using labels with various attachment.
//&lt;/Info&gt;
public class Labels: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// clear previous settings
		c1chart1.Reset();

		// create sample data		
		int n = 10;
		double[] x1 = new double[n], x2 = new double[n];
		double[] y1 = new double[n], y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		// Show legend
		c1chart1.Legend.Visible = true;

		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		// Show plot area border
		c1chart1.ChartArea.PlotArea.Boxed = true;

		// Set plot area color
		c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3;

		c1chart1.ChartArea.Margins.Top = 20;
		
		//RtfNormal
		// Set label appearance
      		c1chart1.ChartLabels.DefaultLabelStyle.BackColor = Color.FromArgb( 128, Palette.Back2);
		c1chart1.ChartLabels.DefaultLabelStyle.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;
		c1chart1.ChartLabels.DefaultLabelStyle.Border.Rounding.All = 5;
	
		// Create label attached by coordinates
		C1.Win.C1Chart.Label lbl1 = c1chart1.ChartLabels.LabelsCollection.AddNewLabel();
		lbl1.AttachMethod = C1.Win.C1Chart.AttachMethodEnum.Coordinate;
		lbl1.AttachMethodData.X = 10;
		lbl1.AttachMethodData.Y = 10;
		lbl1.Compass = C1.Win.C1Chart.LabelCompassEnum.SouthEast;
		lbl1.Text = "x=10,y=10";
		lbl1.Visible = true;

		// Create label attached by data coordinate
		C1.Win.C1Chart.Label lbl2 = c1chart1.ChartLabels.LabelsCollection.AddNewLabel();
		lbl2.AttachMethod = C1.Win.C1Chart.AttachMethodEnum.DataCoordinate;
		lbl2.AttachMethodData.GroupIndex = 0;
		lbl2.AttachMethodData.X = 0;
		lbl2.AttachMethodData.Y = 0;
		lbl2.Compass = C1.Win.C1Chart.LabelCompassEnum.NorthEast;
		lbl2.Offset = 10;
		lbl2.Connected = true;
		lbl2.Text = "dx=0,dy=0";
		lbl2.Visible = true;

		// Create label attached by data index
		C1.Win.C1Chart.Label lbl3 = c1chart1.ChartLabels.LabelsCollection.AddNewLabel();
		lbl3.AttachMethod = C1.Win.C1Chart.AttachMethodEnum.DataIndex;
		lbl3.AttachMethodData.GroupIndex = 0;
		lbl3.AttachMethodData.SeriesIndex = 0;
		lbl3.AttachMethodData.PointIndex = 0;
		lbl3.Offset = 10;
		lbl3.Connected = true;
		lbl3.Compass = C1.Win.C1Chart.LabelCompassEnum.North;
		lbl3.Text = "si=0,pi=0";
		lbl3.Visible = true;
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.ChartLabels.LabelsCollection.Clear();
		base.Unload( c1chart1);
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using labels with various attachment.
'&lt;/Info&gt;
Public Class Labels
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' clear previous settings
      c1chart1.Reset()
      
      ' create sample data		
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      ' Show legend
      c1chart1.Legend.Visible = True
      
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      ' Show plot area border
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      ' Set plot area color
      c1chart1.ChartArea.PlotArea.BackColor = Palette.Back3
      
      c1chart1.ChartArea.Margins.Top = 20
      
      'RtfNormal
      ' Set label appearance
      c1chart1.ChartLabels.DefaultLabelStyle.BackColor = Color.FromArgb(128, Palette.Back2)
      c1chart1.ChartLabels.DefaultLabelStyle.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      c1chart1.ChartLabels.DefaultLabelStyle.Border.Rounding.All = 5
      
      ' Create label attached by coordinates
      Dim lbl1 As C1.Win.C1Chart.Label = c1chart1.ChartLabels.LabelsCollection.AddNewLabel()
      lbl1.AttachMethod = C1.Win.C1Chart.AttachMethodEnum.Coordinate
      lbl1.AttachMethodData.X = 10
      lbl1.AttachMethodData.Y = 10
      lbl1.Compass = C1.Win.C1Chart.LabelCompassEnum.SouthEast
      lbl1.Text = "x=10,y=10"
      lbl1.Visible = True
      
      ' Create label attached by data coordinate
      Dim lbl2 As C1.Win.C1Chart.Label = c1chart1.ChartLabels.LabelsCollection.AddNewLabel()
      lbl2.AttachMethod = C1.Win.C1Chart.AttachMethodEnum.DataCoordinate
      lbl2.AttachMethodData.GroupIndex = 0
      lbl2.AttachMethodData.X = 0
      lbl2.AttachMethodData.Y = 0
      lbl2.Compass = C1.Win.C1Chart.LabelCompassEnum.NorthEast
      lbl2.Offset = 10
      lbl2.Connected = True
      lbl2.Text = "dx=0,dy=0"
      lbl2.Visible = True
      
      ' Create label attached by data index
      Dim lbl3 As C1.Win.C1Chart.Label = c1chart1.ChartLabels.LabelsCollection.AddNewLabel()
      lbl3.AttachMethod = C1.Win.C1Chart.AttachMethodEnum.DataIndex
      lbl3.AttachMethodData.GroupIndex = 0
      lbl3.AttachMethodData.SeriesIndex = 0
      lbl3.AttachMethodData.PointIndex = 0
      lbl3.Offset = 10
      lbl3.Connected = True
      lbl3.Compass = C1.Win.C1Chart.LabelCompassEnum.North
      lbl3.Text = "si=0,pi=0"
      lbl3.Visible = True
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      c1chart1.ChartLabels.LabelsCollection.Clear()
      MyBase.Unload(c1chart1)
   End Sub 'Unload
End Class 'Labels</CodeVB>
    <Info>Shows using labels with various attachment.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\05.Labels\02.DataLabels" ParentName="05.Labels" Text="DataLabels">
    <CodeCS>//&lt;Info&gt;
//Show using automatic data labelling.
//&lt;/Info&gt;
public class DataLabels: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.ComboBox cb1 = new System.Windows.Forms.ComboBox();
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] {"XYPlot","Bar","Pie"});
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Text = "XYPlot";
				cb1.SelectedIndexChanged += new EventHandler(ComboBoxChartType_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 4;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = rnd.NextDouble()*10;
			y2[i] = 10 + rnd.NextDouble()*10;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds1.LineStyle.Color = Palette.Light3;
		ds1.FillStyle.Color1 = Palette.Light3;
		ds1.LineStyle.Thickness = 2;
		ds1.SymbolStyle.Color = Palette.Light3;
		ds1.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds1.SymbolStyle.OutlineColor = Palette.Dark3;

 		// Copy data into chart
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( y1);

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds2.LineStyle.Color = Palette.Light2;
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.LineStyle.Thickness = 2;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Diamond;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;

		// Copy data into chart
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( y2);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		// Add space for labels
		c1chart1.ChartGroups[0].Pie.OtherOffset = 25;

		//RtfNormal
		// Setup data labels

		foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
		{
			ds.DataLabel.Text = "{#YVAL:0.0}";
			ds.DataLabel.Visible = true;
			ds.DataLabel.Offset = 5;
			ds.DataLabel.Connected = true;
			ds.DataLabel.Style.BackColor = Palette.Back3;
			ds.DataLabel.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Raised;
		}

		//RtfGray
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
		ComboBoxChartType_SelectedIndexChanged( _controls[0], EventArgs.Empty);
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
			ds.DataLabel.Visible = false;
		base.Unload( c1chart1);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// handler for combo box
	private void ComboBoxChartType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "XYPlot":
				c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;
				foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
					ds.DataLabel.Compass = C1.Win.C1Chart.LabelCompassEnum.NorthEast;
				break;
			case "Bar":
				c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;
				foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
					ds.DataLabel.Compass = C1.Win.C1Chart.LabelCompassEnum.North;
				break;
			case "Pie":
				c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie;
				foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
					ds.DataLabel.Compass = C1.Win.C1Chart.LabelCompassEnum.Orthogonal;
				break;
		}
	}
//&lt;/CodeSnippet&gt;

}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Show using automatic data labelling.
'&lt;/Info&gt;
Public Class DataLabels
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.ComboBox()
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {"XYPlot", "Bar", "Pie"})
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Text = "XYPlot"
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBoxChartType_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 4
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = rnd.NextDouble() * 10
         y2(i) = 10 + rnd.NextDouble() * 10
      Next i
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds1.LineStyle.Color = Palette.Light3
      ds1.FillStyle.Color1 = Palette.Light3
      ds1.LineStyle.Thickness = 2
      ds1.SymbolStyle.Color = Palette.Light3
      ds1.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds1.SymbolStyle.OutlineColor = Palette.Dark3
      
      ' Copy data into chart
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(y1)
      
      ' Create data series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds2.LineStyle.Color = Palette.Light2
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.LineStyle.Thickness = 2
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Diamond
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      
      ' Copy data into chart
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      ' Add space for labels
      c1chart1.ChartGroups(0).Pie.OtherOffset = 25
      
      'RtfNormal
      ' Setup data labels
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
         ds.DataLabel.Text = "{#YVAL:0.0}"
         ds.DataLabel.Visible = True
         ds.DataLabel.Offset = 5
         ds.DataLabel.Connected = True
         ds.DataLabel.Style.BackColor = Palette.Back3
         ds.DataLabel.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Raised
      Next ds
      
      'RtfGray
      ' Show legend
      c1chart1.Legend.Visible = True
      '&lt;/CodeSnippet&gt;
      ComboBoxChartType_SelectedIndexChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
         ds.DataLabel.Visible = False
      Next ds
      MyBase.Unload(c1chart1)
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' handler for combo box
   Private Sub ComboBoxChartType_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "XYPlot"
            c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
            Dim ds As C1.Win.C1Chart.ChartDataSeries
            For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
               ds.DataLabel.Compass = C1.Win.C1Chart.LabelCompassEnum.NorthEast
            Next ds
         Case "Bar"
            c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
            Dim ds As C1.Win.C1Chart.ChartDataSeries
            For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
               ds.DataLabel.Compass = C1.Win.C1Chart.LabelCompassEnum.North
            Next ds
         Case "Pie"
            c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie
            Dim ds As C1.Win.C1Chart.ChartDataSeries
            For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
               ds.DataLabel.Compass = C1.Win.C1Chart.LabelCompassEnum.Orthogonal
            Next ds
      End Select
   End Sub 'ComboBoxChartType_SelectedIndexChanged
End Class 'DataLabels '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Show using automatic data labelling.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\01.Colors" ParentName="02.Appearance" Text="Colors">
    <CodeCS>//&lt;Info&gt;
//Shows using colors for basic chart elements.
//&lt;/Info&gt;
public class Colors: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.ComboBox cb1 = null, cb2 = null, cb3 = null;
	System.Windows.Forms.Button btn1 = null, btn2 = null, btn3 = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				cb1 = new System.Windows.Forms.ComboBox();
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] {"Chart", "ChartArea", "Header","Footer","Legend"});
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Text = "Chart";
				cb1.Width = 75;
				cb1.SelectedIndexChanged += new EventHandler(ComboBoxChartElement_SelectedIndexChanged);

				cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb2.Items.AddRange(new object[] {"Solid", "Gradient", "Hatched"});
				cb2.Width = 65;
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxFill_SelectedIndexChanged);

				cb3 = new System.Windows.Forms.ComboBox();
				cb3.BackColor = System.Drawing.SystemColors.Control;
				cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb3.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				cb3.Width = 100;
				cb3.SelectedIndexChanged += new EventHandler(ComboBoxType_SelectedIndexChanged);

				btn1 = new System.Windows.Forms.Button();
				btn1.Location = new System.Drawing.Point( cb3.Right + 10, 0);
				btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn1.Width = 30;
				btn1.Height = 21;
				btn1.Text = "B";
				btn1.Click += new EventHandler(ButtonColor_Click);
				btn1.BackColorChanged += new EventHandler(ButtonColor_BackColorChanged);

				btn2 = new System.Windows.Forms.Button();
				btn2.Location = new System.Drawing.Point( btn1.Right, 0);
				btn2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn2.Width = 30;
				btn2.Height = 21;
				btn2.Text = "B2";
				btn2.Click += new EventHandler(ButtonColor_Click);
				btn2.BackColorChanged += new EventHandler(ButtonColor_BackColorChanged);
				btn2.EnabledChanged += new EventHandler(ButtonColor_EnabledChanged);

				btn3 = new System.Windows.Forms.Button();
				btn3.Location = new System.Drawing.Point( btn2.Right + 10, 0);
				btn3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn3.Width = 60;
				btn3.Height = 21;
				btn3.Text = "F";
				btn3.Click += new EventHandler(ButtonColor_Click);
				btn3.BackColorChanged += new EventHandler(ButtonColor_BackColorChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb3, btn1, btn2, btn3};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);

		c1chart1.ChartArea.PlotArea.Opaque = false;
		c1chart1.Legend.Visible = true;
		c1chart1.Legend.Text = "Legend";

		c1chart1.Header.Visible = true;
		c1chart1.Header.Text = "Header";

		c1chart1.Footer.Visible = true;
		c1chart1.Footer.Text = "Footer";

		c1chart1.Style.BackColor = Palette.Back;

		ComboBoxChartElement_SelectedIndexChanged( _controls[0], EventArgs.Empty);
	}
//&lt;CodeSnippet&gt;
	C1.Win.C1Chart.Style _style = null;

	private void ComboBoxChartElement_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Chart":
				_style = c1chart1.Style;
				break;
			case "ChartArea":
				_style = c1chart1.ChartArea.Style;
				break;
			case "Legend":
				_style = c1chart1.Legend.Style;
				break;
			case "Header":
				_style = c1chart1.Header.Style;
				break;
			case "Footer":
				_style = c1chart1.Footer.Style;
				break;
		}
		if( _style!=null)
		{
			if( _style.GradientStyle != C1.Win.C1Chart.GradientStyleEnum.None)
				cb2.Text = "Gradient";
			else if( _style.HatchStyle != C1.Win.C1Chart.HatchStyleEnum.None)
				cb2.Text = "Hatched";
			else
				cb2.Text = "Solid";
			
			btn1.BackColor = _style.BackColor;
			if( _style.BackColor2.IsEmpty || _style.BackColor2.Equals(_style.BackColor))
			{
				_style.BackColor2 = Palette.Back2;
				btn2.BackColor = _style.BackColor2;
			}
			else
				btn2.BackColor = _style.BackColor2;
			btn3.BackColor = _style.ForeColor;
		}
	}

	private void ComboBoxFill_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;

		if( _style!=null)
		{
			switch( cb.Text)
			{
				case "Solid":
					cb3.Items.Clear();
					cb3.Enabled = false;
					btn2.Enabled = false;
					_style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.None;
					_style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.None;
					break;
				case "Gradient":
					FillComboBox( cb3, typeof(C1.Win.C1Chart.GradientStyleEnum));;
					cb3.Items.Remove( C1.Win.C1Chart.GradientStyleEnum.None);
					cb3.Enabled = true;
					btn2.Enabled = true;
					_style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.None;
					if( _style.GradientStyle == C1.Win.C1Chart.GradientStyleEnum.None)
						_style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.Horizontal;
					cb3.SelectedItem = _style.GradientStyle;
					break;
				case "Hatched":
					FillComboBox( cb3, typeof(C1.Win.C1Chart.HatchStyleEnum));
					cb3.Items.Remove( C1.Win.C1Chart.HatchStyleEnum.None);
					cb3.Enabled = true;
					btn2.Enabled = true;
					_style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.None;
					if( _style.HatchStyle == C1.Win.C1Chart.HatchStyleEnum.None)
						_style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.Horizontal;
					cb3.SelectedItem = _style.HatchStyle;
					break;
			}
		}
	}

	private void ComboBoxType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;

		if( _style!=null)
		{
			if( cb.SelectedItem is C1.Win.C1Chart.GradientStyleEnum )
				_style.GradientStyle = (C1.Win.C1Chart.GradientStyleEnum) cb.SelectedItem;
			if( cb.SelectedItem is C1.Win.C1Chart.HatchStyleEnum )
				_style.HatchStyle = (C1.Win.C1Chart.HatchStyleEnum) cb.SelectedItem;

		}
	}

	private void ButtonColor_Click(object sender, System.EventArgs e)
	{
		System.Windows.Forms.Button btn = (System.Windows.Forms.Button)sender;

		System.Windows.Forms.ColorDialog dlg = new System.Windows.Forms.ColorDialog();
		dlg.Color = btn.BackColor ;
		if( dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
		{
			btn.BackColor = dlg.Color;
		
			if( _style!=null)
			{
				switch( btn.Text)
				{
					case "B":
						_style.BackColor = btn.BackColor;
						break;
					case "B2":
						_style.BackColor2 = btn.BackColor;
						break;
					case "F":
						_style.ForeColor = btn.BackColor;
						break;
				}
			}
		}
	}

	//RtfGray
	private void ButtonColor_BackColorChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.Button btn = (System.Windows.Forms.Button)sender;

		// Set contrast fore color
		if( btn.BackColor.GetBrightness() &lt; 0.5)
			btn.ForeColor = Color.White;
		else
			btn.ForeColor = Color.Black;
	}

	private void ButtonColor_EnabledChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.Button btn = (System.Windows.Forms.Button)sender;

		if( btn.Enabled)
			btn1.Width = 30;
		else
			btn1.Width = 60;
	}

//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using colors for basic chart elements.
'&lt;/Info&gt;
Public Class Colors
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private cb1 As System.Windows.Forms.ComboBox = Nothing
   Private cb2 As System.Windows.Forms.ComboBox = Nothing
   Private cb3 As System.Windows.Forms.ComboBox = Nothing
   Private btn1 As System.Windows.Forms.Button = Nothing
   Private btn2 As System.Windows.Forms.Button = Nothing
   Private btn3 As System.Windows.Forms.Button = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            cb1 = New System.Windows.Forms.ComboBox()
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {"Chart", "ChartArea", "Header", "Footer", "Legend"})
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Text = "Chart"
            cb1.Width = 75
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBoxChartElement_SelectedIndexChanged
            
            cb2 = New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb2.Items.AddRange(New Object() {"Solid", "Gradient", "Hatched"})
            cb2.Width = 65
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxFill_SelectedIndexChanged
            
            cb3 = New System.Windows.Forms.ComboBox()
            cb3.BackColor = System.Drawing.SystemColors.Control
            cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb3.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            cb3.Width = 100
            AddHandler cb3.SelectedIndexChanged, AddressOf ComboBoxType_SelectedIndexChanged
            
            btn1 = New System.Windows.Forms.Button()
            btn1.Location = New System.Drawing.Point(cb3.Right + 10, 0)
            btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn1.Width = 30
            btn1.Height = 21
            btn1.Text = "B"
            AddHandler btn1.Click, AddressOf ButtonColor_Click
            AddHandler btn1.BackColorChanged, AddressOf ButtonColor_BackColorChanged
            
            btn2 = New System.Windows.Forms.Button()
            btn2.Location = New System.Drawing.Point(btn1.Right, 0)
            btn2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn2.Width = 30
            btn2.Height = 21
            btn2.Text = "B2"
            AddHandler btn2.Click, AddressOf ButtonColor_Click
            AddHandler btn2.BackColorChanged, AddressOf ButtonColor_BackColorChanged
            AddHandler btn2.EnabledChanged, AddressOf ButtonColor_EnabledChanged
            
            btn3 = New System.Windows.Forms.Button()
            btn3.Location = New System.Drawing.Point(btn2.Right + 10, 0)
            btn3.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn3.Width = 60
            btn3.Height = 21
            btn3.Text = "F"
            AddHandler btn3.Click, AddressOf ButtonColor_Click
            AddHandler btn3.BackColorChanged, AddressOf ButtonColor_BackColorChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb3, btn1, btn2, btn3}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      
      c1chart1.ChartArea.PlotArea.Opaque = False
      c1chart1.Legend.Visible = True
      c1chart1.Legend.Text = "Legend"
      
      c1chart1.Header.Visible = True
      c1chart1.Header.Text = "Header"
      
      c1chart1.Footer.Visible = True
      c1chart1.Footer.Text = "Footer"
      
      c1chart1.Style.BackColor = Palette.Back
      
      ComboBoxChartElement_SelectedIndexChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   '&lt;CodeSnippet&gt;
   Private _style As C1.Win.C1Chart.Style = Nothing
   
   
   Private Sub ComboBoxChartElement_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Chart"
            _style = c1chart1.Style
         Case "ChartArea"
            _style = c1chart1.ChartArea.Style
         Case "Legend"
            _style = c1chart1.Legend.Style
         Case "Header"
            _style = c1chart1.Header.Style
         Case "Footer"
            _style = c1chart1.Footer.Style
      End Select
      If Not (_style Is Nothing) Then
         If _style.GradientStyle &lt;&gt; C1.Win.C1Chart.GradientStyleEnum.None Then
            cb2.Text = "Gradient"
         ElseIf _style.HatchStyle &lt;&gt; C1.Win.C1Chart.HatchStyleEnum.None Then
            cb2.Text = "Hatched"
         Else
            cb2.Text = "Solid"
         End If 
         btn1.BackColor = _style.BackColor
         If _style.BackColor2.IsEmpty Or _style.BackColor2.Equals(_style.BackColor) Then
            _style.BackColor2 = Palette.Back2
            btn2.BackColor = _style.BackColor2
         Else
            btn2.BackColor = _style.BackColor2
         End If
         btn3.BackColor = _style.ForeColor
      End If
   End Sub 'ComboBoxChartElement_SelectedIndexChanged
   
   
   Private Sub ComboBoxFill_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If Not (_style Is Nothing) Then
         Select Case cb.Text
            Case "Solid"
               cb3.Items.Clear()
               cb3.Enabled = False
               btn2.Enabled = False
               _style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.None
               _style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.None
            Case "Gradient"
               FillComboBox(cb3, GetType(C1.Win.C1Chart.GradientStyleEnum))
               cb3.Items.Remove(C1.Win.C1Chart.GradientStyleEnum.None)
               cb3.Enabled = True
               btn2.Enabled = True
               _style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.None
               If _style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.None Then
                  _style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.Horizontal
               End If
               cb3.SelectedItem = _style.GradientStyle
            Case "Hatched"
               FillComboBox(cb3, GetType(C1.Win.C1Chart.HatchStyleEnum))
               cb3.Items.Remove(C1.Win.C1Chart.HatchStyleEnum.None)
               cb3.Enabled = True
               btn2.Enabled = True
               _style.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.None
               If _style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.None Then
                  _style.HatchStyle = C1.Win.C1Chart.HatchStyleEnum.Horizontal
               End If
               cb3.SelectedItem = _style.HatchStyle
         End Select
      End If
   End Sub 'ComboBoxFill_SelectedIndexChanged
   
   
   Private Sub ComboBoxType_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If Not (_style Is Nothing) Then
         If TypeOf cb.SelectedItem Is C1.Win.C1Chart.GradientStyleEnum Then
            _style.GradientStyle = CType(cb.SelectedItem, C1.Win.C1Chart.GradientStyleEnum)
         End If
         If TypeOf cb.SelectedItem Is C1.Win.C1Chart.HatchStyleEnum Then
            _style.HatchStyle = CType(cb.SelectedItem, C1.Win.C1Chart.HatchStyleEnum)
         End If 
      End If
   End Sub 'ComboBoxType_SelectedIndexChanged
   
   
   Private Sub ButtonColor_Click(sender As Object, e As System.EventArgs)
      Dim btn As System.Windows.Forms.Button = CType(sender, System.Windows.Forms.Button)
      
      Dim dlg As New System.Windows.Forms.ColorDialog()
      dlg.Color = btn.BackColor
      If dlg.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
         btn.BackColor = dlg.Color
         
         If Not (_style Is Nothing) Then
            Select Case btn.Text
               Case "B"
                  _style.BackColor = btn.BackColor
               Case "B2"
                  _style.BackColor2 = btn.BackColor
               Case "F"
                  _style.ForeColor = btn.BackColor
            End Select
         End If
      End If
   End Sub 'ButtonColor_Click
   
   
   'RtfGray
   Private Sub ButtonColor_BackColorChanged(sender As Object, e As System.EventArgs)
      Dim btn As System.Windows.Forms.Button = CType(sender, System.Windows.Forms.Button)
      
      ' Set contrast fore color
      If btn.BackColor.GetBrightness() &lt; 0.5 Then
         btn.ForeColor = Color.White
      Else
         btn.ForeColor = Color.Black
      End If
   End Sub 'ButtonColor_BackColorChanged
    
   Private Sub ButtonColor_EnabledChanged(sender As Object, e As System.EventArgs)
      Dim btn As System.Windows.Forms.Button = CType(sender, System.Windows.Forms.Button)
      
      If btn.Enabled Then
         btn1.Width = 30
      Else
         btn1.Width = 60
      End If
   End Sub 'ButtonColor_EnabledChanged 
End Class 'Colors '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using colors for basic chart elements.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\02.Borders" ParentName="02.Appearance" Text="Borders">
    <CodeCS>//&lt;Info&gt;
//Shows using borders for basic chart elements.
//&lt;/Info&gt;
public class Borders: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.ComboBox cb1 = null, cb2 = null;
	System.Windows.Forms.NumericUpDown ud1 = null, ud2 = null;
	System.Windows.Forms.Button btn1 = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				cb1 = new System.Windows.Forms.ComboBox();
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] {"ChartArea", "Header","Footer","Legend"});
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Text = "ChartArea";
				cb1.Width = 75;
				cb1.SelectedIndexChanged += new EventHandler(ComboBoxChartElement_SelectedIndexChanged);

				cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				FillComboBox( cb2, typeof(C1.Win.C1Chart.BorderStyleEnum));
				cb2.Items.Remove( C1.Win.C1Chart.BorderStyleEnum.NotSet);
				cb2.Width = 85;
				cb2.Location = new System.Drawing.Point( cb1.Right + 5, 0);
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxBorder_SelectedIndexChanged);

				btn1 = new System.Windows.Forms.Button();
				btn1.Location = new System.Drawing.Point( cb2.Right + 5, 0);
				btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn1.Width = 45;
				btn1.Height = 21;
				btn1.Text = "Color";
				btn1.Click += new EventHandler(ButtonColor_Click);
				btn1.BackColorChanged += new EventHandler(ButtonColor_BackColorChanged);

				System.Windows.Forms.Label lbl1 = new System.Windows.Forms.Label();
				lbl1.Location = new System.Drawing.Point( btn1.Right + 5, 0);
				lbl1.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
				lbl1.Text = "Thickness";
				lbl1.Width = 55;

				ud1 = new System.Windows.Forms.NumericUpDown();
				ud1.Location = new System.Drawing.Point( lbl1.Right + 2, 2);
				ud1.Width = 35;
				ud1.BackColor = System.Drawing.SystemColors.Control;
				ud1.Minimum = 1;
				ud1.Maximum = 10;
				ud1.ValueChanged += new EventHandler(Thickness_ValueChanged);

				System.Windows.Forms.Label lbl2 = new System.Windows.Forms.Label();
				lbl2.Location = new System.Drawing.Point( ud1.Right + 5, 0);
				lbl2.TextAlign = System.Drawing.ContentAlignment.MiddleRight;
				lbl2.Text = "Rounding";
				lbl2.Width = 55;

				ud2 = new System.Windows.Forms.NumericUpDown();
				ud2.Location = new System.Drawing.Point( lbl2.Right + 2, 2);
				ud2.Width = 35;
				ud2.BackColor = System.Drawing.SystemColors.Control;
				ud2.Minimum = 0;
				ud2.Maximum = 20;
				ud2.ValueChanged += new EventHandler(Rounding_ValueChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, btn1, lbl1, ud1, lbl2, ud2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);

		c1chart1.ChartArea.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		c1chart1.Legend.Visible = true;
		c1chart1.Legend.Text = "Legend";
		c1chart1.Legend.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		c1chart1.Header.Visible = true;
		c1chart1.Header.Text = "Header";
		c1chart1.Header.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		c1chart1.Footer.Visible = true;
		c1chart1.Footer.Text = "Footer";
		c1chart1.Footer.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		ComboBoxChartElement_SelectedIndexChanged( _controls[0], EventArgs.Empty);
	}
//&lt;CodeSnippet&gt;
	// Border of selected chart element
	C1.Win.C1Chart.Border _border = null;

	private void ComboBoxChartElement_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "ChartArea":
				_border = c1chart1.ChartArea.Style.Border;
				break;
			case "Legend":
				_border = c1chart1.Legend.Style.Border;
				break;
			case "Header":
				_border = c1chart1.Header.Style.Border;
				break;
			case "Footer":
				_border = c1chart1.Footer.Style.Border;
				break;
		}
		if( _border!=null)
		{
			if( _border.Color.IsEmpty || _border.Color.Equals( System.Drawing.Color.Transparent))
				_border.Color = Palette.Fore;
			btn1.BackColor = _border.Color;
			ud1.Value = _border.Thickness;
			ud2.Value = _border.Rounding.All;

			cb2.SelectedItem = _border.BorderStyle;
		}
	}

	private void ComboBoxBorder_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;

		if( _border!=null &amp;&amp; cb.SelectedItem!=null)
		{
			_border.BorderStyle = (C1.Win.C1Chart.BorderStyleEnum) cb.SelectedItem;
			_border.Color = btn1.BackColor;
		}
	}

	private void ButtonColor_Click(object sender, System.EventArgs e)
	{
		System.Windows.Forms.Button btn = (System.Windows.Forms.Button)sender;

		System.Windows.Forms.ColorDialog dlg = new System.Windows.Forms.ColorDialog();
		dlg.Color = btn.BackColor ;
		if( dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)
		{
			btn.BackColor = dlg.Color;
		
			if( _border!=null)
				_border.Color = btn.BackColor;
		}
	}

	private void Thickness_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)sender;

		if( _border!=null)
			_border.Thickness = (int)ud.Value;
	}


	private void Rounding_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.NumericUpDown ud = (System.Windows.Forms.NumericUpDown)sender;

		if( _border!=null)
			_border.Rounding.All = (int)ud.Value;
	}

	//RtfGray
	private void ButtonColor_BackColorChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.Button btn = (System.Windows.Forms.Button)sender;

		// Set contrast fore color
		if( btn.BackColor.GetBrightness() &lt; 0.5)
			btn.ForeColor = Color.White;
		else
			btn.ForeColor = Color.Black;
	}
//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using borders for basic chart elements.
'&lt;/Info&gt;
Public Class Borders
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private cb1 As System.Windows.Forms.ComboBox = Nothing
   Private cb2 As System.Windows.Forms.ComboBox = Nothing
   Private ud1 As System.Windows.Forms.NumericUpDown = Nothing
   Private ud2 As System.Windows.Forms.NumericUpDown = Nothing
   Private btn1 As System.Windows.Forms.Button = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            cb1 = New System.Windows.Forms.ComboBox()
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {"ChartArea", "Header", "Footer", "Legend"})
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Text = "ChartArea"
            cb1.Width = 75
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBoxChartElement_SelectedIndexChanged
            
            cb2 = New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            FillComboBox(cb2, GetType(C1.Win.C1Chart.BorderStyleEnum))
            cb2.Items.Remove(C1.Win.C1Chart.BorderStyleEnum.NotSet)
            cb2.Width = 85
            cb2.Location = New System.Drawing.Point(cb1.Right + 5, 0)
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxBorder_SelectedIndexChanged
            
            btn1 = New System.Windows.Forms.Button()
            btn1.Location = New System.Drawing.Point(cb2.Right + 5, 0)
            btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn1.Width = 45
            btn1.Height = 21
            btn1.Text = "Color"
            AddHandler btn1.Click, AddressOf ButtonColor_Click
            AddHandler btn1.BackColorChanged, AddressOf ButtonColor_BackColorChanged
            
            Dim lbl1 As New System.Windows.Forms.Label()
            lbl1.Location = New System.Drawing.Point(btn1.Right + 5, 0)
            lbl1.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            lbl1.Text = "Thickness"
            lbl1.Width = 55
            
            ud1 = New System.Windows.Forms.NumericUpDown()
            ud1.Location = New System.Drawing.Point(lbl1.Right + 2, 2)
            ud1.Width = 35
            ud1.BackColor = System.Drawing.SystemColors.Control
            ud1.Minimum = 1
            ud1.Maximum = 10
            AddHandler ud1.ValueChanged, AddressOf Thickness_ValueChanged
            
            Dim lbl2 As New System.Windows.Forms.Label()
            lbl2.Location = New System.Drawing.Point(ud1.Right + 5, 0)
            lbl2.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            lbl2.Text = "Rounding"
            lbl2.Width = 55
            
            ud2 = New System.Windows.Forms.NumericUpDown()
            ud2.Location = New System.Drawing.Point(lbl2.Right + 2, 2)
            ud2.Width = 35
            ud2.BackColor = System.Drawing.SystemColors.Control
            ud2.Minimum = 0
            ud2.Maximum = 20
            AddHandler ud2.ValueChanged, AddressOf Rounding_ValueChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, btn1, lbl1, ud1, lbl2, ud2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      
      c1chart1.ChartArea.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      c1chart1.Legend.Visible = True
      c1chart1.Legend.Text = "Legend"
      c1chart1.Legend.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      c1chart1.Header.Visible = True
      c1chart1.Header.Text = "Header"
      c1chart1.Header.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      c1chart1.Footer.Visible = True
      c1chart1.Footer.Text = "Footer"
      c1chart1.Footer.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      ComboBoxChartElement_SelectedIndexChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   '&lt;CodeSnippet&gt;
   ' Border of selected chart element
   Private _border As C1.Win.C1Chart.Border = Nothing
   
   
   Private Sub ComboBoxChartElement_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "ChartArea"
            _border = c1chart1.ChartArea.Style.Border
         Case "Legend"
            _border = c1chart1.Legend.Style.Border
         Case "Header"
            _border = c1chart1.Header.Style.Border
         Case "Footer"
            _border = c1chart1.Footer.Style.Border
      End Select
      If Not (_border Is Nothing) Then
         If _border.Color.IsEmpty Or _border.Color.Equals(System.Drawing.Color.Transparent) Then
            _border.Color = Palette.Fore
         End If
         btn1.BackColor = _border.Color
         ud1.Value = _border.Thickness
         ud2.Value = _border.Rounding.All
         
         cb2.SelectedItem = _border.BorderStyle
      End If
   End Sub 'ComboBoxChartElement_SelectedIndexChanged
   
   
   Private Sub ComboBoxBorder_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If Not (_border Is Nothing) And Not (cb.SelectedItem Is Nothing) Then
         _border.BorderStyle = CType(cb.SelectedItem, C1.Win.C1Chart.BorderStyleEnum)
         _border.Color = btn1.BackColor
      End If
   End Sub 'ComboBoxBorder_SelectedIndexChanged
   
   
   Private Sub ButtonColor_Click(sender As Object, e As System.EventArgs)
      Dim btn As System.Windows.Forms.Button = CType(sender, System.Windows.Forms.Button)
      
      Dim dlg As New System.Windows.Forms.ColorDialog()
      dlg.Color = btn.BackColor
      If dlg.ShowDialog() = System.Windows.Forms.DialogResult.OK Then
         btn.BackColor = dlg.Color
         
         If Not (_border Is Nothing) Then
            _border.Color = btn.BackColor
         End If
      End If
   End Sub 'ButtonColor_Click
    
   Private Sub Thickness_ValueChanged(sender As Object, e As System.EventArgs)
      Dim ud As System.Windows.Forms.NumericUpDown = CType(sender, System.Windows.Forms.NumericUpDown)
      
      If Not (_border Is Nothing) Then
         _border.Thickness = CInt(ud.Value)
      End If
   End Sub 'Thickness_ValueChanged
    
   
   Private Sub Rounding_ValueChanged(sender As Object, e As System.EventArgs)
      Dim ud As System.Windows.Forms.NumericUpDown = CType(sender, System.Windows.Forms.NumericUpDown)
      
      If Not (_border Is Nothing) Then
         _border.Rounding.All = CInt(ud.Value)
      End If
   End Sub 'Rounding_ValueChanged
    
   'RtfGray
   Private Sub ButtonColor_BackColorChanged(sender As Object, e As System.EventArgs)
      Dim btn As System.Windows.Forms.Button = CType(sender, System.Windows.Forms.Button)
      
      ' Set contrast fore color
      If btn.BackColor.GetBrightness() &lt; 0.5 Then
         btn.ForeColor = Color.White
      Else
         btn.ForeColor = Color.Black
      End If
   End Sub 'ButtonColor_BackColorChanged '&lt;/CodeSnippet&gt;
End Class 'Borders</CodeVB>
    <Info>Shows using borders for basic chart elements.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.Fonts" ParentName="02.Appearance" Text="Fonts">
    <CodeCS>//&lt;Info&gt;
//Shows using fonts for basic chart elements.
//&lt;/Info&gt;
public class Fonts: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.ComboBox cb1 = null, cb2 = null, cb3 = null;
	System.Windows.Forms.CheckBox cb4 = null, cb5 = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				cb1 = new System.Windows.Forms.ComboBox();
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] {"Header","Footer","Legend"});
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Text = "Header";
				cb1.Width = 60;
				cb1.SelectedIndexChanged += new EventHandler(ComboBoxChartElement_SelectedIndexChanged);

				cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				System.Drawing.FontFamily[] families = System.Drawing.FontFamily.Families;
				string[] fnames = new string[families.Length];
				for( int i= 0; i&lt; fnames.Length; i++)
					fnames[i] = families[i].Name;
				cb2.Items.AddRange(fnames);
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxFont_SelectedIndexChanged);

				cb3 = new System.Windows.Forms.ComboBox();
				cb3.BackColor = System.Drawing.SystemColors.Control;
				cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb3.Items.AddRange(new object[]{ 8, 10, 12, 16, 20, 24, 32});
				cb3.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				cb3.Width = 40;
				cb3.SelectedIndexChanged += new EventHandler(ComboBoxSize_SelectedIndexChanged);

				cb4 = new System.Windows.Forms.CheckBox();
				cb4.Location = new System.Drawing.Point( cb3.Right + 10, 0);
				cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb4.Width = 45;
				cb4.Text = "Bold";
				cb4.CheckedChanged += new EventHandler(CheckBoxBold_CheckChanged);

				cb5 = new System.Windows.Forms.CheckBox();
				cb5.Location = new System.Drawing.Point( cb4.Right + 10, 0);
				cb5.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb5.Text = "Italic";
				cb5.CheckedChanged += new EventHandler(CheckBoxItalic_CheckChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb3, cb4, cb5};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
		c1chart1.Legend.Visible = true;
		c1chart1.Legend.Text = "Legend";

		c1chart1.Header.Visible = true;
		c1chart1.Header.Text = "Header";

		c1chart1.Footer.Visible = true;
		c1chart1.Footer.Text = "Footer";

		ComboBoxChartElement_SelectedIndexChanged( _controls[0], EventArgs.Empty);
	}
//&lt;CodeSnippet&gt;
	C1.Win.C1Chart.Style _style = null;

	private void ComboBoxChartElement_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Legend":
				_style = c1chart1.Legend.Style;
				break;
			case "Header":
				_style = c1chart1.Header.Style;
				break;
			case "Footer":
				_style = c1chart1.Footer.Style;
				break;
		}
		if( _style!=null)
		{
			if( cb2.Text != _style.Font.Name)
					cb2.Text = _style.Font.Name;
			if( cb3.SelectedItem == null || (int)cb3.SelectedItem != _style.Font.Size)
				cb3.SelectedItem = (int)_style.Font.Size;
			cb4.Checked = (_style.Font.Style &amp; System.Drawing.FontStyle.Bold) &gt; 0;
			cb5.Checked = (_style.Font.Style &amp; System.Drawing.FontStyle.Italic) &gt; 0;
		}
	}

	private void ComboBoxFont_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;

		if( _style!=null &amp;&amp; _style.Font.Name != cb.Text)
		{
			System.Drawing.Font font = _style.Font;
			System.Drawing.Font new_font = new System.Drawing.Font( cb.Text, font.Size, font.Style);
			_style.Font = new_font;
		}
	}

	private void ComboBoxSize_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;

		if( _style!=null)
		{
			System.Drawing.Font font = _style.Font;
			System.Drawing.Font new_font = new System.Drawing.Font( font.Name, (int)cb.SelectedItem, font.Style);
			_style.Font = new_font;
		}
	}

	private void SetFontStyle( System.Drawing.FontStyle fs, bool enable)
	{
		if( _style!=null)
		{
			System.Drawing.Font font = _style.Font;

			System.Drawing.FontStyle fstyle = font.Style;
			if( enable)
				fstyle |= fs;
			else
				fstyle &amp;= ~fs;

			if( fstyle != font.Style)
			{
				System.Drawing.Font new_font = new System.Drawing.Font( font.Name, font.Size, fstyle);
				_style.Font = new_font;
			}
		}
	}

	private void CheckBoxBold_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		SetFontStyle( System.Drawing.FontStyle.Bold, cb.Checked);
	}

	private void CheckBoxItalic_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		SetFontStyle( System.Drawing.FontStyle.Italic, cb.Checked);
	}
//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using fonts for basic chart elements.
'&lt;/Info&gt;
Public Class Fonts
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private cb1 As System.Windows.Forms.ComboBox = Nothing
   Private cb2 As System.Windows.Forms.ComboBox = Nothing
   Private cb3 As System.Windows.Forms.ComboBox = Nothing
   Private cb4 As System.Windows.Forms.CheckBox = Nothing
   Private cb5 As System.Windows.Forms.CheckBox = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            cb1 = New System.Windows.Forms.ComboBox()
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {"Header", "Footer", "Legend"})
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Text = "Header"
            cb1.Width = 60
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBoxChartElement_SelectedIndexChanged
            
            cb2 = New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            Dim families As System.Drawing.FontFamily() = System.Drawing.FontFamily.Families
            Dim fnames(families.Length) As String
            Dim i As Integer
            For i = 0 To fnames.Length - 1
               fnames(i) = families(i).Name
            Next i
            cb2.Items.AddRange(fnames)
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxFont_SelectedIndexChanged
            
            cb3 = New System.Windows.Forms.ComboBox()
            cb3.BackColor = System.Drawing.SystemColors.Control
            cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb3.Items.AddRange(New Object() {8, 10, 12, 16, 20, 24, 32})
            cb3.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            cb3.Width = 40
            AddHandler cb3.SelectedIndexChanged, AddressOf ComboBoxSize_SelectedIndexChanged
            
            cb4 = New System.Windows.Forms.CheckBox()
            cb4.Location = New System.Drawing.Point(cb3.Right + 10, 0)
            cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb4.Width = 45
            cb4.Text = "Bold"
            AddHandler cb4.CheckedChanged, AddressOf CheckBoxBold_CheckChanged
            
            cb5 = New System.Windows.Forms.CheckBox()
            cb5.Location = New System.Drawing.Point(cb4.Right + 10, 0)
            cb5.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb5.Text = "Italic"
            AddHandler cb5.CheckedChanged, AddressOf CheckBoxItalic_CheckChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb3, cb4, cb5}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      c1chart1.Legend.Visible = True
      c1chart1.Legend.Text = "Legend"
      
      c1chart1.Header.Visible = True
      c1chart1.Header.Text = "Header"
      
      c1chart1.Footer.Visible = True
      c1chart1.Footer.Text = "Footer"
      
      ComboBoxChartElement_SelectedIndexChanged(_controls(0), EventArgs.Empty)
   End Sub 'Load
   '&lt;CodeSnippet&gt;
   Private _style As C1.Win.C1Chart.Style = Nothing
   
   
   Private Sub ComboBoxChartElement_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Legend"
            _style = c1chart1.Legend.Style
         Case "Header"
            _style = c1chart1.Header.Style
         Case "Footer"
            _style = c1chart1.Footer.Style
      End Select
      If Not (_style Is Nothing) Then
         If cb2.Text &lt;&gt; _style.Font.Name Then
            cb2.Text = _style.Font.Name
         End If
         If cb3.SelectedItem Is Nothing Or CInt(cb3.SelectedItem) &lt;&gt; _style.Font.Size Then
            cb3.SelectedItem = CInt(_style.Font.Size)
         End If
         cb4.Checked =(_style.Font.Style And System.Drawing.FontStyle.Bold) &gt; 0
         cb5.Checked =(_style.Font.Style And System.Drawing.FontStyle.Italic) &gt; 0
      End If
   End Sub 'ComboBoxChartElement_SelectedIndexChanged
   
   
   Private Sub ComboBoxFont_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If Not (_style Is Nothing) And _style.Font.Name &lt;&gt; cb.Text Then
         Dim font As System.Drawing.Font = _style.Font
         Dim new_font As New System.Drawing.Font(cb.Text, font.Size, font.Style)
         _style.Font = new_font
      End If
   End Sub 'ComboBoxFont_SelectedIndexChanged
   
   
   Private Sub ComboBoxSize_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      If Not (_style Is Nothing) Then
         Dim font As System.Drawing.Font = _style.Font
         Dim new_font As New System.Drawing.Font(font.Name, CInt(cb.SelectedItem), font.Style)
         _style.Font = new_font
      End If
   End Sub 'ComboBoxSize_SelectedIndexChanged
   
   
   Private Sub SetFontStyle(fs As System.Drawing.FontStyle, enable As Boolean)
      If Not (_style Is Nothing) Then
         Dim font As System.Drawing.Font = _style.Font
         
         Dim fstyle As System.Drawing.FontStyle = font.Style
         If enable Then
            fstyle = fstyle Or fs
         Else
            fstyle = fstyle And Not fs
         End If 
         If fstyle &lt;&gt; font.Style Then
            Dim new_font As New System.Drawing.Font(font.Name, font.Size, fstyle)
            _style.Font = new_font
         End If
      End If
   End Sub 'SetFontStyle
   
   
   Private Sub CheckBoxBold_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      SetFontStyle(System.Drawing.FontStyle.Bold, cb.Checked)
   End Sub 'CheckBoxBold_CheckChanged
   
   
   Private Sub CheckBoxItalic_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      SetFontStyle(System.Drawing.FontStyle.Italic, cb.Checked)
   End Sub 'CheckBoxItalic_CheckChanged
End Class 'Fonts '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using fonts for basic chart elements.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\02.Appearance\03.AlphaBlending" ParentName="02.Appearance" Text="AlphaBlending">
    <CodeCS>//&lt;Info&gt;
// Shows Color Alpha-Blending methods of the chart.
//&lt;/Info&gt;
public class AlphaBlending: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	const int initialElevation = 45;
	const int initialRotation = 45;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.ComboBox cbox1 = new System.Windows.Forms.ComboBox();
				cbox1.Location = new System.Drawing.Point( 10, 0);
				cbox1.Width = 70;
				cbox1.Name = "cboxChartType";
				cbox1.Items.AddRange( new object[]{
					C1.Win.C1Chart.Chart2DTypeEnum.XYPlot,
					C1.Win.C1Chart.Chart2DTypeEnum.Pie,
					C1.Win.C1Chart.Chart2DTypeEnum.Bar,
					C1.Win.C1Chart.Chart2DTypeEnum.Area,
					C1.Win.C1Chart.Chart2DTypeEnum.Radar,
					C1.Win.C1Chart.Chart2DTypeEnum.Step});

				cbox1.Text = "XYPlot";
				cbox1.SelectedIndexChanged += new EventHandler(ComboBox_SelectedIndexChanged);

				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point(cbox1.Right + 10, 0);
				cb1.Width = 90;
				cb1.Text = "Alpha Blend";
				cb1.Click += new EventHandler(CheckBox_Clicked);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point(cb1.Right + 10, 0);
				cb2.Width = 100;
				cb2.Text = "FillStyle Alpha";
				cb2.Enabled = false;
				cb2.Click += new EventHandler(CheckBox_Clicked);

				System.Windows.Forms.Label lab1 = new System.Windows.Forms.Label();
				lab1.Location = new System.Drawing.Point(cb2.Right + 10, 0);
				lab1.Width = 55;
				lab1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
				lab1.Text = "Elevation";

				System.Windows.Forms.NumericUpDown nud1 = new System.Windows.Forms.NumericUpDown();
				nud1.Location = new System.Drawing.Point(lab1.Right, 0);
				nud1.Width = 40;
				nud1.Name = "nudElevation";
				nud1.Minimum = -45;
				nud1.Maximum = 45;
				nud1.Increment = 5;
				nud1.Value = initialElevation;
				nud1.ValueChanged += new System.EventHandler(UpDown_ValueChanged);

				System.Windows.Forms.Label lab2 = new System.Windows.Forms.Label();
				lab2.Location = new System.Drawing.Point(nud1.Right + 10, 0);
				lab2.Width = 50;
				lab2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
				lab2.Text = "Rotation";

				System.Windows.Forms.NumericUpDown nud2 = new System.Windows.Forms.NumericUpDown();
				nud2.Location = new System.Drawing.Point(lab2.Right, 0);
				nud2.Width = 40;
				nud2.Name = "nudRotation";
				nud2.Minimum = -45;
				nud2.Maximum = 45;
				nud2.Increment = 5;
				nud2.Value = initialRotation;
				nud2.ValueChanged += new System.EventHandler(UpDown_ValueChanged);

				_controls = new System.Windows.Forms.Control[]{cbox1, cb1, cb2, lab1, nud1, lab2, nud2};
			}
			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);
		SetChartData(c1Chart1);

		// set the intial 3D appearance values.
		c1Chart1.ChartArea.PlotArea.View3D.Depth = 45;
		c1Chart1.ChartArea.PlotArea.View3D.Rotation = initialRotation;
		c1Chart1.ChartArea.PlotArea.View3D.Elevation = initialElevation;

		c1Chart1.ChartGroups.Group0.Radar.Filled = true;
		c1Chart1.ChartArea.AxisY.Min = 5;
		c1Chart1.ChartArea.AxisY.Max = 30;

		System.Drawing.Image img = new Bitmap(System.Reflection.Assembly.GetExecutingAssembly()
			.GetManifestResourceStream("images.texture1.jpg"));

		c1Chart1.BackgroundImage = img;
		c1Chart1.Style.ImageAlignment = C1.Win.C1Chart.AlignImageEnum.Tile;
		
//&lt;CodeSnippet&gt;
		// Alpha Blending of Color can be applied anywhere a color is normally
		// used, in any element of the chart.  Alpha blending is a very effective
		// means of revealing aspects of a chart that might otherwise be hidden.
		// This is especially true of charts with 3D effects.
		//
		// In this sample, the chart background image has been set to
		// demonstrate the transparent qualities of each of the chart elements.
		//

		// Show the various chart elements with alpha blending color, allowing
		// the underlying image to show through.
		Color chartElementBackColor = Color.FromArgb(96, Color.Violet);

		c1Chart1.Header.Style.BackColor = chartElementBackColor;
		c1Chart1.Footer.Style.BackColor = chartElementBackColor;
		c1chart1.Legend.Style.BackColor = chartElementBackColor;
		c1Chart1.ChartArea.Style.BackColor = chartElementBackColor;
		c1Chart1.ChartArea.PlotArea.BackColor = Color.FromArgb(64, Color.Blue);

		// Set some other properties to clarify each element.
		c1Chart1.Header.Text = "Header\r\n-- An Alpha Blending Sample --";
		c1Chart1.Header.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		c1Chart1.Footer.Text = "Footer\r\n-- An Alpha Blending Sample --";
		c1Chart1.Footer.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		c1Chart1.Legend.Visible = true;
		c1Chart1.Legend.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;

		c1Chart1.ChartArea.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;
		c1Chart1.ChartArea.PlotArea.Boxed = true;

//&lt;/CodeSnippet&gt;

	}

	public void SetChartData(C1.Win.C1Chart.C1Chart chart)
	{
		chart.Reset();
		double [][] data = new double[][]
		{
			new double[] {1,2,3,4,5},	// x data
			new double[] {20,22,19,24,25},
			new double[] {16,19,15,22,18},
			new double[] {10,16,17,15,23},
			new double[] {8,12,10,12,15},
		};
		
		System.Drawing.Color[] colors = new System.Drawing.Color[] { Color.Red, Color.Blue, Color.Green, Color.Yellow };
		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = chart.ChartGroups[0].ChartData.SeriesList;
		for(int s = 1; s &lt;= 4; s++)
		{
			C1.Win.C1Chart.ChartDataSeries cds = cdsc.AddNewSeries();
			cds.X.CopyDataIn(data[0]);
			cds.Y.CopyDataIn(data[s]);
			cds.LineStyle.Color = colors[s-1];
		}
	}

	// handler for combo box
	private void ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		if(cb.Name == "cboxChartType")
		{
			C1.Win.C1Chart.Chart2DTypeEnum o = (C1.Win.C1Chart.Chart2DTypeEnum)cb.SelectedItem;
			c1chart1.ChartGroups.Group0.ChartType = o;

			int depth = 45;
			bool fillstyleEnabled = true;
			switch((C1.Win.C1Chart.Chart2DTypeEnum)o)
			{
				case C1.Win.C1Chart.Chart2DTypeEnum.Bar:
					depth = 10;
					break;

				case C1.Win.C1Chart.Chart2DTypeEnum.Step:
				case C1.Win.C1Chart.Chart2DTypeEnum.XYPlot:
					fillstyleEnabled = false;
					break;
			}
			
			c1chart1.ChartArea.PlotArea.View3D.Depth = depth;
			_controls[2].Enabled = fillstyleEnabled;
		}
	}

//&lt;CodeSnippet&gt;

	// For data elements, alpha blending can be specified by using
	// alpha blended colors for the appropriate style color.  For
	// charts with surfaces, this involves the LineStyle.Color.
	//
	// Some charts, usually those with surfaces, provide a simpler
	// mechanism for alpha blending using the FillStyle.Alpha property.
	//
	// Following are the event handlers for the color and 3D effect
	// related controls of this sample.
	//

	// handler for CheckBoxes
	private void CheckBox_Clicked(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = null;
		cdsc = c1chart1.ChartGroups.Group0.ChartData.SeriesList;

		if(cb.Text == "Alpha Blend")
		{
			int alphaValue = (cb.Checked) ? 64 : 255;
			foreach(C1.Win.C1Chart.ChartDataSeries cds in cdsc)
				cds.LineStyle.Color = Color.FromArgb((byte)alphaValue, cds.LineStyle.Color);
		}

		else if(cb.Text == "FillStyle Alpha")
		{
			int alphaValue = (cb.Checked) ? 128 : 255;
			foreach(C1.Win.C1Chart.ChartDataSeries cds in cdsc)
				cds.FillStyle.Alpha = (byte)alphaValue;
		}
	}

	// handler for Elevation and Rotation settings
	private void UpDown_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.NumericUpDown nud = (System.Windows.Forms.NumericUpDown)sender;
		int nudValue = (int)nud.Value;

		if(nud.Name == "nudElevation")
			c1chart1.ChartArea.PlotArea.View3D.Elevation = nudValue;

		else if(nud.Name == "nudRotation")
			c1chart1.ChartArea.PlotArea.View3D.Rotation = nudValue;
	}

//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows Color Alpha-Blending methods of the chart.
'&lt;/Info&gt;
Public Class AlphaBlending
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   Private initialElevation As Integer = 45
   Private initialRotation As Integer = 45
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cbox1 As New System.Windows.Forms.ComboBox()
            cbox1.Location = New System.Drawing.Point(10, 0)
            cbox1.Width = 70
            cbox1.Name = "cboxChartType"
            cbox1.Items.AddRange(New Object() {C1.Win.C1Chart.Chart2DTypeEnum.XYPlot, C1.Win.C1Chart.Chart2DTypeEnum.Pie, C1.Win.C1Chart.Chart2DTypeEnum.Bar, C1.Win.C1Chart.Chart2DTypeEnum.Area, C1.Win.C1Chart.Chart2DTypeEnum.Radar, C1.Win.C1Chart.Chart2DTypeEnum.Step})
            
            cbox1.Text = "XYPlot"
            AddHandler cbox1.SelectedIndexChanged, AddressOf ComboBox_SelectedIndexChanged
            
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(cbox1.Right + 10, 0)
            cb1.Width = 90
            cb1.Text = "Alpha Blend"
            AddHandler cb1.Click, AddressOf CheckBox_Clicked
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Width = 100
            cb2.Text = "FillStyle Alpha"
            cb2.Enabled = False
            AddHandler cb2.Click, AddressOf CheckBox_Clicked
            
            Dim lab1 As New System.Windows.Forms.Label()
            lab1.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            lab1.Width = 55
            lab1.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            lab1.Text = "Elevation"
            
            Dim nud1 As New System.Windows.Forms.NumericUpDown()
            nud1.Location = New System.Drawing.Point(lab1.Right, 0)
            nud1.Width = 40
            nud1.Name = "nudElevation"
            nud1.Minimum = - 45
            nud1.Maximum = 45
            nud1.Increment = 5
            nud1.Value = initialElevation
            AddHandler nud1.ValueChanged, AddressOf UpDown_ValueChanged
            
            Dim lab2 As New System.Windows.Forms.Label()
            lab2.Location = New System.Drawing.Point(nud1.Right + 10, 0)
            lab2.Width = 50
            lab2.TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            lab2.Text = "Rotation"
            
            Dim nud2 As New System.Windows.Forms.NumericUpDown()
            nud2.Location = New System.Drawing.Point(lab2.Right, 0)
            nud2.Width = 40
            nud2.Name = "nudRotation"
            nud2.Minimum = - 45
            nud2.Maximum = 45
            nud2.Increment = 5
            nud2.Value = initialRotation
            AddHandler nud2.ValueChanged, AddressOf UpDown_ValueChanged
            
            _controls = New System.Windows.Forms.Control() {cbox1, cb1, cb2, lab1, nud1, lab2, nud2}
         End If
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      SetChartData(c1Chart1)
      
      ' set the intial 3D appearance values.
      c1Chart1.ChartArea.PlotArea.View3D.Depth = 45
      c1Chart1.ChartArea.PlotArea.View3D.Rotation = initialRotation
      c1Chart1.ChartArea.PlotArea.View3D.Elevation = initialElevation
      
      c1Chart1.ChartGroups.Group0.Radar.Filled = True
      c1Chart1.ChartArea.AxisY.Min = 5
      c1Chart1.ChartArea.AxisY.Max = 30
      
      Dim img = New Bitmap(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("images.texture1.jpg"))
      c1Chart1.BackgroundImage = img
      c1Chart1.Style.ImageAlignment = C1.Win.C1Chart.AlignImageEnum.Tile
      
      '&lt;CodeSnippet&gt;
      ' Alpha Blending of Color can be applied anywhere a color is normally
      ' used, in any element of the chart.  Alpha blending is a very effective
      ' means of revealing aspects of a chart that might otherwise be hidden.
      ' This is especially true of charts with 3D effects.
      '
      ' In this sample, the chart background image has been set to
      ' demonstrate the transparent qualities of each of the chart elements.
      '
      ' Show the various chart elements with alpha blending color, allowing
      ' the underlying image to show through.
      Dim chartElementBackColor As Color = Color.FromArgb(96, Color.Violet)
      
      c1Chart1.Header.Style.BackColor = chartElementBackColor
      c1Chart1.Footer.Style.BackColor = chartElementBackColor
      c1chart1.Legend.Style.BackColor = chartElementBackColor
      c1Chart1.ChartArea.Style.BackColor = chartElementBackColor
      c1Chart1.ChartArea.PlotArea.BackColor = Color.FromArgb(64, Color.Blue)
      
      ' Set some other properties to clarify each element.
      c1Chart1.Header.Text = "Header" + ControlChars.Cr + ControlChars.Lf + "-- An Alpha Blending Sample --"
      c1Chart1.Header.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      c1Chart1.Footer.Text = "Footer" + ControlChars.Cr + ControlChars.Lf + "-- An Alpha Blending Sample --"
      c1Chart1.Footer.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      c1Chart1.Legend.Visible = True
      c1Chart1.Legend.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      
      c1Chart1.ChartArea.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      c1Chart1.ChartArea.PlotArea.Boxed = True
   End Sub 'Load
    
   '&lt;/CodeSnippet&gt;
   
   Public Sub SetChartData(chart As C1.Win.C1Chart.C1Chart)
      chart.Reset()
      Dim data() As Double() = {New Double() {1, 2, 3, 4, 5}, New Double() {20, 22, 19, 24, 25}, New Double() {16, 19, 15, 22, 18}, New Double() {10, 16, 17, 15, 23}, New Double() {8, 12, 10, 12, 15}}
      ' x data
      
      Dim colors() As System.Drawing.Color = {Color.Red, Color.Blue, Color.Green, Color.Yellow}
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = chart.ChartGroups(0).ChartData.SeriesList
      Dim s As Integer
      For s = 1 To 4
         Dim cds As C1.Win.C1Chart.ChartDataSeries = cdsc.AddNewSeries()
         cds.X.CopyDataIn(data(0))
         cds.Y.CopyDataIn(data(s))
         cds.LineStyle.Color = colors((s - 1))
      Next s
   End Sub 'SetChartData
   
   
   ' handler for combo box
   Private Sub ComboBox_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      If cb.Name = "cboxChartType" Then
         Dim o As C1.Win.C1Chart.Chart2DTypeEnum = CType(cb.SelectedItem, C1.Win.C1Chart.Chart2DTypeEnum)
         c1chart1.ChartGroups.Group0.ChartType = o
         
         Dim depth As Integer = 45
         Dim fillstyleEnabled As Boolean = True
         Select Case CType(o, C1.Win.C1Chart.Chart2DTypeEnum)
            Case C1.Win.C1Chart.Chart2DTypeEnum.Bar
               depth = 10
            
            Case C1.Win.C1Chart.Chart2DTypeEnum.Step, C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
               fillstyleEnabled = False
         End Select
         
         c1chart1.ChartArea.PlotArea.View3D.Depth = depth
         _controls(2).Enabled = fillstyleEnabled
      End If
   End Sub 'ComboBox_SelectedIndexChanged
   
   
   '&lt;CodeSnippet&gt;
   ' For data elements, alpha blending can be specified by using
   ' alpha blended colors for the appropriate style color.  For
   ' charts with surfaces, this involves the LineStyle.Color.
   '
   ' Some charts, usually those with surfaces, provide a simpler
   ' mechanism for alpha blending using the FillStyle.Alpha property.
   '
   ' Following are the event handlers for the color and 3D effect
   ' related controls of this sample.
   '
   ' handler for CheckBoxes
   Private Sub CheckBox_Clicked(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = Nothing
      cdsc = c1chart1.ChartGroups.Group0.ChartData.SeriesList
      
      If cb.Text = "Alpha Blend" Then
         Dim alphaValue As Integer = 255
         If cb.Checked Then alphaValue = 64

         Dim cds As C1.Win.C1Chart.ChartDataSeries
         For Each cds In  cdsc
            cds.LineStyle.Color = Color.FromArgb(CByte(alphaValue), cds.LineStyle.Color)
         Next cds
      
      ElseIf cb.Text = "FillStyle Alpha" Then
         Dim alphaValue As Integer = 255
         If cb.Checked Then alphaValue = 128

         Dim cds As C1.Win.C1Chart.ChartDataSeries
         For Each cds In  cdsc
            cds.FillStyle.Alpha = CByte(alphaValue)
         Next cds
      End If
   End Sub 'CheckBox_Clicked
    
   ' handler for Elevation and Rotation settings
   Private Sub UpDown_ValueChanged(sender As Object, e As System.EventArgs)
      Dim nud As System.Windows.Forms.NumericUpDown = CType(sender, System.Windows.Forms.NumericUpDown)
      Dim nudValue As Integer = CInt(nud.Value)
      
      If nud.Name = "nudElevation" Then
         c1chart1.ChartArea.PlotArea.View3D.Elevation = nudValue
      
      ElseIf nud.Name = "nudRotation" Then
         c1chart1.ChartArea.PlotArea.View3D.Rotation = nudValue
      End If
   End Sub 'UpDown_ValueChanged 
End Class 'NewSample '&lt;/CodeSnippet&gt;</CodeVB>
    <Info> Shows Color Alpha-Blending methods of the chart.
</Info>
  </CodeSample>
  <CodeSample Name="03.Interaction" Text="Interaction" />
  <CodeSample Name="01.Actions" ParentName="03.Interaction" Text="Actions" />
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\01.Actions\01.Translate" ParentName="01.Actions" Text="Translate">
    <CodeCS>//&lt;Info&gt;
//Shows scrolling through chart with mouse.
//&lt;/Info&gt;
public class Translate: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Button btn1 = new System.Windows.Forms.Button();
				btn1.Location = new System.Drawing.Point( 10, 0);
				btn1.Width = 60;
				btn1.Height = 20;
				btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn1.Text = "Reset";
				btn1.Click += new EventHandler(ButtonReset_Clicked);

				_controls = new System.Windows.Forms.Control[]{ btn1};
			}                                                    

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 20;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark1;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light1;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark1;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup interaction

		// Disable all action
		foreach( C1.Win.C1Chart.Action action in c1chart1.Interaction.Actions)
			action.MouseButton = System.Windows.Forms.MouseButtons.None;

		// Enable only translation
		c1chart1.Interaction.Actions["Translate"].MouseButton = System.Windows.Forms.MouseButtons.Left;
		c1chart1.Interaction.Actions["Translate"].Modifier = System.Windows.Forms.Keys.None;
		c1chart1.Interaction.Enabled = true;

		//RtfGray
		// Set axes limits
		c1chart1.ChartArea.AxisX.SetMinMax( 5, 15);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);

		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

		// Set header text
		c1chart1.Header.Text = "Drag left mouse button to scroll the plot";
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.Interaction.Enabled = false;
		base.Unload( c1chart1);
	}

//&lt;CodeSnippet&gt;
// Click event handler
private void ButtonReset_Clicked(object sender, EventArgs e)
{
	// Set axes limits
	c1chart1.ChartArea.AxisX.SetMinMax( 5, 15);
	c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows scrolling through chart with mouse.
'&lt;/Info&gt;
Public Class Translate
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim btn1 As New System.Windows.Forms.Button()
            btn1.Location = New System.Drawing.Point(10, 0)
            btn1.Width = 60
            btn1.Height = 20
            btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn1.Text = "Reset"
            AddHandler btn1.Click, AddressOf ButtonReset_Clicked
            
            _controls = New System.Windows.Forms.Control() {btn1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 20
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark1
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light1
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark1
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup interaction
      ' Disable all action
      Dim action As C1.Win.C1Chart.Action
      For Each action In  c1chart1.Interaction.Actions
         action.MouseButton = System.Windows.Forms.MouseButtons.None
      Next action 
      ' Enable only translation
      c1chart1.Interaction.Actions("Translate").MouseButton = System.Windows.Forms.MouseButtons.Left
      c1chart1.Interaction.Actions("Translate").Modifier = System.Windows.Forms.Keys.None
      c1chart1.Interaction.Enabled = True
      
      'RtfGray
      ' Set axes limits
      c1chart1.ChartArea.AxisX.SetMinMax(5, 15)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      ' Set header text
      c1chart1.Header.Text = "Drag left mouse button to scroll the plot"
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      c1chart1.Interaction.Enabled = False
      MyBase.Unload(c1chart1)
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   ' Click event handler
   Private Sub ButtonReset_Clicked(sender As Object, e As EventArgs)
      ' Set axes limits
      c1chart1.ChartArea.AxisX.SetMinMax(5, 15)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
   End Sub 'ButtonReset_Clicked
End Class 'Translate '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows scrolling through chart with mouse.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\01.Actions\02.Scale" ParentName="01.Actions" Text="Scale">
    <CodeCS>//&lt;Info&gt;
//Shows changing chart scale with mouse.
//&lt;/Info&gt;
public class Scale: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Button btn1 = new System.Windows.Forms.Button();
				btn1.Location = new System.Drawing.Point( 10, 0);
				btn1.Width = 60;
				btn1.Height = 20;
				btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn1.Text = "Reset";
				btn1.Click += new EventHandler(ButtonReset_Clicked);

				_controls = new System.Windows.Forms.Control[]{ btn1};
			}                                                    

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 50;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark2;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light2;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark2;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup interaction

		// Disable all action
		foreach( C1.Win.C1Chart.Action action in c1chart1.Interaction.Actions)
			action.MouseButton = System.Windows.Forms.MouseButtons.None;

		// Enable only translation
		c1chart1.Interaction.Actions["Scale"].MouseButton = System.Windows.Forms.MouseButtons.Left;
		c1chart1.Interaction.Actions["Scale"].Modifier = System.Windows.Forms.Keys.None;

		// Use only x-axis
		c1chart1.Interaction.Actions["Scale"].Axis = C1.Win.C1Chart.AxisFlagEnum.AxisX;
		c1chart1.Interaction.Enabled = true;

		//RtfGray
		// Set axes limits
		c1chart1.ChartArea.AxisX.SetMinMax( 15, 35);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);

		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

		// Set header text
		c1chart1.Header.Text = "Drag mouse in vertical direction to scale the plot along x-axis";
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.Interaction.Enabled = false;
		base.Unload( c1chart1);
	}

//&lt;CodeSnippet&gt;

// Click event handler
private void ButtonReset_Clicked(object sender, EventArgs e)
{
	// Set axes limits
	c1chart1.ChartArea.AxisX.SetMinMax( 15, 35);
	c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows changing chart scale with mouse.
'&lt;/Info&gt;
Public Class Scale
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim btn1 As New System.Windows.Forms.Button()
            btn1.Location = New System.Drawing.Point(10, 0)
            btn1.Width = 60
            btn1.Height = 20
            btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn1.Text = "Reset"
            AddHandler btn1.Click, AddressOf ButtonReset_Clicked
            
            _controls = New System.Windows.Forms.Control() {btn1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 50
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark2
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light2
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark2
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup interaction
      ' Disable all action
      Dim action As C1.Win.C1Chart.Action
      For Each action In  c1chart1.Interaction.Actions
         action.MouseButton = System.Windows.Forms.MouseButtons.None
      Next action 
      ' Enable only translation
      c1chart1.Interaction.Actions("Scale").MouseButton = System.Windows.Forms.MouseButtons.Left
      c1chart1.Interaction.Actions("Scale").Modifier = System.Windows.Forms.Keys.None
      
      ' Use only x-axis
      c1chart1.Interaction.Actions("Scale").Axis = C1.Win.C1Chart.AxisFlagEnum.AxisX
      c1chart1.Interaction.Enabled = True
      
      'RtfGray
      ' Set axes limits
      c1chart1.ChartArea.AxisX.SetMinMax(15, 35)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      ' Set header text
      c1chart1.Header.Text = "Drag mouse in vertical direction to scale the plot along x-axis"
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      c1chart1.Interaction.Enabled = False
      MyBase.Unload(c1chart1)
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   ' Click event handler
   Private Sub ButtonReset_Clicked(sender As Object, e As EventArgs)
      ' Set axes limits
      c1chart1.ChartArea.AxisX.SetMinMax(15, 35)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
   End Sub 'ButtonReset_Clicked
End Class 'Scale '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows changing chart scale with mouse.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\01.Actions\03.Zoom" ParentName="01.Actions" Text="Zoom">
    <CodeCS>//&lt;Info&gt;
//Shows zooming using mouse.
//&lt;/Info&gt;
public class Zoom : ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Button btn1 = new System.Windows.Forms.Button();
				btn1.Location = new System.Drawing.Point( 10, 0);
				btn1.Width = 60;
				btn1.Height = 20;
				btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn1.Text = "Reset";
				btn1.Click += new EventHandler(ButtonReset_Clicked);

				_controls = new System.Windows.Forms.Control[]{ btn1};
			}                                                    

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 50;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = 2*(rnd.NextDouble()-0.5);
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark2;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light2;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark2;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup interaction

		// Disable all action
		foreach( C1.Win.C1Chart.Action action in c1chart1.Interaction.Actions)
			action.MouseButton = System.Windows.Forms.MouseButtons.None;

		// Enable only translation
		c1chart1.Interaction.Actions["Zoom"].MouseButton = System.Windows.Forms.MouseButtons.Left;
		c1chart1.Interaction.Actions["Zoom"].Modifier = System.Windows.Forms.Keys.None;
		c1chart1.Interaction.Enabled = true;

		//RtfGray
		// Set axes limits
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);

		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

		// Set header text
		c1chart1.Header.Text = "Use mouse to select plot range";
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.Interaction.Enabled = false;
		base.Unload( c1chart1);
	}

//&lt;CodeSnippet&gt;

// Click event handler
private void ButtonReset_Clicked(object sender, EventArgs e)
{
	// Reset axes limits
	c1chart1.ChartArea.AxisX.AutoMin = true;
	c1chart1.ChartArea.AxisX.AutoMax = true;
	c1chart1.ChartArea.AxisY.AutoMin = true;
	c1chart1.ChartArea.AxisY.AutoMax = true;
}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows zooming using mouse.
'&lt;/Info&gt;
Public Class Zoom
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim btn1 As New System.Windows.Forms.Button()
            btn1.Location = New System.Drawing.Point(10, 0)
            btn1.Width = 60
            btn1.Height = 20
            btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn1.Text = "Reset"
            AddHandler btn1.Click, AddressOf ButtonReset_Clicked
            
            _controls = New System.Windows.Forms.Control() {btn1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 50
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark2
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light2
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark2
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup interaction
      ' Disable all action
      Dim action As C1.Win.C1Chart.Action
      For Each action In  c1chart1.Interaction.Actions
         action.MouseButton = System.Windows.Forms.MouseButtons.None
      Next action 
      ' Enable only translation
      c1chart1.Interaction.Actions("Zoom").MouseButton = System.Windows.Forms.MouseButtons.Left
      c1chart1.Interaction.Actions("Zoom").Modifier = System.Windows.Forms.Keys.None
      c1chart1.Interaction.Enabled = True
      
      'RtfGray
      ' Set axes limits
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      ' Set header text
      c1chart1.Header.Text = "Use mouse to select plot range"
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      c1chart1.Interaction.Enabled = False
      MyBase.Unload(c1chart1)
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   ' Click event handler
   Private Sub ButtonReset_Clicked(sender As Object, e As EventArgs)
      ' Reset axes limits
      c1chart1.ChartArea.AxisX.AutoMin = True
      c1chart1.ChartArea.AxisX.AutoMax = True
      c1chart1.ChartArea.AxisY.AutoMin = True
      c1chart1.ChartArea.AxisY.AutoMax = True
   End Sub 'ButtonReset_Clicked
End Class 'Zoom '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows zooming using mouse.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\01.Actions\04.Rotate3D" ParentName="01.Actions" Text="Rotate3D">
    <CodeCS>//&lt;Info&gt;
//Shows rotation of chart with 3D-effects using mouse.
//&lt;/Info&gt;
public class Rotate3D : ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		int[] y1 = new int[] { 800, 1500, 2000};
		int[] y2 = new int[] { 1000, 1200, 1400};
		
		// Create first series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.FillStyle.Color1 = Palette.Light1;
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( y1);
			
		// Create second series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( y2);

		// Set 3D effect
		c1chart1.ChartArea.PlotArea.View3D.Depth = 15;
		c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
		c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfNormal
		// Setup interaction

		// Disable all action
		foreach( C1.Win.C1Chart.Action action in c1chart1.Interaction.Actions)
			action.MouseButton = System.Windows.Forms.MouseButtons.None;

		// Enable only translation
		c1chart1.Interaction.Actions["Rotate"].MouseButton = System.Windows.Forms.MouseButtons.Left;
		c1chart1.Interaction.Actions["Rotate"].Modifier = System.Windows.Forms.Keys.None;
		c1chart1.Interaction.Enabled = true;

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

		// Set x-axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
                
		// Set header text
		c1chart1.Header.Text = "Drag mouse to change 3D view rotation.";
//&lt;/CodeSnippet&gt;
	}
	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.Interaction.Enabled = false;
		base.Unload( c1chart1);
	}

}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows rotation of chart with 3D-effects using mouse.
'&lt;/Info&gt;
Public Class Rotate3D
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      Dim y1() As Integer = {800, 1500, 2000}
      Dim y2() As Integer = {1000, 1200, 1400}
      
      ' Create first series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.FillStyle.Color1 = Palette.Light1
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(y1)
      
      ' Create second series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(y2)
      
      ' Set 3D effect
      c1chart1.ChartArea.PlotArea.View3D.Depth = 15
      c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
      c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfNormal
      ' Setup interaction
      ' Disable all action
      Dim action As C1.Win.C1Chart.Action
      For Each action In  c1chart1.Interaction.Actions
         action.MouseButton = System.Windows.Forms.MouseButtons.None
      Next action 
      ' Enable only translation
      c1chart1.Interaction.Actions("Rotate").MouseButton = System.Windows.Forms.MouseButtons.Left
      c1chart1.Interaction.Actions("Rotate").Modifier = System.Windows.Forms.Keys.None
      c1chart1.Interaction.Enabled = True
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      ' Set x-axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
      
      ' Set header text
      c1chart1.Header.Text = "Drag mouse to change 3D view rotation."
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      c1chart1.Interaction.Enabled = False
      MyBase.Unload(c1chart1)
   End Sub 'Unload
End Class 'Rotate3D </CodeVB>
    <Info>Shows rotation of chart with 3D-effects using mouse.
</Info>
  </CodeSample>
  <CodeSample Name="02.Scrollbar" ParentName="03.Interaction" Text="Scrollbar" />
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\02.Scrollbar\01.Simple" ParentName="02.Scrollbar" Text="Simple">
    <CodeCS>//&lt;Info&gt;
//Create xy-chart with x-axis scrollbar.
//&lt;/Info&gt;
public class Simple: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 50;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = rnd.NextDouble()*10;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark1;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light1;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark1;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup axes scrollbars
		C1.Win.C1Chart.AxisScrollBar xsb = c1chart1.ChartArea.AxisX.ScrollBar;
		xsb.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.Flat;
		xsb.Buttons = C1.Win.C1Chart.AxisScrollBarButtonFlags.ScrollButtons;
		xsb.Min = ds.MinX;
		xsb.Max = ds.MaxX;
		xsb.Scale = 0.2;
		xsb.Visible = true;

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create xy-chart with x-axis scrollbar.
'&lt;/Info&gt;
Public Class Simple
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 50
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = rnd.NextDouble() * 10
      Next i
      
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark1
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light1
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark1
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup axes scrollbars
      Dim xsb As C1.Win.C1Chart.AxisScrollBar = c1chart1.ChartArea.AxisX.ScrollBar
      xsb.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.Flat
      xsb.Buttons = C1.Win.C1Chart.AxisScrollBarButtonFlags.ScrollButtons
      xsb.Min = ds.MinX
      xsb.Max = ds.MaxX
      xsb.Scale = 0.2
      xsb.Visible = True
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Simple</CodeVB>
    <Info>Create xy-chart with x-axis scrollbar.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\02.Scrollbar\02.WithScale" ParentName="02.Scrollbar" Text="WithScale">
    <CodeCS>//&lt;Info&gt;
//Create xy-chart with x-axis scrollbar with scale button.
//&lt;/Info&gt;
public class WithScale: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 100;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = rnd.NextDouble()*10;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark2;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light2;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark2;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup axes scrollbars
		C1.Win.C1Chart.AxisScrollBar xsb = c1chart1.ChartArea.AxisX.ScrollBar;
		xsb.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.XP;
		xsb.Buttons = C1.Win.C1Chart.AxisScrollBarButtonFlags.ScaleAndScrollButtons;
		xsb.Min = ds.MinX;
		xsb.Max = ds.MaxX;
		xsb.ScaleMenuItems.Clear();
		xsb.ScaleMenuItems.Add( 1, "100 %");
		xsb.ScaleMenuItems.Add( 0.5, "50 %");
		xsb.ScaleMenuItems.Add( 0.1, "10 %");
		xsb.ScaleMenuItems.Add( 0.05, "5 %");
		xsb.Visible = true;

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
//&lt;/CodeSnippet&gt;
	}
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create xy-chart with x-axis scrollbar with scale button.
'&lt;/Info&gt;
Public Class WithScale
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 100
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = rnd.NextDouble() * 10
      Next i
      
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark2
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light2
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark2
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup axes scrollbars
      Dim xsb As C1.Win.C1Chart.AxisScrollBar = c1chart1.ChartArea.AxisX.ScrollBar
      xsb.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.XP
      xsb.Buttons = C1.Win.C1Chart.AxisScrollBarButtonFlags.ScaleAndScrollButtons
      xsb.Min = ds.MinX
      xsb.Max = ds.MaxX
      xsb.ScaleMenuItems.Clear()
      xsb.ScaleMenuItems.Add(1, "100 %")
      xsb.ScaleMenuItems.Add(0.5, "50 %")
      xsb.ScaleMenuItems.Add(0.1, "10 %")
      xsb.ScaleMenuItems.Add(0.05, "5 %")
      xsb.Visible = True
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'WithScale</CodeVB>
    <Info>Create xy-chart with x-axis scrollbar with scale button.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\02.Scrollbar\03.CustomMenu" ParentName="02.Scrollbar" Text="CustomMenu">
    <CodeCS>//&lt;Info&gt;
//Create xy-chart with x-axis scrollbar with custom scale menu.
//&lt;/Info&gt;
public class CustomMenu: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 100;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = rnd.NextDouble()*10;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds.LineStyle.Color = Palette.Dark2;
		ds.LineStyle.Thickness = 2;
		ds.SymbolStyle.Color = Palette.Light2;
		ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds.SymbolStyle.OutlineColor = Palette.Dark2;

		// Copy data into chart
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup axes scrollbars
		C1.Win.C1Chart.AxisScrollBar xsb = c1chart1.ChartArea.AxisX.ScrollBar;
		xsb.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.XP;
		xsb.Buttons = C1.Win.C1Chart.AxisScrollBarButtonFlags.ScaleAndScrollButtons;
		xsb.Min = ds.MinX;
		xsb.Max = ds.MaxX;
		xsb.Scale = 0.2;
		xsb.Visible = true;

		if( contextMenu == null)
		{
			System.Windows.Forms.MenuItem[] menuItems = 
				new System.Windows.Forms.MenuItem[]{ new System.Windows.Forms.MenuItem("Save position", new EventHandler(Menu_OnClick)),
																						 new System.Windows.Forms.MenuItem("Restore position", new EventHandler(Menu_OnClick))};
			contextMenu = new System.Windows.Forms.ContextMenu(menuItems);
		}
		xsb.ScaleMenu = contextMenu;

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
//&lt;/CodeSnippet&gt;
	}

//&lt;CodeSnippet&gt;
	System.Windows.Forms.ContextMenu contextMenu = null;
	double scrollbar_value = 0;
	// Menu click event handler
	private void Menu_OnClick(object sender, System.EventArgs e)
	{
		System.Windows.Forms.MenuItem mi = (System.Windows.Forms.MenuItem)sender;

		if( mi.Text == "Save position")
			scrollbar_value = c1chart1.ChartArea.AxisX.ScrollBar.Value;
		else
			c1chart1.ChartArea.AxisX.ScrollBar.Value = scrollbar_value;
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Create xy-chart with x-axis scrollbar with custom scale menu.
'&lt;/Info&gt;
Public Class CustomMenu
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 100
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = rnd.NextDouble() * 10
      Next i
      
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds.LineStyle.Color = Palette.Dark2
      ds.LineStyle.Thickness = 2
      ds.SymbolStyle.Color = Palette.Light2
      ds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds.SymbolStyle.OutlineColor = Palette.Dark2
      
      ' Copy data into chart
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup axes scrollbars
      Dim xsb As C1.Win.C1Chart.AxisScrollBar = c1chart1.ChartArea.AxisX.ScrollBar
      xsb.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.XP
      xsb.Buttons = C1.Win.C1Chart.AxisScrollBarButtonFlags.ScaleAndScrollButtons
      xsb.Min = ds.MinX
      xsb.Max = ds.MaxX
      xsb.Scale = 0.2
      xsb.Visible = True
      
      If contextMenu Is Nothing Then
         Dim menuItems() As System.Windows.Forms.MenuItem = {New System.Windows.Forms.MenuItem("Save position", New EventHandler(Menu_OnClick)), New System.Windows.Forms.MenuItem("Restore position", New EventHandler(Menu_OnClick))}
         contextMenu = New System.Windows.Forms.ContextMenu(menuItems)
      End If
      xsb.ScaleMenu = contextMenu
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
   
   '&lt;CodeSnippet&gt;
   Private contextMenu As System.Windows.Forms.ContextMenu = Nothing
   Private scrollbar_value As Double = 0
   
   ' Menu click event handler
   Private Sub Menu_OnClick(sender As Object, e As System.EventArgs)
      Dim mi As System.Windows.Forms.MenuItem = CType(sender, System.Windows.Forms.MenuItem)
      
      If mi.Text = "Save position" Then
         scrollbar_value = c1chart1.ChartArea.AxisX.ScrollBar.Value
      Else
         c1chart1.ChartArea.AxisX.ScrollBar.Value = scrollbar_value
      End If
   End Sub 'Menu_OnClick '&lt;/CodeSnippet&gt;
End Class 'CustomMenu</CodeVB>
    <Info>Create xy-chart with x-axis scrollbar with custom scale menu.
</Info>
  </CodeSample>
  <CodeSample Name="03.Data Highlight" ParentName="03.Interaction" Text="Data Highlight" />
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\03.Data Highlight\01.MouseOver" ParentName="03.Data Highlight" Text="MouseOver">
    <CodeCS>//&lt;Info&gt;
//Show highlight with different chart types.
//&lt;/Info&gt;
public class MouseOver: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.ComboBox cb1 = new System.Windows.Forms.ComboBox();
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] {"XYPlot","Bar","Pie"});
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Text = "XYPlot";
				cb1.SelectedIndexChanged += new EventHandler(ComboBoxChartType_SelectedIndexChanged);

				System.Windows.Forms.ComboBox cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb2.Items.AddRange(new object[] {"Points","Series"});
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.Text = "Points";
				cb2.SelectedIndexChanged += new EventHandler(ComboBoxChartElement_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 5;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = rnd.NextDouble()*10;
			y2[i] = rnd.NextDouble()*10;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds1.LineStyle.Color = Palette.Light3;
		ds1.FillStyle.Color1 = Palette.Light3;
		ds1.LineStyle.Thickness = 2;
		ds1.SymbolStyle.Color = Palette.Light3;
		ds1.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		ds1.SymbolStyle.OutlineColor = Palette.Dark3;

		// Copy data into chart
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( y1);

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds2.LineStyle.Color = Palette.Light2;
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.LineStyle.Thickness = 2;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Diamond;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;

		// Copy data into chart
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( y2);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup data highlight
		c1chart1.ChartGroups[0].ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.MouseOver;
		c1chart1.ChartGroups[0].ChartData.HighLight.Appearance = C1.Win.C1Chart.DataAppearanceEnum.Fill |
			C1.Win.C1Chart.DataAppearanceEnum.Line | C1.Win.C1Chart.DataAppearanceEnum.SymbolColor | 
			C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineColor | C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineWidth |
			C1.Win.C1Chart.DataAppearanceEnum.SymbolSize;
		c1chart1.ChartGroups[0].ChartData.HighLight.FillStyle.Color1 = Palette.Light1;
		c1chart1.ChartGroups[0].ChartData.HighLight.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.SolidColor;
		c1chart1.ChartGroups[0].ChartData.HighLight.SymbolStyle.Size = 15;
		c1chart1.ChartGroups[0].ChartData.HighLight.SymbolStyle.Color = Palette.Light1;
		c1chart1.ChartGroups[0].ChartData.HighLight.SymbolStyle.OutlineColor = Palette.Dark1; 
		c1chart1.ChartGroups[0].ChartData.HighLight.SymbolStyle.OutlineWidth = 2;
		c1chart1.ChartGroups[0].ChartData.HighLight.LineStyle.Thickness = 3;
		c1chart1.ChartGroups[0].ChartData.HighLight.LineStyle.Color = Palette.Light1;

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
		// Show legend
		c1chart1.Legend.Visible = true;
//&lt;/CodeSnippet&gt;
		ComboBoxChartType_SelectedIndexChanged( _controls[0], EventArgs.Empty);
		ComboBoxChartElement_SelectedIndexChanged( _controls[1], EventArgs.Empty);
	}

//&lt;CodeSnippet&gt;
	// handler for combo box
	private void ComboBoxChartType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "XYPlot":
				c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;
				break;
			case "Bar":
				c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;
				break;
			case "Pie":
				c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie;
				break;
		}
	}

	// handler for combo box
	private void ComboBoxChartElement_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		
		switch( cb.Text)
		{
			case "Points":
				c1chart1.ChartGroups[0].ChartData.HighLight.PlotElement = C1.Win.C1Chart.PlotElementEnum.Points;
				break;
			case "Series":
				c1chart1.ChartGroups[0].ChartData.HighLight.PlotElement = C1.Win.C1Chart.PlotElementEnum.Series;
				break;
		}
	}
//&lt;/CodeSnippet&gt;

}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Show highlight with different chart types.
'&lt;/Info&gt;
Public Class MouseOver
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.ComboBox()
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {"XYPlot", "Bar", "Pie"})
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Text = "XYPlot"
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBoxChartType_SelectedIndexChanged
            
            Dim cb2 As New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb2.Items.AddRange(New Object() {"Points", "Series"})
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Text = "Points"
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBoxChartElement_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 5
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = rnd.NextDouble() * 10
         y2(i) = rnd.NextDouble() * 10
      Next i
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds1.LineStyle.Color = Palette.Light3
      ds1.FillStyle.Color1 = Palette.Light3
      ds1.LineStyle.Thickness = 2
      ds1.SymbolStyle.Color = Palette.Light3
      ds1.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      ds1.SymbolStyle.OutlineColor = Palette.Dark3
      
      ' Copy data into chart
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(y1)
      
      ' Create data series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds2.LineStyle.Color = Palette.Light2
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.LineStyle.Thickness = 2
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Diamond
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      
      ' Copy data into chart
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup data highlight
      c1chart1.ChartGroups(0).ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.MouseOver
      c1chart1.ChartGroups(0).ChartData.HighLight.Appearance = C1.Win.C1Chart.DataAppearanceEnum.Fill Or C1.Win.C1Chart.DataAppearanceEnum.Line Or C1.Win.C1Chart.DataAppearanceEnum.SymbolColor Or C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineColor Or C1.Win.C1Chart.DataAppearanceEnum.SymbolOutlineWidth Or C1.Win.C1Chart.DataAppearanceEnum.SymbolSize
      c1chart1.ChartGroups(0).ChartData.HighLight.FillStyle.Color1 = Palette.Light1
      c1chart1.ChartGroups(0).ChartData.HighLight.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.SolidColor
      c1chart1.ChartGroups(0).ChartData.HighLight.SymbolStyle.Size = 15
      c1chart1.ChartGroups(0).ChartData.HighLight.SymbolStyle.Color = Palette.Light1
      c1chart1.ChartGroups(0).ChartData.HighLight.SymbolStyle.OutlineColor = Palette.Dark1
      c1chart1.ChartGroups(0).ChartData.HighLight.SymbolStyle.OutlineWidth = 2
      c1chart1.ChartGroups(0).ChartData.HighLight.LineStyle.Thickness = 3
      c1chart1.ChartGroups(0).ChartData.HighLight.LineStyle.Color = Palette.Light1
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      ' Show legend
      c1chart1.Legend.Visible = True
      '&lt;/CodeSnippet&gt;
      ComboBoxChartType_SelectedIndexChanged(_controls(0), EventArgs.Empty)
      ComboBoxChartElement_SelectedIndexChanged(_controls(1), EventArgs.Empty)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   ' handler for combo box
   Private Sub ComboBoxChartType_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "XYPlot"
            c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
         Case "Bar"
            c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
         Case "Pie"
            c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Pie
      End Select
   End Sub 'ComboBoxChartType_SelectedIndexChanged
   
   
   ' handler for combo box
   Private Sub ComboBoxChartElement_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      
      Select Case cb.Text
         Case "Points"
            c1chart1.ChartGroups(0).ChartData.HighLight.PlotElement = C1.Win.C1Chart.PlotElementEnum.Points
         Case "Series"
            c1chart1.ChartGroups(0).ChartData.HighLight.PlotElement = C1.Win.C1Chart.PlotElementEnum.Series
      End Select
   End Sub 'ComboBoxChartElement_SelectedIndexChanged
End Class 'MouseOver
'&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Show highlight with different chart types.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\03.Data Highlight\02.ActiveSeries" ParentName="03.Data Highlight" Text="ActiveSeries">
    <CodeCS>//&lt;Info&gt;
//Show data highlighting of xy-plot and using HighlightChanged event.
//&lt;/Info&gt;
public class ActiveSeries: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 50;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = rnd.NextDouble()*15;
			y2[i] = rnd.NextDouble()*5;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds1.LineStyle.Color = Palette.Dark2;
		ds1.LineStyle.Thickness = 1;
		ds1.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None;

		// Copy data into chart
		ds1.AutoEnumerate = true;
		ds1.Y.CopyDataIn( y1);

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		// Set data visual appearence
		ds2.LineStyle.Color = Palette.Dark3;
		ds2.LineStyle.Thickness = 1;
		ds2.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None;

		// Copy data into chart
		ds2.AutoEnumerate = true;
		ds2.Y.CopyDataIn( y2);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		//RtfNormal
		// Setup data highlight
		c1chart1.ChartGroups[0].ChartData.HighLight.PlotElement = C1.Win.C1Chart.PlotElementEnum.Series;
		c1chart1.ChartGroups[0].ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.Click;
		c1chart1.ChartGroups[0].ChartData.HighLight.LineStyle.Color = Palette.Dark1;
		c1chart1.ChartGroups[0].ChartData.HighLight.LineStyle.Thickness = 2;

		// Add handler
		c1chart1.HighlightChanged += new C1.Win.C1Chart.HighlightChangedEventHandler( Chart_HighlightChanged);

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
		// Show legend
		c1chart1.Legend.Visible = true;
		c1chart1.Footer.Text = "No active series";
		c1chart1.Header.Visible = true;
		c1chart1.Header.Text = "Click on the chart to select series";
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.HighlightChanged -= new C1.Win.C1Chart.HighlightChangedEventHandler( Chart_HighlightChanged);
	}

//&lt;CodeSnippet&gt;
	private void Chart_HighlightChanged( object sender, C1.Win.C1Chart.HighlightChangedEventArgs e)
	{
		C1.Win.C1Chart.ChartDataSeries ds = e.Series;
		if( ds!=null)
		{
			c1chart1.Footer.Text = string.Format( "{0} ({1:0.##} - {2:0.##})", ds.Label, ds.MinY, ds.MaxY);
		}
		else
		{
			c1chart1.Footer.Text = "No active series";
		}
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Show data highlighting of xy-plot and using HighlightChanged event.
'&lt;/Info&gt;
Public Class ActiveSeries
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 50
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = rnd.NextDouble() * 15
         y2(i) = rnd.NextDouble() * 5
      Next i
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds1.LineStyle.Color = Palette.Dark2
      ds1.LineStyle.Thickness = 1
      ds1.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None
      
      ' Copy data into chart
      ds1.AutoEnumerate = True
      ds1.Y.CopyDataIn(y1)
      
      ' Create data series
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      ' Set data visual appearence
      ds2.LineStyle.Color = Palette.Dark3
      ds2.LineStyle.Thickness = 1
      ds2.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None
      
      ' Copy data into chart
      ds2.AutoEnumerate = True
      ds2.Y.CopyDataIn(y2)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      'RtfNormal
      ' Setup data highlight
      c1chart1.ChartGroups(0).ChartData.HighLight.PlotElement = C1.Win.C1Chart.PlotElementEnum.Series
      c1chart1.ChartGroups(0).ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.Click
      c1chart1.ChartGroups(0).ChartData.HighLight.LineStyle.Color = Palette.Dark1
      c1chart1.ChartGroups(0).ChartData.HighLight.LineStyle.Thickness = 2
      
      ' Add handler
      AddHandler c1chart1.HighlightChanged, AddressOf Chart_HighlightChanged
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      ' Show legend
      c1chart1.Legend.Visible = True
      c1chart1.Footer.Text = "No active series"
      c1chart1.Header.Visible = True
      c1chart1.Header.Text = "Click on the chart to select series"
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.HighlightChanged, AddressOf Chart_HighlightChanged
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   Private Sub Chart_HighlightChanged(sender As Object, e As C1.Win.C1Chart.HighlightChangedEventArgs)
      Dim ds As C1.Win.C1Chart.ChartDataSeries = e.Series
      If Not (ds Is Nothing) Then
         c1chart1.Footer.Text = String.Format("{0} ({1:0.##} - {2:0.##})", ds.Label, ds.MinY, ds.MaxY)
      Else
         c1chart1.Footer.Text = "No active series"
      End If
   End Sub 'Chart_HighlightChanged
End Class 'ActiveSeries '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Show data highlighting of xy-plot and using HighlightChanged event.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\03.Data Highlight\03.CustomHighlight" ParentName="03.Data Highlight" Text="CustomHighlight">
    <CodeCS>//&lt;Info&gt;
//Show custom highlighting.
//&lt;/Info&gt;
public class CustomHighlight : ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 3;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		double[] y3 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = 2 + rnd.NextDouble()*10;
			y2[i] = 2 + rnd.NextDouble()*5;
			y3[i] = 2 + rnd.NextDouble()*8;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		C1.Win.C1Chart.ChartDataSeries ds3 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
		{
			ds.AutoEnumerate = true;
			ds.FillStyle.Alpha = 160;
		}

		// Set data visual appearence
		ds1.FillStyle.Color1 = Palette.Light1;
		ds1.FillStyle.Color2 = Palette.Dark1;
		
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.FillStyle.Color2 = Palette.Dark2;

		ds3.FillStyle.Color1 = Palette.Light3;
		ds3.FillStyle.Color2 = Palette.Dark3;

		// Copy data into chart
		ds1.Y.CopyDataIn( y1);
		ds2.Y.CopyDataIn( y2);
		ds3.Y.CopyDataIn( y3);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfNormal
		// Setup data highlight
		c1chart1.ChartGroups[0].ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.MouseOver;
		c1chart1.ChartGroups[0].ChartData.HighLight.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Gradient;
		c1chart1.ChartGroups[0].ChartData.HighLight.FillStyle.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.Radial;
		c1chart1.ChartGroups[0].ChartData.HighLight.FillStyle.Alpha = 255;

		c1chart1.ChartGroups[0].ChartData.HighLight.Appearance = C1.Win.C1Chart.DataAppearanceEnum.FillGradientStyle
			| C1.Win.C1Chart.DataAppearanceEnum.FillType | C1.Win.C1Chart.DataAppearanceEnum.FillAlpha;
		c1chart1.HighlightChanged += new C1.Win.C1Chart.HighlightChangedEventHandler( Chart_HighlightChanged);

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
		// Show legend
		c1chart1.Legend.Visible = true;
		// Set axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.HighlightChanged -= new C1.Win.C1Chart.HighlightChangedEventHandler( Chart_HighlightChanged);
		c1chart1.ChartGroups[0].ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.Disabled;
	}

//&lt;CodeSnippet&gt;
	void Chart_HighlightChanged( object sender, C1.Win.C1Chart.HighlightChangedEventArgs e)
	{
		byte alpha = 255;
		if( e.Series!=null)
		{
			alpha = 128;
			c1chart1.Cursor = System.Windows.Forms.Cursors.Hand;
		}
		else
			c1chart1.Cursor = System.Windows.Forms.Cursors.Default;

		foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
		{
			if( ds == e.Series)
				ds.FillStyle.Alpha = 255;
			else
				ds.FillStyle.Alpha = alpha;
		}
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Show custom highlighting.
'&lt;/Info&gt;
Public Class CustomHighlight
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 3
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim y3(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = 2 + rnd.NextDouble() * 10
         y2(i) = 2 + rnd.NextDouble() * 5
         y3(i) = 2 + rnd.NextDouble() * 8
      Next i
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      Dim ds3 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
         ds.AutoEnumerate = True
         ds.FillStyle.Alpha = 160
      Next ds
      
      ' Set data visual appearence
      ds1.FillStyle.Color1 = Palette.Light1
      ds1.FillStyle.Color2 = Palette.Dark1
      
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.FillStyle.Color2 = Palette.Dark2
      
      ds3.FillStyle.Color1 = Palette.Light3
      ds3.FillStyle.Color2 = Palette.Dark3
      
      ' Copy data into chart
      ds1.Y.CopyDataIn(y1)
      ds2.Y.CopyDataIn(y2)
      ds3.Y.CopyDataIn(y3)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfNormal
      ' Setup data highlight
      c1chart1.ChartGroups(0).ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.MouseOver
      c1chart1.ChartGroups(0).ChartData.HighLight.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Gradient
      c1chart1.ChartGroups(0).ChartData.HighLight.FillStyle.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.Radial
      c1chart1.ChartGroups(0).ChartData.HighLight.FillStyle.Alpha = 255
      
      c1chart1.ChartGroups(0).ChartData.HighLight.Appearance = C1.Win.C1Chart.DataAppearanceEnum.FillGradientStyle Or C1.Win.C1Chart.DataAppearanceEnum.FillType Or C1.Win.C1Chart.DataAppearanceEnum.FillAlpha
      AddHandler c1chart1.HighlightChanged, AddressOf Chart_HighlightChanged
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      ' Show legend
      c1chart1.Legend.Visible = True
      ' Set axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.HighlightChanged, AddressOf Chart_HighlightChanged
      c1chart1.ChartGroups(0).ChartData.HighLight.Activation = C1.Win.C1Chart.HighlightActivationEnum.Disabled
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   Sub Chart_HighlightChanged(sender As Object, e As C1.Win.C1Chart.HighlightChangedEventArgs)
      Dim alpha As Byte = 255
      If Not (e.Series Is Nothing) Then
         alpha = 128
         c1chart1.Cursor = System.Windows.Forms.Cursors.Hand
      Else
         c1chart1.Cursor = System.Windows.Forms.Cursors.Default
      End If 
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
         If ds = e.Series Then
            ds.FillStyle.Alpha = 255
         Else
            ds.FillStyle.Alpha = alpha
         End If
      Next ds
   End Sub 'Chart_HighlightChanged '&lt;/CodeSnippet&gt;
End Class 'CustomHighlight</CodeVB>
    <Info>Show custom highlighting.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\01.Tooltips" ParentName="03.Interaction" Text="Tooltips">
    <CodeCS>//&lt;Info&gt;
//Show using built-in tooltips for plotted data.
//&lt;/Info&gt;
public class Tooltips : ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data
		int n = 4;
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		double[] y3 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			y1[i] = 2 + rnd.NextDouble()*10;
			y2[i] = 2 + rnd.NextDouble()*5;
			y3[i] = 2 + rnd.NextDouble()*8;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		C1.Win.C1Chart.ChartDataSeries ds3 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();

		foreach( C1.Win.C1Chart.ChartDataSeries ds in c1chart1.ChartGroups[0].ChartData.SeriesList)
		{
			ds.AutoEnumerate = true;
			ds.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Gradient;
			ds.FillStyle.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.VerticalCenter;
	
			//RtfNormal
			// Set tooltip text for data series
			ds.TooltipText = "{#TEXT}\ny={#YVAL:0.00}";
			//RtfGray
		}

		// Set data visual appearence
		ds1.FillStyle.Color2 = Palette.Light1;
		ds1.FillStyle.Color1 = Palette.Dark1;
		
		ds2.FillStyle.Color2 = Palette.Light2;
		ds2.FillStyle.Color1 = Palette.Dark2;

		ds3.FillStyle.Color2 = Palette.Light3;
		ds3.FillStyle.Color1 = Palette.Dark3;

		// Copy data into chart
		ds1.Y.CopyDataIn( y1);
		ds2.Y.CopyDataIn( y2);
		ds3.Y.CopyDataIn( y3);

		// Set chart type			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;

		//RtfNormal
		// Enable tooltips
		c1chart1.ToolTip.Enabled = true;

		//RtfGray
		// Show frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;
		// Show legend
		c1chart1.Legend.Visible = true;
		// Set axis minimum
		c1chart1.ChartArea.AxisY.Min = 0;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Show using built-in tooltips for plotted data.
'&lt;/Info&gt;
Public Class Tooltips
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 4
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim y3(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         y1(i) = 2 + rnd.NextDouble() * 10
         y2(i) = 2 + rnd.NextDouble() * 5
         y3(i) = 2 + rnd.NextDouble() * 8
      Next i
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      Dim ds3 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries
      For Each ds In  c1chart1.ChartGroups(0).ChartData.SeriesList
         ds.AutoEnumerate = True
         ds.FillStyle.FillType = C1.Win.C1Chart.FillTypeEnum.Gradient
         ds.FillStyle.GradientStyle = C1.Win.C1Chart.GradientStyleEnum.VerticalCenter
         
         'RtfNormal
         ' Set tooltip text for data series
         ds.TooltipText = "{#TEXT}" + ControlChars.Lf + "y={#YVAL:0.00}"
      Next ds 'RtfGray
      
      ' Set data visual appearence
      ds1.FillStyle.Color2 = Palette.Light1
      ds1.FillStyle.Color1 = Palette.Dark1
      
      ds2.FillStyle.Color2 = Palette.Light2
      ds2.FillStyle.Color1 = Palette.Dark2
      
      ds3.FillStyle.Color2 = Palette.Light3
      ds3.FillStyle.Color1 = Palette.Dark3
      
      ' Copy data into chart
      ds1.Y.CopyDataIn(y1)
      ds2.Y.CopyDataIn(y2)
      ds3.Y.CopyDataIn(y3)
      
      ' Set chart type			
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      
      'RtfNormal
      ' Enable tooltips
      c1chart1.ToolTip.Enabled = True
      
      'RtfGray
      ' Show frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      ' Show legend
      c1chart1.Legend.Visible = True
      ' Set axis minimum
      c1chart1.ChartArea.AxisY.Min = 0
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Tooltips</CodeVB>
    <Info>Show using built-in tooltips for plotted data.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\03.Interaction\02.Dialog" ParentName="03.Interaction" Text="Dialog">
    <CodeCS>//&lt;Info&gt;
//Displays properties and wizard dialogs at runtime.
//&lt;/Info&gt;
public class Dialog: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Button btn1 = new System.Windows.Forms.Button();
				btn1.Location = new System.Drawing.Point( 10, 0);
				btn1.Width = 80;
				btn1.Height = 21;
				btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn1.Text = "Properties";
				btn1.Click += new EventHandler(ButtonProperties_Click);

				System.Windows.Forms.Button btn2 = new System.Windows.Forms.Button();
				btn2.Location = new System.Drawing.Point( btn1.Right + 20, 0);
				btn2.Width = 80;
				btn2.Height = 21;
				btn2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btn2.Text = "Wizard";
				btn2.Click += new EventHandler(ButtonWizard_Click);

				_controls = new System.Windows.Forms.Control[]{ btn1, btn2};
			}

			return _controls;
		}
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
	}

//&lt;CodeSnippet&gt;
// Click event handler
private void ButtonProperties_Click(object sender, System.EventArgs e)
{
	c1chart1.ShowProperties();
}

// Click event handler
private void ButtonWizard_Click(object sender, System.EventArgs e)
{
	c1chart1.ShowWizard();
}
//&lt;/CodeSnippet&gt;
}</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Displays properties and wizard dialogs at runtime.
'&lt;/Info&gt;
Public Class Dialog
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim btn1 As New System.Windows.Forms.Button()
            btn1.Location = New System.Drawing.Point(10, 0)
            btn1.Width = 80
            btn1.Height = 21
            btn1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn1.Text = "Properties"
            AddHandler btn1.Click, AddressOf ButtonProperties_Click
            
            Dim btn2 As New System.Windows.Forms.Button()
            btn2.Location = New System.Drawing.Point(btn1.Right + 20, 0)
            btn2.Width = 80
            btn2.Height = 21
            btn2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            btn2.Text = "Wizard"
            AddHandler btn2.Click, AddressOf ButtonWizard_Click
            
            _controls = New System.Windows.Forms.Control() {btn1, btn2}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
   End Sub 'Load
   
   
   '&lt;CodeSnippet&gt;
   ' Click event handler
   Private Sub ButtonProperties_Click(sender As Object, e As System.EventArgs)
      c1chart1.ShowProperties()
   End Sub 'ButtonProperties_Click
   
   
   ' Click event handler
   Private Sub ButtonWizard_Click(sender As Object, e As System.EventArgs)
      c1chart1.ShowWizard()
   End Sub 'ButtonWizard_Click
End Class 'Dialog '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Displays properties and wizard dialogs at runtime.
</Info>
  </CodeSample>
  <CodeSample Name="04.Advanced" Text="Advanced" />
  <CodeSample Name="05.AlarmZones" ParentName="04.Advanced" Text="AlarmZones" />
  <CodeSample Name="..\01.Advanced\02.AlarmZones\06.BasicShapes" ParentName="05.AlarmZones" Text="BasicShapes">
    <CodeCS>//&lt;Info&gt;
// Shows basic AlarmZone shapes added to an existing chart.
//&lt;/Info&gt;
public class BasicShapes: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.Width = 70;
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "Inverted";
				cb2.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.CheckBox cb4 = new System.Windows.Forms.CheckBox();
				cb4.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				cb4.Width = 85;
				cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb4.Text = "Alpha Blend";
				cb4.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.ComboBox cb3 = new System.Windows.Forms.ComboBox();
				cb3.BackColor = System.Drawing.SystemColors.Control;
				cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb3.Items.AddRange(new object[] {"XYPlot","Bar","Step","Area"});
				cb3.Location = new System.Drawing.Point( cb4.Right + 10, 0);
				cb3.Width = 60;
				cb3.Text = "XYPlot";
				cb3.SelectedIndexChanged += new EventHandler(ComboBox_SelectedIndexChanged);

				System.Windows.Forms.Label lab = new System.Windows.Forms.Label();
				lab.Location = new System.Drawing.Point(cb3.Right + 15, 0);
				lab.Width = 40;
				lab.Text = "Depth";
				lab.TextAlign = System.Drawing.ContentAlignment.MiddleRight;

				System.Windows.Forms.NumericUpDown nud = new System.Windows.Forms.NumericUpDown();
				nud.Location = new System.Drawing.Point(lab.Right + 2, 0);
				nud.Width = 40;
				nud.Minimum = 0;
				nud.Maximum = 25;
				nud.Value = 5;
				nud.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb4, cb3, lab, nud};
			}

			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);

		// setup the chart data
		SetChartData(c1chart1);

//&lt;CodeSnippet&gt;
		// Create AlarmZones.  AlarmZones are backdrop areas in the
		// PlotArea typically defined by data coordinate values used
		// to flag areas of interest with in the data space.

		// Get the Chart AlarmZoneCollect Collection.
		C1.Win.C1Chart.AlarmZonesCollection azs = c1Chart1.ChartArea.PlotArea.AlarmZones;

		// Add a rectanglular AlarmZone.  The boundaries are defined
		// by data coordinate values, so the zone expands and contracts
		// as the chart plotarea is resized or rescaled.
		C1.Win.C1Chart.AlarmZone az = azs.AddNewZone();
		az.Name = "Rectangle-Data";
		az.BackColor = Color.FromArgb(100,Color.Red);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle;
		az.UpperExtent = 16;
		az.LowerExtent = 12;
		az.FarExtent = 2.5;
		az.NearExtent = 1.5;
		az.Visible = true;

		// Add an elliptical AlarmZone.  The boundaries are defined
		// by a circumscribing rectangle expressed in data coordinate
		// values, so the zone expands and contracts as the chart
		// plotarea is resized or rescaled.
		az = azs.AddNewZone();
		az.BackColor = Color.FromArgb(100,Color.Blue);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Ellipse;
		az.Name = "Ellipse";
		az.UpperExtent = 18;
		az.LowerExtent = 10;
		az.FarExtent = 4.5;
		az.NearExtent = 3;
		az.Visible = true;

		// Add a fixed size rectanglular AlarmZone.  The position of
		// the AlarmZone is specified by the extents.  The MinHeight
		// and MinWidth values specify the minimum Height and Width
		// of the AlarmZone in pixels.  This zone remains fixed in
		// size regardless of data coordinate sizing and scaling.
		az = azs.AddNewZone();
		az.BackColor = Color.FromArgb(100,Color.Yellow);
		az.PatternStyle = System.Drawing.Drawing2D.HatchStyle.DiagonalBrick;
		az.PatternVisible = true;
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle;
		az.Name = "Rectangle-Fixed";
		az.UpperExtent = 20;
		az.LowerExtent = 20;
		az.FarExtent = 3;
		az.NearExtent = 3;
		az.MinHeight = 32;
		az.MinWidth = 32;
		az.Visible = true;			
//&lt;/CodeSnippet&gt;
	}

	public void SetChartData(C1.Win.C1Chart.C1Chart chart)
	{
		chart.Reset();
		double [][] data = new double[][]
		{
			new double[] {1,2,3,4,5},	// x data
			new double[] {20,22,19,24,25},
			new double[] {16,19,15,22,18},
			new double[] {10,16,17,15,23},
			new double[] {8,12,10,12,15},
		};

		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = chart.ChartGroups[0].ChartData.SeriesList;
		C1.Win.C1Chart.ChartDataSeries cds = null;
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[1]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[2]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[3]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[4]);

		chart.ChartArea.AxisX.GridMajor.Color = Color.DarkGray;
		chart.ChartArea.AxisX.GridMajor.Visible = true;
		chart.ChartArea.AxisY.GridMajor.Color = Color.DarkGray;
		chart.ChartArea.AxisY.GridMajor.Visible = true;
	}

	//---------------------------------------------------------------------
	// handler for check boxes
	private void CheckBox_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if(cb.Text == "3D")
		{
			if( cb.Checked)
			{
				System.Windows.Forms.NumericUpDown nud =
					(System.Windows.Forms.NumericUpDown)_controls[_controls.Length-1];
				
				c1chart1.ChartGroups[0].Use3D = true;
				c1chart1.ChartArea.PlotArea.View3D.Depth = (int)nud.Value;
				c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
				c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
				c1chart1.ChartArea.PlotArea.Boxed = true;
			}
			else
			{
				c1chart1.ChartGroups[0].Use3D = false;
				c1chart1.ChartArea.PlotArea.Boxed = false;
			}
		}
		else if(cb.Text == "Inverted")
		{
			c1chart1.ChartArea.Inverted = cb.Checked;
		}
		else if(cb.Text == "Alpha Blend")
		{
			int alpha = cb.Checked ? 64 : 255;
			foreach(C1.Win.C1Chart.ChartDataSeries cds in c1chart1.ChartGroups.Group0.ChartData.SeriesList)
				cds.LineStyle.Color = Color.FromArgb(alpha, cds.LineStyle.Color);
		}
	}

	// handler for combo box
	private void ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		C1.Win.C1Chart.Chart2DTypeEnum ct = (C1.Win.C1Chart.Chart2DTypeEnum)
			Enum.Parse(typeof(C1.Win.C1Chart.Chart2DTypeEnum),cb.Text);
		c1chart1.ChartGroups.Group0.ChartType = ct;
	}

	// handler for numeric update down value changed.
	private void NumericUpDown_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.NumericUpDown nud = (System.Windows.Forms.NumericUpDown)sender;
		c1chart1.ChartArea.PlotArea.View3D.Depth = (int)nud.Value;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows basic AlarmZone shapes added to an existing chart.
'&lt;/Info&gt;
Public Class BasicShapes
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Width = 70
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "Inverted"
            AddHandler cb2.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb4 As New System.Windows.Forms.CheckBox()
            cb4.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            cb4.Width = 85
            cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb4.Text = "Alpha Blend"
            AddHandler cb4.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb3 As New System.Windows.Forms.ComboBox()
            cb3.BackColor = System.Drawing.SystemColors.Control
            cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb3.Items.AddRange(New Object() {"XYPlot", "Bar", "Step", "Area"})
            cb3.Location = New System.Drawing.Point(cb4.Right + 10, 0)
            cb3.Width = 60
            cb3.Text = "XYPlot"
            AddHandler cb3.SelectedIndexChanged, AddressOf ComboBox_SelectedIndexChanged
            
            Dim lab As New System.Windows.Forms.Label()
            lab.Location = New System.Drawing.Point(cb3.Right + 15, 0)
            lab.Width = 40
            lab.Text = "Depth"
            lab.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            
            Dim nud As New System.Windows.Forms.NumericUpDown()
            nud.Location = New System.Drawing.Point(lab.Right + 2, 0)
            nud.Width = 40
            nud.Minimum = 0
            nud.Maximum = 25
            nud.Value = 5
            AddHandler nud.ValueChanged, AddressOf NumericUpDown_ValueChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb4, cb3, lab, nud}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      
      ' setup the chart data
      SetChartData(c1chart1)
      
      '&lt;CodeSnippet&gt;
      ' Create AlarmZones.  AlarmZones are backdrop areas in the
      ' PlotArea typically defined by data coordinate values used
      ' to flag areas of interest with in the data space.
      ' Get the Chart AlarmZoneCollect Collection.
      Dim azs As C1.Win.C1Chart.AlarmZonesCollection = c1Chart1.ChartArea.PlotArea.AlarmZones
      
      ' Add a rectanglular AlarmZone.  The boundaries are defined
      ' by data coordinate values, so the zone expands and contracts
      ' as the chart plotarea is resized or rescaled.
      Dim az As C1.Win.C1Chart.AlarmZone = azs.AddNewZone()
      az.Name = "Rectangle-Data"
      az.BackColor = Color.FromArgb(100, Color.Red)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle
      az.UpperExtent = 16
      az.LowerExtent = 12
      az.FarExtent = 2.5
      az.NearExtent = 1.5
      az.Visible = True
      
      ' Add an elliptical AlarmZone.  The boundaries are defined
      ' by a circumscribing rectangle expressed in data coordinate
      ' values, so the zone expands and contracts as the chart
      ' plotarea is resized or rescaled.
      az = azs.AddNewZone()
      az.BackColor = Color.FromArgb(100, Color.Blue)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Ellipse
      az.Name = "Ellipse"
      az.UpperExtent = 18
      az.LowerExtent = 10
      az.FarExtent = 4.5
      az.NearExtent = 3
      az.Visible = True
      
      ' Add a fixed size rectanglular AlarmZone.  The position of
      ' the AlarmZone is specified by the extents.  The MinHeight
      ' and MinWidth values specify the minimum Height and Width
      ' of the AlarmZone in pixels.  This zone remains fixed in
      ' size regardless of data coordinate sizing and scaling.
      az = azs.AddNewZone()
      az.BackColor = Color.FromArgb(100, Color.Yellow)
      az.PatternStyle = System.Drawing.Drawing2D.HatchStyle.DiagonalBrick
      az.PatternVisible = True
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle
      az.Name = "Rectangle-Fixed"
      az.UpperExtent = 20
      az.LowerExtent = 20
      az.FarExtent = 3
      az.NearExtent = 3
      az.MinHeight = 32
      az.MinWidth = 32
      az.Visible = True
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Sub SetChartData(chart As C1.Win.C1Chart.C1Chart)
      chart.Reset()
      Dim data() As Double() = {New Double() {1, 2, 3, 4, 5}, New Double() {20, 22, 19, 24, 25}, New Double() {16, 19, 15, 22, 18}, New Double() {10, 16, 17, 15, 23}, New Double() {8, 12, 10, 12, 15}}
      ' x data
      
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = chart.ChartGroups(0).ChartData.SeriesList
      Dim cds As C1.Win.C1Chart.ChartDataSeries = Nothing
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(1))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(2))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(3))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(4))
      
      chart.ChartArea.AxisX.GridMajor.Color = Color.DarkGray
      chart.ChartArea.AxisX.GridMajor.Visible = True
      chart.ChartArea.AxisY.GridMajor.Color = Color.DarkGray
      chart.ChartArea.AxisY.GridMajor.Visible = True
   End Sub 'SetChartData
   
   
   '---------------------------------------------------------------------
   ' handler for check boxes
   Private Sub CheckBox_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Text = "3D" Then
         If cb.Checked Then
            Dim nud As System.Windows.Forms.NumericUpDown = CType(_controls((_controls.Length - 1)), System.Windows.Forms.NumericUpDown)
            
            c1chart1.ChartGroups(0).Use3D = True
            c1chart1.ChartArea.PlotArea.View3D.Depth = CInt(nud.Value)
            c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
            c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
            c1chart1.ChartArea.PlotArea.Boxed = True
         Else
            c1chart1.ChartGroups(0).Use3D = False
            c1chart1.ChartArea.PlotArea.Boxed = False
         End If
      ElseIf cb.Text = "Inverted" Then
         c1chart1.ChartArea.Inverted = cb.Checked
      ElseIf cb.Text = "Alpha Blend" Then
         Dim alpha As Integer = 255
         If cb.Checked Then alpha = 64
         
         Dim cds As C1.Win.C1Chart.ChartDataSeries
         For Each cds In  c1chart1.ChartGroups.Group0.ChartData.SeriesList
            cds.LineStyle.Color = Color.FromArgb(alpha, cds.LineStyle.Color)
         Next cds
      End If
   End Sub 'CheckBox_CheckChanged
    
   ' handler for combo box
   Private Sub ComboBox_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim ct As C1.Win.C1Chart.Chart2DTypeEnum = CType([Enum].Parse(GetType(C1.Win.C1Chart.Chart2DTypeEnum), cb.Text), C1.Win.C1Chart.Chart2DTypeEnum)
      c1chart1.ChartGroups.Group0.ChartType = ct
   End Sub 'ComboBox_SelectedIndexChanged
   
   
   ' handler for numeric update down value changed.
   Private Sub NumericUpDown_ValueChanged(sender As Object, e As System.EventArgs)
      Dim nud As System.Windows.Forms.NumericUpDown = CType(sender, System.Windows.Forms.NumericUpDown)
      c1chart1.ChartArea.PlotArea.View3D.Depth = CInt(nud.Value)
   End Sub 'NumericUpDown_ValueChanged
End Class 'NewSample</CodeVB>
    <Info> Shows basic AlarmZone shapes added to an existing chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\01.Advanced\02.AlarmZones\06.PolarShapes" ParentName="05.AlarmZones" Text="PolarShapes">
    <CodeCS>//&lt;Info&gt;
// Shows AlarmZones for Polar charts.
//&lt;/Info&gt;
public class PolarShapes: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Label lab = new System.Windows.Forms.Label();
				lab.Location = new System.Drawing.Point( 10, 0);
				lab.Width = 50;
				lab.Text = "Rotation";
				lab.TextAlign = System.Drawing.ContentAlignment.MiddleRight;

				System.Windows.Forms.ComboBox cb2 = new System.Windows.Forms.ComboBox();
				cb2.BackColor = System.Drawing.SystemColors.Control;
				cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb2.Items.AddRange(new object[] {"0","15","30","60","120","240"});
				cb2.Location = new System.Drawing.Point( lab.Right + 2, 0);
				cb2.Width = 50;
				cb2.Text = "0";
				cb2.Tag = "rotation";
				cb2.SelectedIndexChanged += new EventHandler(ComboBox_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ lab, cb2};
			}
			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);
		SetChartData(c1Chart1);

//&lt;CodeSnippet&gt;
		// Create AlarmZones.  AlarmZones are backdrop areas in the
		// PlotArea typically defined by data coordinate values used
		// to flag areas of interest with in the data space.
		//
		// For Polar charts zones form arcs because arcs are defined
		// by the data coordinates.

		// Get the Chart AlarmZoneCollect Collection.
		C1.Win.C1Chart.AlarmZonesCollection azs = c1Chart1.ChartArea.PlotArea.AlarmZones;

		// Add a rectangular AlarmZone.  The boundaries are defined
		// by data coordinate values, so the zone expands and contracts
		// as the chart plotarea is resized or rescaled.
		C1.Win.C1Chart.AlarmZone az = azs.AddNewZone();
		az.Name = "Rectangle-Data";
		az.BackColor = Color.FromArgb(100,Color.Red);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle;
		az.UpperExtent = 19;
		az.LowerExtent = 12;
		az.FarExtent = 145;
		az.NearExtent = 45;
		az.Visible = true;

		// Add an elliptical AlarmZone.  For Polar charts, elliptical
		// zones are treated the same as rectangular zones
		az = azs.AddNewZone();
		az.BackColor = Color.FromArgb(100,Color.Blue);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Ellipse;
		az.Name = "Ellipse";
		az.UpperExtent = 18;
		az.LowerExtent = 10;
		az.FarExtent = 210;
		az.NearExtent = 160;
		az.Visible = true;
//&lt;/CodeSnippet&gt;
	}

	public void SetChartData(C1.Win.C1Chart.C1Chart chart)
	{
		chart.Reset();
		double [][] data = new double[][]
		{
			new double[] {  0, 45, 90,135,180,225,270,315,360},		// x data
			new double[] {  8, 12, 10, 12, 15},
			new double[] {  5, 50, 95,140,185,230,275,320,365},		// x data
			new double[] { 10, 16, 17, 15, 23},
			new double[] {  0, 45, 90,135,180,225,270,315,360},		// x data
			new double[] { 16, 19, 15, 22, 18, 13, 12, 15, 21},
			new double[] {  5, 50, 95,140,185,230,275,320,365},		// x data
			new double[] { 20, 22, 19, 24, 25, 22, 17, 18, 15},
		};

		chart.ChartGroups.Group0.ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Polar;

		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = chart.ChartGroups[0].ChartData.SeriesList;
		C1.Win.C1Chart.ChartDataSeries cds = null;
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[1]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[2]); cds.Y.CopyDataIn(data[3]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[4]); cds.Y.CopyDataIn(data[5]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[6]); cds.Y.CopyDataIn(data[7]);
	}

	// handler for combo box
	private void ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		int rot = Int32.Parse(cb.Text);
		c1chart1.ChartGroups.Group0.Polar.Start = rot;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows AlarmZones for Polar charts.
'&lt;/Info&gt;
Public Class PolarShapes
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim lab As New System.Windows.Forms.Label()
            lab.Location = New System.Drawing.Point(10, 0)
            lab.Width = 50
            lab.Text = "Rotation"
            lab.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            
            Dim cb2 As New System.Windows.Forms.ComboBox()
            cb2.BackColor = System.Drawing.SystemColors.Control
            cb2.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb2.Items.AddRange(New Object() {"0", "15", "30", "60", "120", "240"})
            cb2.Location = New System.Drawing.Point(lab.Right + 2, 0)
            cb2.Width = 50
            cb2.Text = "0"
            cb2.Tag = "rotation"
            AddHandler cb2.SelectedIndexChanged, AddressOf ComboBox_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {lab, cb2}
         End If
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      SetChartData(c1Chart1)
      
      '&lt;CodeSnippet&gt;
      ' Create AlarmZones.  AlarmZones are backdrop areas in the
      ' PlotArea typically defined by data coordinate values used
      ' to flag areas of interest with in the data space.
      '
      ' For Polar charts zones form arcs because arcs are defined
      ' by the data coordinates.
      ' Get the Chart AlarmZoneCollect Collection.
      Dim azs As C1.Win.C1Chart.AlarmZonesCollection = c1Chart1.ChartArea.PlotArea.AlarmZones
      
      ' Add a rectangular AlarmZone.  The boundaries are defined
      ' by data coordinate values, so the zone expands and contracts
      ' as the chart plotarea is resized or rescaled.
      Dim az As C1.Win.C1Chart.AlarmZone = azs.AddNewZone()
      az.Name = "Rectangle-Data"
      az.BackColor = Color.FromArgb(100, Color.Red)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Rectangle
      az.UpperExtent = 19
      az.LowerExtent = 12
      az.FarExtent = 145
      az.NearExtent = 45
      az.Visible = True
      
      ' Add an elliptical AlarmZone.  For Polar charts, elliptical
      ' zones are treated the same as rectangular zones
      az = azs.AddNewZone()
      az.BackColor = Color.FromArgb(100, Color.Blue)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Ellipse
      az.Name = "Ellipse"
      az.UpperExtent = 18
      az.LowerExtent = 10
      az.FarExtent = 210
      az.NearExtent = 160
      az.Visible = True
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Sub SetChartData(chart As C1.Win.C1Chart.C1Chart)
      chart.Reset()
      Dim data() As Double() = {New Double() {0, 45, 90, 135, 180, 225, 270, 315, 360}, New Double() {8, 12, 10, 12, 15}, New Double() {5, 50, 95, 140, 185, 230, 275, 320, 365}, New Double() {10, 16, 17, 15, 23}, New Double() {0, 45, 90, 135, 180, 225, 270, 315, 360}, New Double() {16, 19, 15, 22, 18, 13, 12, 15, 21}, New Double() {5, 50, 95, 140, 185, 230, 275, 320, 365}, New Double() {20, 22, 19, 24, 25, 22, 17, 18, 15}}
      ' x data
      ' x data
      ' x data
      ' x data
      
      chart.ChartGroups.Group0.ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Polar
      
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = chart.ChartGroups(0).ChartData.SeriesList
      Dim cds As C1.Win.C1Chart.ChartDataSeries = Nothing
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(1))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(2))
      cds.Y.CopyDataIn(data(3))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(4))
      cds.Y.CopyDataIn(data(5))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(6))
      cds.Y.CopyDataIn(data(7))
   End Sub 'SetChartData
   
   
   ' handler for combo box
   Private Sub ComboBox_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim rot As Integer = Int32.Parse(cb.Text)
      c1chart1.ChartGroups.Group0.Polar.Start = rot
   End Sub 'ComboBox_SelectedIndexChanged
End Class 'NewSample</CodeVB>
    <Info> Shows AlarmZones for Polar charts.
</Info>
  </CodeSample>
  <CodeSample Name="..\01.Advanced\02.AlarmZones\06.Polygons" ParentName="05.AlarmZones" Text="Polygons">
    <CodeCS>//&lt;Info&gt;
// Shows Polygon AlarmZone behavior with hit testing.
//&lt;/Info&gt;
public class Polygons: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 40;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "3D";
				cb1.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cb2.Width = 70;
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "Inverted";
				cb2.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.CheckBox cb4 = new System.Windows.Forms.CheckBox();
				cb4.Location = new System.Drawing.Point( cb2.Right + 10, 0);
				cb4.Width = 85;
				cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb4.Text = "Alpha Blend";
				cb4.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.ComboBox cb3 = new System.Windows.Forms.ComboBox();
				cb3.BackColor = System.Drawing.SystemColors.Control;
				cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb3.Items.AddRange(new object[] {"XYPlot","Bar","Step","Area"});
				cb3.Location = new System.Drawing.Point( cb4.Right + 10, 0);
				cb3.Width = 60;
				cb3.Text = "XYPlot";
				cb3.SelectedIndexChanged += new EventHandler(ComboBoxChartType_SelectedIndexChanged);

				System.Windows.Forms.Label lab = new System.Windows.Forms.Label();
				lab.Location = new System.Drawing.Point(cb3.Right + 15, 0);
				lab.Width = 40;
				lab.Text = "Depth";
				lab.TextAlign = System.Drawing.ContentAlignment.MiddleRight;

				System.Windows.Forms.NumericUpDown nud = new System.Windows.Forms.NumericUpDown();
				nud.Location = new System.Drawing.Point(lab.Right + 2, 0);
				nud.Width = 40;
				nud.Minimum = 0;
				nud.Maximum = 25;
				nud.Value = 5;
				nud.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
				
				System.Windows.Forms.Label labx = new System.Windows.Forms.Label();
				labx.Location = new System.Drawing.Point(nud.Right + 15, 0);
				labx.Width = 45;
				labx.Text = "Extents";
				labx.TextAlign = System.Drawing.ContentAlignment.MiddleRight;

				System.Windows.Forms.ComboBox cb5 = new System.Windows.Forms.ComboBox();
				cb5.BackColor = System.Drawing.SystemColors.Control;
				cb5.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb5.Items.AddRange(new object[]
					{
						"Near=0, Far=0, Upper=0, Lower=0",
						"Near=2, Far=0, Upper=0, Lower=0",
						"Near=0, Far=4, Upper=0, Lower=0",
						"Near=0, Far=0, Upper=18, Lower=0",
						"Near=0, Far=0, Upper=0, Lower=14",
						"Near=2, Far=4, Upper=0, Lower=0",
						"Near=0, Far=0, Upper=18, Lower=14",
						"Near=2, Far=4, Upper=18, Lower=14",
					}
				);
				cb5.Location = new System.Drawing.Point( labx.Right + 2, 0);
				cb5.Width = 200;
				cb5.Text = cb5.Items[0].ToString();
				cb5.SelectedIndexChanged += new EventHandler(ComboBoxExtents_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb4, cb3, lab, nud, labx, cb5};
			}

			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);

		// setup the chart data
		SetChartData(c1chart1);

//&lt;CodeSnippet&gt;
		// Create AlarmZones.  AlarmZones are backdrop areas in the
		// PlotArea typically defined by data coordinate values used
		// to flag areas of interest with in the data space.

		// Get the Chart AlarmZoneCollect Collection.
		C1.Win.C1Chart.AlarmZonesCollection azs = c1Chart1.ChartArea.PlotArea.AlarmZones;

		// Add a triangular AlarmZone.
		//
		// The boundaries are defined by data coordinate values, so the zone
		// expands and contracts as the chart plotarea is resized or rescaled.
		//
		// For Polygons, the extents form a rectangle that limits the
		// boundaries of a specified polygon.
		//
		C1.Win.C1Chart.AlarmZone az = azs.AddNewZone();
		az.Name = "Triangle";
		az.BackColor = Color.FromArgb(100,Color.Red);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon;

		PointF [] triPointData = new PointF[]
		{ new PointF(1.5f,20f), new PointF(4f, 17f),
		  new PointF(3f, 12f), new PointF(1.5f,20f)
		};
		az.PolygonData.PointData.CopyDataIn(triPointData);

		// Extents that are all zero indicate that the entire PlotArea
		// forms the extents.
		az.NearExtent = 0;
		az.FarExtent = 0;
		az.UpperExtent = 0;
		az.LowerExtent = 0;
		az.Visible = true;

		// Add a trapazoidal AlarmZone.
		//
		// The boundaries are defined by a circumscribing rectangle
		// expressed in data coordinate values, so the zone expands
		// and contracts as the chart plotarea is resized or rescaled.
		az = azs.AddNewZone();
		az.Name = "Trapzoid";
		az.BackColor = Color.FromArgb(100,Color.Blue);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon;

		PointF [] trapPointData = new PointF[]
		{ new PointF(1.5f,13f), new PointF(2.5f, 21f),
		  new PointF(4.5f,21f), new PointF(4.8f, 13f),
		  new PointF(1.5f,13f)
		};
		az.PolygonData.PointData.CopyDataIn(trapPointData);

		// Extents that are all zero indicate that the entire PlotArea
		// forms the extents.
		az.NearExtent = 0;
		az.FarExtent = 0;
		az.UpperExtent = 0;
		az.LowerExtent = 0;
		az.Visible = true;

//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.MouseMove -= new System.Windows.Forms.MouseEventHandler(c1Chart1_MouseMove);
		base.Unload(c1chart1);
	}

	public void SetChartData(C1.Win.C1Chart.C1Chart chart)
	{
		chart.Reset();
		double [][] data = new double[][]
		{
			new double[] {1,2,3,4,5},	// x data
			new double[] {20,22,19,24,25},
			new double[] {16,19,15,22,18},
			new double[] {10,16,17,15,23},
			new double[] {8,12,10,12,15},
		};

		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = chart.ChartGroups[0].ChartData.SeriesList;
		C1.Win.C1Chart.ChartDataSeries cds = null;
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[1]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[2]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[3]);
		cds = cdsc.AddNewSeries(); 	cds.X.CopyDataIn(data[0]); cds.Y.CopyDataIn(data[4]);

		chart.ChartArea.AxisX.GridMajor.Color = Color.DarkGray;
		chart.ChartArea.AxisX.GridMajor.Visible = true;
		chart.ChartArea.AxisY.GridMajor.Color = Color.DarkGray;
		chart.ChartArea.AxisY.GridMajor.Visible = true;

		chart.Footer.Text = "Mouse not over an AlarmZone";
		chart.Footer.Visible = true;

		chart.MouseMove += new System.Windows.Forms.MouseEventHandler(c1Chart1_MouseMove);
	}

	//---------------------------------------------------------------------
	// handler for check boxes
	private void CheckBox_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;

		if(cb.Text == "3D")
		{
			if( cb.Checked)
			{
				System.Windows.Forms.NumericUpDown nud =
					(System.Windows.Forms.NumericUpDown)_controls[5];
				
				c1chart1.ChartGroups[0].Use3D = true;
				c1chart1.ChartArea.PlotArea.View3D.Depth = (int)nud.Value;
				c1chart1.ChartArea.PlotArea.View3D.Rotation = 45;
				c1chart1.ChartArea.PlotArea.View3D.Elevation = 45;
				c1chart1.ChartArea.PlotArea.Boxed = true;
			}
			else
			{
				c1chart1.ChartGroups[0].Use3D = false;
				c1chart1.ChartArea.PlotArea.Boxed = false;
			}
		}
		else if(cb.Text == "Inverted")
		{
			c1chart1.ChartArea.Inverted = cb.Checked;
		}
		else if(cb.Text == "Alpha Blend")
		{
			int alpha = cb.Checked ? 64 : 255;
			foreach(C1.Win.C1Chart.ChartDataSeries cds in c1chart1.ChartGroups.Group0.ChartData.SeriesList)
				cds.LineStyle.Color = Color.FromArgb(alpha, cds.LineStyle.Color);
		}
	}

	// handler for ChartType ComboBox
	private void ComboBoxChartType_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		C1.Win.C1Chart.Chart2DTypeEnum ct = (C1.Win.C1Chart.Chart2DTypeEnum)
			Enum.Parse(typeof(C1.Win.C1Chart.Chart2DTypeEnum),cb.Text);
		c1chart1.ChartGroups.Group0.ChartType = ct;
	}

//&lt;CodeSnippet&gt;

	// handler for Extents ComboBox
	private void ComboBoxExtents_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		string [] extents = cb.Text.Split(new char[] {'=',','});
		if(extents != null &amp;&amp; extents.Length == 8)
		{
			double near = double.Parse(extents[1]);
			double far = double.Parse(extents[3]);
			double upper = double.Parse(extents[5]);
			double lower = double.Parse(extents[7]);

			C1.Win.C1Chart.AlarmZonesCollection azc = c1chart1.ChartArea.PlotArea.AlarmZones;
			foreach(C1.Win.C1Chart.AlarmZone az in azc)
			{
				az.NearExtent = near;
				az.FarExtent = far;
				az.UpperExtent = upper;
				az.LowerExtent = lower;
			}
		}
	}

//&lt;/CodeSnippet&gt;

	// handler for numeric update down value changed.
	private void NumericUpDown_ValueChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.NumericUpDown nud = (System.Windows.Forms.NumericUpDown)sender;
		c1chart1.ChartArea.PlotArea.View3D.Depth = (int)nud.Value;
	}

//&lt;CodeSnippet&gt;

	// handler for AlarmZone hit testing
	private void c1Chart1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
	{
		if(e.Button == System.Windows.Forms.MouseButtons.None)
		{
			C1.Win.C1Chart.C1Chart chart = sender as C1.Win.C1Chart.C1Chart;
			C1.Win.C1Chart.AlarmZone az =
				chart.ChartArea.PlotArea.AlarmZones.AlarmZoneAtCoord(e.X,e.Y);

			if(az != null)
				chart.Footer.Text = "Hovering over AlarmZone " + az.Name;
			else
				chart.Footer.Text = "Mouse not over an AlarmZone";
		}
	}

//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows Polygon AlarmZone behavior with hit testing.
'&lt;/Info&gt;
Public Class Polygons
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 40
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "3D"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cb2.Width = 70
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "Inverted"
            AddHandler cb2.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb4 As New System.Windows.Forms.CheckBox()
            cb4.Location = New System.Drawing.Point(cb2.Right + 10, 0)
            cb4.Width = 85
            cb4.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb4.Text = "Alpha Blend"
            AddHandler cb4.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb3 As New System.Windows.Forms.ComboBox()
            cb3.BackColor = System.Drawing.SystemColors.Control
            cb3.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb3.Items.AddRange(New Object() {"XYPlot", "Bar", "Step", "Area"})
            cb3.Location = New System.Drawing.Point(cb4.Right + 10, 0)
            cb3.Width = 60
            cb3.Text = "XYPlot"
            AddHandler cb3.SelectedIndexChanged, AddressOf ComboBoxChartType_SelectedIndexChanged
            
            Dim lab As New System.Windows.Forms.Label()
            lab.Location = New System.Drawing.Point(cb3.Right + 15, 0)
            lab.Width = 40
            lab.Text = "Depth"
            lab.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            
            Dim nud As New System.Windows.Forms.NumericUpDown()
            nud.Location = New System.Drawing.Point(lab.Right + 2, 0)
            nud.Width = 40
            nud.Minimum = 0
            nud.Maximum = 25
            nud.Value = 5
            AddHandler nud.ValueChanged, AddressOf NumericUpDown_ValueChanged
            
            Dim labx As New System.Windows.Forms.Label()
            labx.Location = New System.Drawing.Point(nud.Right + 15, 0)
            labx.Width = 45
            labx.Text = "Extents"
            labx.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            
            Dim cb5 As New System.Windows.Forms.ComboBox()
            cb5.BackColor = System.Drawing.SystemColors.Control
            cb5.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb5.Items.AddRange(New Object() {"Near=0, Far=0, Upper=0, Lower=0", "Near=2, Far=0, Upper=0, Lower=0", "Near=0, Far=4, Upper=0, Lower=0", "Near=0, Far=0, Upper=18, Lower=0", "Near=0, Far=0, Upper=0, Lower=14", "Near=2, Far=4, Upper=0, Lower=0", "Near=0, Far=0, Upper=18, Lower=14", "Near=2, Far=4, Upper=18, Lower=14"})
            cb5.Location = New System.Drawing.Point(labx.Right + 2, 0)
            cb5.Width = 200
            cb5.Text = cb5.Items(0).ToString()
            AddHandler cb5.SelectedIndexChanged, AddressOf ComboBoxExtents_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb4, cb3, lab, nud, labx, cb5}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      
      ' setup the chart data
      SetChartData(c1chart1)
      
      '&lt;CodeSnippet&gt;
      ' Create AlarmZones.  AlarmZones are backdrop areas in the
      ' PlotArea typically defined by data coordinate values used
      ' to flag areas of interest with in the data space.
      ' Get the Chart AlarmZoneCollect Collection.
      Dim azs As C1.Win.C1Chart.AlarmZonesCollection = c1Chart1.ChartArea.PlotArea.AlarmZones
      
      ' Add a triangular AlarmZone.
      '
      ' The boundaries are defined by data coordinate values, so the zone
      ' expands and contracts as the chart plotarea is resized or rescaled.
      '
      ' For Polygons, the extents form a rectangle that limits the
      ' boundaries of a specified polygon.
      '
      Dim az As C1.Win.C1Chart.AlarmZone = azs.AddNewZone()
      az.Name = "Triangle"
      az.BackColor = Color.FromArgb(100, Color.Red)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon
      
      Dim triPointData() As PointF = {New PointF(1.5F, 20F), New PointF(4F, 17F), New PointF(3F, 12F), New PointF(1.5F, 20F)}
      az.PolygonData.PointData.CopyDataIn(triPointData)
      
      ' Extents that are all zero indicate that the entire PlotArea
      ' forms the extents.
      az.NearExtent = 0
      az.FarExtent = 0
      az.UpperExtent = 0
      az.LowerExtent = 0
      az.Visible = True
      
      ' Add a trapazoidal AlarmZone.
      '
      ' The boundaries are defined by a circumscribing rectangle
      ' expressed in data coordinate values, so the zone expands
      ' and contracts as the chart plotarea is resized or rescaled.
      az = azs.AddNewZone()
      az.Name = "Trapzoid"
      az.BackColor = Color.FromArgb(100, Color.Blue)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon
      
      Dim trapPointData() As PointF = {New PointF(1.5F, 13F), New PointF(2.5F, 21F), New PointF(4.5F, 21F), New PointF(4.8F, 13F), New PointF(1.5F, 13F)}
      az.PolygonData.PointData.CopyDataIn(trapPointData)
      
      ' Extents that are all zero indicate that the entire PlotArea
      ' forms the extents.
      az.NearExtent = 0
      az.FarExtent = 0
      az.UpperExtent = 0
      az.LowerExtent = 0
      az.Visible = True
   End Sub 'Load
    
   '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.MouseMove, AddressOf Chart_MouseMove
      MyBase.Unload(c1chart1)
   End Sub 'Unload

   Public Sub SetChartData(chart As C1.Win.C1Chart.C1Chart)
      chart.Reset()
      Dim data() As Double() = {New Double() {1, 2, 3, 4, 5}, New Double() {20, 22, 19, 24, 25}, New Double() {16, 19, 15, 22, 18}, New Double() {10, 16, 17, 15, 23}, New Double() {8, 12, 10, 12, 15}}
      ' x data
      
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = chart.ChartGroups(0).ChartData.SeriesList
      Dim cds As C1.Win.C1Chart.ChartDataSeries = Nothing
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(1))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(2))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(3))
      cds = cdsc.AddNewSeries()
      cds.X.CopyDataIn(data(0))
      cds.Y.CopyDataIn(data(4))
      
      chart.ChartArea.AxisX.GridMajor.Color = Color.DarkGray
      chart.ChartArea.AxisX.GridMajor.Visible = True
      chart.ChartArea.AxisY.GridMajor.Color = Color.DarkGray
      chart.ChartArea.AxisY.GridMajor.Visible = True
      
      chart.Footer.Text = "Mouse not over an AlarmZone"
      chart.Footer.Visible = True
      
      AddHandler chart.MouseMove, AddressOf c1Chart1_MouseMove
   End Sub 'SetChartData
   
   
   '---------------------------------------------------------------------
   ' handler for check boxes
   Private Sub CheckBox_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      
      If cb.Text = "3D" Then
         If cb.Checked Then
            Dim nud As System.Windows.Forms.NumericUpDown = CType(_controls(5), System.Windows.Forms.NumericUpDown)
            
            c1chart1.ChartGroups(0).Use3D = True
            c1chart1.ChartArea.PlotArea.View3D.Depth = CInt(nud.Value)
            c1chart1.ChartArea.PlotArea.View3D.Rotation = 45
            c1chart1.ChartArea.PlotArea.View3D.Elevation = 45
            c1chart1.ChartArea.PlotArea.Boxed = True
         Else
            c1chart1.ChartGroups(0).Use3D = False
            c1chart1.ChartArea.PlotArea.Boxed = False
         End If
      ElseIf cb.Text = "Inverted" Then
         c1chart1.ChartArea.Inverted = cb.Checked
      ElseIf cb.Text = "Alpha Blend" Then
         Dim alpha As Integer = 255
         If cb.Checked Then alpha = 64
         
         Dim cds As C1.Win.C1Chart.ChartDataSeries
         For Each cds In  c1chart1.ChartGroups.Group0.ChartData.SeriesList
            cds.LineStyle.Color = Color.FromArgb(alpha, cds.LineStyle.Color)
         Next cds
      End If
   End Sub 'CheckBox_CheckChanged
    
   ' handler for ChartType ComboBox
   Private Sub ComboBoxChartType_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim ct As C1.Win.C1Chart.Chart2DTypeEnum = CType([Enum].Parse(GetType(C1.Win.C1Chart.Chart2DTypeEnum), cb.Text), C1.Win.C1Chart.Chart2DTypeEnum)
      c1chart1.ChartGroups.Group0.ChartType = ct
   End Sub 'ComboBoxChartType_SelectedIndexChanged
   
   
   '&lt;CodeSnippet&gt;
   ' handler for Extents ComboBox
   Private Sub ComboBoxExtents_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim extents As String() = cb.Text.Split(New Char() {"="c, ","c})
      If Not (extents Is Nothing) And extents.Length = 8 Then
         Dim near As Double = Double.Parse(extents(1))
         Dim far As Double = Double.Parse(extents(3))
         Dim upper As Double = Double.Parse(extents(5))
         Dim lower As Double = Double.Parse(extents(7))
         
         Dim azc As C1.Win.C1Chart.AlarmZonesCollection = c1chart1.ChartArea.PlotArea.AlarmZones
         Dim az As C1.Win.C1Chart.AlarmZone
         For Each az In  azc
            az.NearExtent = near
            az.FarExtent = far
            az.UpperExtent = upper
            az.LowerExtent = lower
         Next az
      End If
   End Sub 'ComboBoxExtents_SelectedIndexChanged
   
   
   '&lt;/CodeSnippet&gt;
   ' handler for numeric update down value changed.
   Private Sub NumericUpDown_ValueChanged(sender As Object, e As System.EventArgs)
      Dim nud As System.Windows.Forms.NumericUpDown = CType(sender, System.Windows.Forms.NumericUpDown)
      c1chart1.ChartArea.PlotArea.View3D.Depth = CInt(nud.Value)
   End Sub 'NumericUpDown_ValueChanged
   
   
   '&lt;CodeSnippet&gt;
   ' handler for AlarmZone hit testing
   Private Sub c1Chart1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs)
      If e.Button = System.Windows.Forms.MouseButtons.None Then
         Dim chart As C1.Win.C1Chart.C1Chart = sender
         Dim az As C1.Win.C1Chart.AlarmZone = chart.ChartArea.PlotArea.AlarmZones.AlarmZoneAtCoord(e.X, e.Y)
         
         If Not (az Is Nothing) Then
            chart.Footer.Text = "Hovering over AlarmZone " + az.Name
         Else
            chart.Footer.Text = "Mouse not over an AlarmZone"
         End If
      End If
   End Sub 'c1Chart1_MouseMove 
End Class 'NewSample '&lt;/CodeSnippet&gt;</CodeVB>
    <Info> Shows Polygon AlarmZone behavior with hit testing.
</Info>
  </CodeSample>
  <CodeSample Name="..\01.Advanced\02.AlarmZones\06.DataSeries" ParentName="05.AlarmZones" Text="DataSeries">
    <CodeCS>//&lt;Info&gt;
// Shows DataSeries AlarmZone behavior with hit testing.
//&lt;/Info&gt;
public class DataSeries: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 112;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "DataSeries 0 AlarmZone Visible";
				cb1.Checked = true;

				// calculate the necessary height.
				System.Drawing.Graphics g = cb1.CreateGraphics();
				System.Drawing.SizeF szf = g.MeasureString(cb1.Text,cb1.Font, cb1.Width);
				g.Dispose();
				cb1.Height = (int)szf.Height;

				cb1.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.CheckBox cb2 = new System.Windows.Forms.CheckBox();
				cb2.Location = new System.Drawing.Point( cb1.Right + 5, 0);
				cb2.Width = 112;
				cb2.Height = cb1.Height;
				cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb2.Text = "DataSeries 1 AlarmZone Visible";
				cb2.Checked = true;
				cb2.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.CheckBox cb3 = new System.Windows.Forms.CheckBox();
				cb3.Location = new System.Drawing.Point( cb2.Right + 5, 0);
				cb3.Width = 65;
				cb3.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb3.Text = "Inverted";
				cb3.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.Label labx = new System.Windows.Forms.Label();
				labx.Location = new System.Drawing.Point(cb3.Right + 10, 0);
				labx.Width = 45;
				labx.Text = "Extents";
				labx.TextAlign = System.Drawing.ContentAlignment.MiddleRight;

				System.Windows.Forms.ComboBox cb5 = new System.Windows.Forms.ComboBox();
				cb5.BackColor = System.Drawing.SystemColors.Control;
				cb5.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb5.Items.AddRange(new object[]
					{
						"Near=0, Far=0, Upper=0, Lower=0",
						"Near=4, Far=0, Upper=0, Lower=0",
						"Near=0, Far=10, Upper=0, Lower=0",
						"Near=0, Far=0, Upper=0.5, Lower=-0.5",
						"Near=0, Far=0, Upper=0, Lower=-0.5",
						"Near=4, Far=10, Upper=0, Lower=0",
						"Near=0, Far=0, Upper=0.5, Lower=-0.5",
						"Near=4, Far=10, Upper=0.5, Lower=-0.5",
					}
				);
				cb5.Location = new System.Drawing.Point( labx.Right + 2, 0);
				cb5.Width = 200;
				cb5.Text = cb5.Items[0].ToString();
				cb5.SelectedIndexChanged += new EventHandler(ComboBoxExtents_SelectedIndexChanged);

				_controls = new System.Windows.Forms.Control[]{ cb1, cb2, cb3, labx, cb5};
			}

			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);

		// setup the chart data
		SetChartData(c1chart1);

//&lt;CodeSnippet&gt;
		// Create AlarmZones.  AlarmZones are backdrop areas in the
		// PlotArea typically defined by data coordinate values used
		// to flag areas of interest with in the data space.

		// Get the Chart AlarmZoneCollect Collection.
		C1.Win.C1Chart.AlarmZonesCollection azs = c1Chart1.ChartArea.PlotArea.AlarmZones;

		// Add a DataSeries specified AlarmZone.  The DataSeries is specified
		// by the PolygonData object associated with Polygon AlarmZones.
		//
		// The boundaries are defined by data coordinate values, so the zone
		// expands and contracts as the chart plotarea is resized or rescaled.
		//
		// For Polygons, the extents form a rectangle that limits the
		// boundaries of a specified polygon.
		//
		C1.Win.C1Chart.AlarmZone az = azs.AddNewZone();
		az.Name = "DataSeries 0 AlarmZone";
		az.BackColor = Color.FromArgb(100,Color.Red);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon;

		az.GroupIndex = 0;					// ChartGroup containing the data
		az.PolygonData.SeriesIndex = 0;		// DataSeries containing the data
		az.PolygonData.PolygonSource = C1.Win.C1Chart.PolygonSourceEnum.DataSeries;

		// Extents that are all zero indicate that the entire PlotArea
		// forms the extents.
		az.NearExtent = 0;
		az.FarExtent = 0;
		az.UpperExtent = 0;
		az.LowerExtent = 0;
		az.Visible = true;

		
		// Add an AlarmZone of using array data obtained from a ChartDataSeries.
		// This is done through the ChartDataCoord type that are part of the
		// PolygonData object.
		az = azs.AddNewZone();
		az.Name = "DataSeries 1 AlarmZone";
		az.BackColor = Color.FromArgb(100,Color.Blue);
		az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon;

		// Specify the polygon data source as arrays.
		az.PolygonData.PolygonSource = C1.Win.C1Chart.PolygonSourceEnum.Arrays;

		// Get the appropriate chart data series.
		C1.Win.C1Chart.ChartDataSeries cds = c1Chart1.ChartGroups.Group0.ChartData[1];
		az.PolygonData.X.CopyDataIn(cds.X.CopyDataOut());
		az.PolygonData.Y.CopyDataIn(cds.Y.CopyDataOut());

		// Extents that are all zero indicate that the entire PlotArea
		// forms the extents.
		az.NearExtent = 0;
		az.FarExtent = 0;
		az.UpperExtent = 0;
		az.LowerExtent = 0;
		az.Visible = true;
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.MouseMove -= new System.Windows.Forms.MouseEventHandler(c1Chart1_MouseMove);
		base.Unload(c1chart1);
	}

	public void SetChartData(C1.Win.C1Chart.C1Chart chart)
	{
		chart.Reset();
		double [] x = new double[101];
		double [] y = new double[101];

		// 2 cycles of 2 * PI
		double factor = 2.0 * 2.0 *Math.PI / ( x.Length - 1);
		Random rnd = new Random();

		int i;
		for(i=0; i &lt; x.Length; i++)
		{
			x[i] = factor * i;
			y[i] = Math.Sin(x[i]) * rnd.NextDouble();
		}

		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = chart.ChartGroups[0].ChartData.SeriesList;
		C1.Win.C1Chart.ChartDataSeries cds = null;
		cds = cdsc.AddNewSeries();

		cds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None;
		cds.LineStyle.Color = System.Drawing.Color.Black;

		cds.X.CopyDataIn(x);
		cds.Y.CopyDataIn(y);

		y[0] = y[x.Length-1] = 0.0;
		for(i=1; i &lt; x.Length-1; i++)
		{
			y[i] = Math.Cos(x[i]) * rnd.NextDouble();
		}

		cds = cdsc.AddNewSeries();
		cds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None;
		cds.LineStyle.Color = System.Drawing.Color.Blue;

		cds.X.CopyDataIn(x);
		cds.Y.CopyDataIn(y);

		chart.ChartArea.AxisX.GridMajor.Color = Color.DarkGray;
		chart.ChartArea.AxisX.GridMajor.Visible = true;
		chart.ChartArea.AxisY.GridMajor.Color = Color.DarkGray;
		chart.ChartArea.AxisY.GridMajor.Visible = true;

		chart.Legend.Visible = true;

		chart.Footer.Text = "Mouse not over an AlarmZone";
		chart.Footer.Visible = true;

		chart.MouseMove += new System.Windows.Forms.MouseEventHandler(c1Chart1_MouseMove);
	}

	//---------------------------------------------------------------------
	// handler for check boxes
	private void CheckBox_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		if(cb.Text.StartsWith("DataSeries "))
		{
			string zname = cb.Text.Replace(" Visible","");
			c1chart1.ChartArea.PlotArea.AlarmZones[zname].Visible = cb.Checked;
		}
		else if(cb.Text == "Inverted")
		{
			c1chart1.ChartArea.Inverted = cb.Checked;
		}
	}

//&lt;CodeSnippet&gt;

	// handler for Extents ComboBox
	private void ComboBoxExtents_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		string [] extents = cb.Text.Split(new char[] {'=',','});
		if(extents != null &amp;&amp; extents.Length == 8)
		{
			double near = double.Parse(extents[1]);
			double far = double.Parse(extents[3]);
			double upper = double.Parse(extents[5]);
			double lower = double.Parse(extents[7]);

			C1.Win.C1Chart.AlarmZonesCollection azc = c1chart1.ChartArea.PlotArea.AlarmZones;
			foreach(C1.Win.C1Chart.AlarmZone az in azc)
			{
				az.NearExtent = near;
				az.FarExtent = far;
				az.UpperExtent = upper;
				az.LowerExtent = lower;
			}
		}
	}

	// handler for AlarmZone hit testing
	private void c1Chart1_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
	{
		if(e.Button == System.Windows.Forms.MouseButtons.None)
		{
			C1.Win.C1Chart.C1Chart chart = sender as C1.Win.C1Chart.C1Chart;
			C1.Win.C1Chart.AlarmZone az =
				chart.ChartArea.PlotArea.AlarmZones.AlarmZoneAtCoord(e.X,e.Y);

			if(az != null)
				chart.Footer.Text = "Hovering over AlarmZone " + az.Name;
			else
				chart.Footer.Text = "Mouse not over an AlarmZone";
		}
	}

//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows DataSeries AlarmZone behavior with hit testing.
'&lt;/Info&gt;
Public Class DataSeries
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 112
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "DataSeries 0 AlarmZone Visible"
            cb1.Checked = True
            
            ' calculate the necessary height.
            Dim g As System.Drawing.Graphics = cb1.CreateGraphics()
            Dim szf As System.Drawing.SizeF = g.MeasureString(cb1.Text, cb1.Font, cb1.Width)
            g.Dispose()
            cb1.Height = CInt(szf.Height)
            
            AddHandler cb1.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb2 As New System.Windows.Forms.CheckBox()
            cb2.Location = New System.Drawing.Point(cb1.Right + 5, 0)
            cb2.Width = 112
            cb2.Height = cb1.Height
            cb2.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb2.Text = "DataSeries 1 AlarmZone Visible"
            cb2.Checked = True
            AddHandler cb2.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cb3 As New System.Windows.Forms.CheckBox()
            cb3.Location = New System.Drawing.Point(cb2.Right + 5, 0)
            cb3.Width = 65
            cb3.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb3.Text = "Inverted"
            AddHandler cb3.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim labx As New System.Windows.Forms.Label()
            labx.Location = New System.Drawing.Point(cb3.Right + 10, 0)
            labx.Width = 45
            labx.Text = "Extents"
            labx.TextAlign = System.Drawing.ContentAlignment.MiddleRight
            
            Dim cb5 As New System.Windows.Forms.ComboBox()
            cb5.BackColor = System.Drawing.SystemColors.Control
            cb5.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb5.Items.AddRange(New Object() {"Near=0, Far=0, Upper=0, Lower=0", "Near=4, Far=0, Upper=0, Lower=0", "Near=0, Far=10, Upper=0, Lower=0", "Near=0, Far=0, Upper=0.5, Lower=-0.5", "Near=0, Far=0, Upper=0, Lower=-0.5", "Near=4, Far=10, Upper=0, Lower=0", "Near=0, Far=0, Upper=0.5, Lower=-0.5", "Near=4, Far=10, Upper=0.5, Lower=-0.5"})
            cb5.Location = New System.Drawing.Point(labx.Right + 2, 0)
            cb5.Width = 200
            cb5.Text = cb5.Items(0).ToString()
            AddHandler cb5.SelectedIndexChanged, AddressOf ComboBoxExtents_SelectedIndexChanged
            
            _controls = New System.Windows.Forms.Control() {cb1, cb2, cb3, labx, cb5}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      
      ' setup the chart data
      SetChartData(c1chart1)
      
      '&lt;CodeSnippet&gt;
      ' Create AlarmZones.  AlarmZones are backdrop areas in the
      ' PlotArea typically defined by data coordinate values used
      ' to flag areas of interest with in the data space.
      ' Get the Chart AlarmZoneCollect Collection.
      Dim azs As C1.Win.C1Chart.AlarmZonesCollection = c1Chart1.ChartArea.PlotArea.AlarmZones
      
      ' Add a DataSeries specified AlarmZone.  The DataSeries is specified
      ' by the PolygonData object associated with Polygon AlarmZones.
      '
      ' The boundaries are defined by data coordinate values, so the zone
      ' expands and contracts as the chart plotarea is resized or rescaled.
      '
      ' For Polygons, the extents form a rectangle that limits the
      ' boundaries of a specified polygon.
      '
      Dim az As C1.Win.C1Chart.AlarmZone = azs.AddNewZone()
      az.Name = "DataSeries 0 AlarmZone"
      az.BackColor = Color.FromArgb(100, Color.Red)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon
      
      az.GroupIndex = 0 ' ChartGroup containing the data
      az.PolygonData.SeriesIndex = 0 ' DataSeries containing the data
      az.PolygonData.PolygonSource = C1.Win.C1Chart.PolygonSourceEnum.DataSeries
      
      ' Extents that are all zero indicate that the entire PlotArea
      ' forms the extents.
      az.NearExtent = 0
      az.FarExtent = 0
      az.UpperExtent = 0
      az.LowerExtent = 0
      az.Visible = True
      
      
      ' Add an AlarmZone of using array data obtained from a ChartDataSeries.
      ' This is done through the ChartDataCoord type that are part of the
      ' PolygonData object.
      az = azs.AddNewZone()
      az.Name = "DataSeries 1 AlarmZone"
      az.BackColor = Color.FromArgb(100, Color.Blue)
      az.Shape = C1.Win.C1Chart.AlarmZoneShapeEnum.Polygon
      
      ' Specify the polygon data source as arrays.
      az.PolygonData.PolygonSource = C1.Win.C1Chart.PolygonSourceEnum.Arrays
      
      ' Get the appropriate chart data series.
      Dim cds As C1.Win.C1Chart.ChartDataSeries = c1Chart1.ChartGroups.Group0.ChartData(1)
      az.PolygonData.X.CopyDataIn(cds.X.CopyDataOut())
      az.PolygonData.Y.CopyDataIn(cds.Y.CopyDataOut())
      
      ' Extents that are all zero indicate that the entire PlotArea
      ' forms the extents.
      az.NearExtent = 0
      az.FarExtent = 0
      az.UpperExtent = 0
      az.LowerExtent = 0
      az.Visible = True
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.MouseMove, AddressOf Chart_MouseMove
      MyBase.Unload(c1chart1)
   End Sub 'Unload

   Public Sub SetChartData(chart As C1.Win.C1Chart.C1Chart)
      chart.Reset()
      Dim x(101) As Double
      Dim y(101) As Double
      
      ' 2 cycles of 2 * PI
      Dim factor As Double = 2.0 * 2.0 * Math.PI /(x.Length - 1)
      Dim rnd As New Random()
      
      Dim i As Integer
      For i = 0 To x.Length - 1
         x(i) = factor * i
         y(i) = Math.Sin(x(i)) * rnd.NextDouble()
      Next i
      
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = chart.ChartGroups(0).ChartData.SeriesList
      Dim cds As C1.Win.C1Chart.ChartDataSeries = Nothing
      cds = cdsc.AddNewSeries()
      
      cds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None
      cds.LineStyle.Color = System.Drawing.Color.Black
      
      cds.X.CopyDataIn(x)
      cds.Y.CopyDataIn(y)
      
      y(0) = 0.0
      y(x.Length - 1) = 0.0

      For i = 1 To (x.Length - 1) - 1
         y(i) = Math.Cos(x(i)) * rnd.NextDouble()
      Next i
      
      cds = cdsc.AddNewSeries()
      cds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.None
      cds.LineStyle.Color = System.Drawing.Color.Blue
      
      cds.X.CopyDataIn(x)
      cds.Y.CopyDataIn(y)
      
      chart.ChartArea.AxisX.GridMajor.Color = Color.DarkGray
      chart.ChartArea.AxisX.GridMajor.Visible = True
      chart.ChartArea.AxisY.GridMajor.Color = Color.DarkGray
      chart.ChartArea.AxisY.GridMajor.Visible = True
      
      chart.Legend.Visible = True
      
      chart.Footer.Text = "Mouse not over an AlarmZone"
      chart.Footer.Visible = True
      
      AddHandler chart.MouseMove, AddressOf c1Chart1_MouseMove
   End Sub 'SetChartData
   
   
   '---------------------------------------------------------------------
   ' handler for check boxes
   Private Sub CheckBox_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      If cb.Text.StartsWith("DataSeries ") Then
         Dim zname As String = cb.Text.Replace(" Visible", "")
         c1chart1.ChartArea.PlotArea.AlarmZones(zname).Visible = cb.Checked
      ElseIf cb.Text = "Inverted" Then
         c1chart1.ChartArea.Inverted = cb.Checked
      End If
   End Sub 'CheckBox_CheckChanged
   
   
   '&lt;CodeSnippet&gt;
   ' handler for Extents ComboBox
   Private Sub ComboBoxExtents_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim extents As String() = cb.Text.Split(New Char() {"="c, ","c})
      If Not (extents Is Nothing) And extents.Length = 8 Then
         Dim near As Double = Double.Parse(extents(1))
         Dim far As Double = Double.Parse(extents(3))
         Dim upper As Double = Double.Parse(extents(5))
         Dim lower As Double = Double.Parse(extents(7))
         
         Dim azc As C1.Win.C1Chart.AlarmZonesCollection = c1chart1.ChartArea.PlotArea.AlarmZones
         Dim az As C1.Win.C1Chart.AlarmZone
         For Each az In  azc
            az.NearExtent = near
            az.FarExtent = far
            az.UpperExtent = upper
            az.LowerExtent = lower
         Next az
      End If
   End Sub 'ComboBoxExtents_SelectedIndexChanged
   
   
   ' handler for AlarmZone hit testing
   Private Sub c1Chart1_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs)
      If e.Button = System.Windows.Forms.MouseButtons.None Then
         Dim chart As C1.Win.C1Chart.C1Chart = sender
         Dim az As C1.Win.C1Chart.AlarmZone = chart.ChartArea.PlotArea.AlarmZones.AlarmZoneAtCoord(e.X, e.Y)
         
         If Not (az Is Nothing) Then
            chart.Footer.Text = "Hovering over AlarmZone " + az.Name
         Else
            chart.Footer.Text = "Mouse not over an AlarmZone"
         End If
      End If
   End Sub 'c1Chart1_MouseMove 
End Class 'NewSample
'&lt;/CodeSnippet&gt;</CodeVB>
    <Info> Shows DataSeries AlarmZone behavior with hit testing.
</Info>
  </CodeSample>
  <CodeSample Name="01.Paint events" ParentName="04.Advanced" Text="Paint events" />
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\01.Paint events\01.Paint" ParentName="01.Paint events" Text="Paint">
    <CodeCS>//&lt;Info&gt;
//Shows using chart paint event.
//&lt;/Info&gt;
public class Paint: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();
		
		// Create sample data
		int n = 10;
		double[] x1 = new double[n];
		double[] x2 = new double[n];
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "Series 1";
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "Series 2";
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		c1chart1.Legend.Visible = true;
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		c1chart1.ChartArea.AxisX.SetMinMax( -1, 1);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		c1chart1.ChartArea.PlotArea.Boxed = true;

		//RtfNormal
		// Add paint handler
		c1chart1.Paint += new System.Windows.Forms.PaintEventHandler(Chart_Paint);
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.Paint -= new System.Windows.Forms.PaintEventHandler(Chart_Paint);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// Paint event handler
	private void Chart_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
	{
		C1.Win.C1Chart.C1Chart chart = (C1.Win.C1Chart.C1Chart)sender;
		int x1 = 0, y1 = 0, x2 = 0, y2 = 0;

		// Transform coordinates
		chart.ChartGroups[0].DataCoordToCoord( -0.75, -0.75, ref x1, ref y1);
		chart.ChartGroups[0].DataCoordToCoord( 0.75, 0.75, ref x2, ref y2);
		
		// Fill ellipse with semi-transparent brush
		SolidBrush brush = new SolidBrush( Color.FromArgb( 64, Palette.Light2));
		e.Graphics.FillEllipse( brush, x1, y2, x2 - x1, y1 - y2);
		brush.Dispose();

		// Draw ellipse
		Pen pen = new Pen( Palette.Light2);
		e.Graphics.DrawEllipse( pen, x1, y2, x2 - x1, y1 - y2);
		pen.Dispose();
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using chart paint event.
'&lt;/Info&gt;
Public Class Paint
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 10
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "Series 1"
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "Series 2"
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      c1chart1.Legend.Visible = True
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      'RtfNormal
      ' Add paint handler
      AddHandler c1chart1.Paint, AddressOf Chart_Paint
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.Paint, AddressOf Chart_Paint
   End Sub 'Unload
   
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' Paint event handler
   Private Sub Chart_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs)
      Dim chart As C1.Win.C1Chart.C1Chart = CType(sender, C1.Win.C1Chart.C1Chart)
      Dim x1 As Integer = 0
      Dim y1 As Integer = 0
      Dim x2 As Integer = 0
      Dim y2 As Integer = 0
      
      ' Transform coordinates
      chart.ChartGroups(0).DataCoordToCoord(- 0.75, - 0.75, x1, y1)
      chart.ChartGroups(0).DataCoordToCoord(0.75, 0.75, x2, y2)
      
      ' Fill ellipse with semi-transparent brush
      Dim brush As New SolidBrush(Color.FromArgb(64, Palette.Light2))
      e.Graphics.FillEllipse(brush, x1, y2, x2 - x1, y1 - y2)
      brush.Dispose()
      
      ' Draw ellipse
      Dim pen As New Pen(Palette.Light2)
      e.Graphics.DrawEllipse(pen, x1, y2, x2 - x1, y1 - y2)
      pen.Dispose()
   End Sub 'Chart_Paint
End Class 'Paint '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using chart paint event.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\01.Paint events\02.Paint plot area" ParentName="01.Paint events" Text="Paint plot area">
    <CodeCS>//&lt;Info&gt;
//Shows using chart PaintPlotArea event.
//&lt;/Info&gt;
public class Paint_plot_area: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		c1chart1.Reset();
		
		int n = 10;

		double[] x1 = new double[n];
		double[] x2 = new double[n];
		double[] y1 = new double[n];
		double[] y2 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
			x2[i] = rnd.NextDouble() - 0.5;
			y2[i] = rnd.NextDouble() - 0.5;
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "Series 1";
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light1;
		ds1.SymbolStyle.OutlineColor = Palette.Dark1;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		C1.Win.C1Chart.ChartDataSeries ds2 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "Series 2";
		ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds2.SymbolStyle.Color = Palette.Light2;
		ds2.SymbolStyle.OutlineColor = Palette.Dark2;
		ds2.X.CopyDataIn( x2);
		ds2.Y.CopyDataIn( y2);

		c1chart1.Legend.Visible = true;
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		c1chart1.ChartArea.AxisX.SetMinMax( -1, 1);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		c1chart1.ChartArea.PlotArea.Boxed = true;

		//RtfNormal
		c1chart1.PaintPlotArea += new System.Windows.Forms.PaintEventHandler(Chart_Paint);
//&lt;/CodeSnippet&gt;
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.PaintPlotArea -= new System.Windows.Forms.PaintEventHandler(Chart_Paint);
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// Paint event handler
	Bitmap bm = null;
	private void Chart_Paint(object sender, System.Windows.Forms.PaintEventArgs e)
	{
		// load image from resource
		if( bm == null)
			bm  = new Bitmap(System.Reflection.Assembly.GetExecutingAssembly()
			.GetManifestResourceStream("images.C1Chart.jpg"));

		C1.Win.C1Chart.PlotArea pa = (C1.Win.C1Chart.PlotArea)sender;

		System.Drawing.Rectangle r = new System.Drawing.Rectangle( 0,	0, bm.Width, bm.Height);
		int new_width = (pa.Size.Width * 3) / 4;
		
		if( r.Width &gt; new_width)
		{
			float ratio = (float)new_width / r.Width;
			r.Width = new_width;
			r.Height = (int)( r.Height * ratio);
		}

		System.Drawing.Point pt = new System.Drawing.Point();
		pt.X = pa.Location.X + pa.Size.Width - r.Width;
		pt.Y = pa.Location.Y + pa.Size.Height - r.Height;
		r.Location = pt;

		// draw semi-transparent logo
		System.Drawing.Imaging.ColorMatrix cm = new System.Drawing.Imaging.ColorMatrix();
		cm.Matrix00 = 1.00f;
		cm.Matrix11 = 1.00f;
		cm.Matrix22 = 1.00f;
		cm.Matrix33 = 0.2f;
		cm.Matrix44 = 1.00f; 

		System.Drawing.Imaging.ImageAttributes ia = new System.Drawing.Imaging.ImageAttributes();
		ia.SetColorMatrix( cm);

		e.Graphics.DrawImage( bm, r, 0, 0, bm.Width, bm.Height, System.Drawing.GraphicsUnit.Pixel, ia);
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using chart PaintPlotArea event.
'&lt;/Info&gt;
Public Class Paint_plot_area
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      c1chart1.Reset()
      
      Dim n As Integer = 10
      
      Dim x1(n-1) As Double
      Dim x2(n-1) As Double
      Dim y1(n-1) As Double
      Dim y2(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
         x2(i) = rnd.NextDouble() - 0.5
         y2(i) = rnd.NextDouble() - 0.5
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "Series 1"
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light1
      ds1.SymbolStyle.OutlineColor = Palette.Dark1
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "Series 2"
      ds2.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds2.SymbolStyle.Color = Palette.Light2
      ds2.SymbolStyle.OutlineColor = Palette.Dark2
      ds2.X.CopyDataIn(x2)
      ds2.Y.CopyDataIn(y2)
      
      c1chart1.Legend.Visible = True
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      'RtfNormal
      AddHandler c1chart1.PaintPlotArea, AddressOf Chart_Paint
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.PaintPlotArea, AddressOf Chart_Paint
   End Sub 'Unload
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' Paint event handler
   Private bm As Bitmap = Nothing
   
   Private Sub Chart_Paint(sender As Object, e As System.Windows.Forms.PaintEventArgs)
      ' load image from resource
      If bm Is Nothing Then
         bm = New Bitmap(System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("images.C1Chart.jpg"))
      End If
      
      Dim pa As C1.Win.C1Chart.PlotArea = CType(sender, C1.Win.C1Chart.PlotArea)
      
      Dim r As New System.Drawing.Rectangle(0, 0, bm.Width, bm.Height)
      Dim new_width As Integer = pa.Size.Width * 3 / 4
      
      If r.Width &gt; new_width Then
         Dim ratio As Single = CSng(new_width) / r.Width
         r.Width = new_width
         r.Height = CInt(r.Height * ratio)
      End If
      
      Dim pt As New System.Drawing.Point()
      pt.X = pa.Location.X + pa.Size.Width - r.Width
      pt.Y = pa.Location.Y + pa.Size.Height - r.Height
      r.Location = pt
      
      ' draw semi-transparent logo
      Dim cm As New System.Drawing.Imaging.ColorMatrix()
      cm.Matrix00 = 1F
      cm.Matrix11 = 1F
      cm.Matrix22 = 1F
      cm.Matrix33 = 0.2F
      cm.Matrix44 = 1F
      
      Dim ia As New System.Drawing.Imaging.ImageAttributes()
      ia.SetColorMatrix(cm)
      
      e.Graphics.DrawImage(bm, r, 0, 0, bm.Width, bm.Height, System.Drawing.GraphicsUnit.Pixel, ia)
   End Sub 'Chart_Paint
End Class 'Paint_plot_area '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using chart PaintPlotArea event.
</Info>
  </CodeSample>
  <CodeSample Name="02.Point styles" ParentName="04.Advanced" Text="Point styles" />
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\02.Point styles\01.MinMax" ParentName="02.Point styles" Text="MinMax">
    <CodeCS>//&lt;Info&gt;
//Shows using point styles to mark maximum and minimum data values.
//&lt;/Info&gt;
public class MinMax: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample data		
		int n = 25;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = 2*rnd.NextDouble() - 1;
			y[i] = 2*rnd.NextDouble() - 1;
		}
		
		// Add data series
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.Label = "Series 1";
		ds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds.SymbolStyle.Color = Palette.Light3;
		ds.SymbolStyle.OutlineColor = Palette.Dark3;
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);
			
		c1chart1.Legend.Visible = true;
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		c1chart1.ChartArea.AxisX.SetMinMax( -1, 1);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		c1chart1.ChartArea.PlotArea.Boxed = true;

		//RtfNormal
		// Create point style for y-max
		C1.Win.C1Chart.PointStyle ps = c1chart1.ChartGroups[0].ChartData.PointStylesList.AddNewPointStyle();
		ps.Selection = C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMaxY;
		ps.SeriesIndex = 0;
		ps.SymbolStyle.Color = Palette.Light1;
		ps.SymbolStyle.OutlineColor = Palette.Dark1;
		ps.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ps.Label = "Max";
		ps.LegendEntry = true;

		// Create point style for y-min
		ps = c1chart1.ChartGroups[0].ChartData.PointStylesList.AddNewPointStyle();
		ps.Selection = C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMinY;
		ps.SeriesIndex = 0;
		ps.SymbolStyle.Color = Palette.Light2;
		ps.SymbolStyle.OutlineColor = Palette.Dark2;
		ps.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ps.Label = "Min";
		ps.LegendEntry = true;
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using point styles to mark maximum and minimum data values.
'&lt;/Info&gt;
Public Class MinMax
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data		
      Dim n As Integer = 25
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = 2 * rnd.NextDouble() - 1
         y(i) = 2 * rnd.NextDouble() - 1
      Next i
      
      ' Add data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.Label = "Series 1"
      ds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds.SymbolStyle.Color = Palette.Light3
      ds.SymbolStyle.OutlineColor = Palette.Dark3
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      
      c1chart1.Legend.Visible = True
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      'RtfNormal
      ' Create point style for y-max
      Dim ps As C1.Win.C1Chart.PointStyle = c1chart1.ChartGroups(0).ChartData.PointStylesList.AddNewPointStyle()
      ps.Selection = C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMaxY
      ps.SeriesIndex = 0
      ps.SymbolStyle.Color = Palette.Light1
      ps.SymbolStyle.OutlineColor = Palette.Dark1
      ps.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ps.Label = "Max"
      ps.LegendEntry = True
      
      ' Create point style for y-min
      ps = c1chart1.ChartGroups(0).ChartData.PointStylesList.AddNewPointStyle()
      ps.Selection = C1.Win.C1Chart.PointStyleSelectionEnum.SeriesMinY
      ps.SeriesIndex = 0
      ps.SymbolStyle.Color = Palette.Light2
      ps.SymbolStyle.OutlineColor = Palette.Dark2
      ps.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ps.Label = "Min"
      ps.LegendEntry = True
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'MinMax</CodeVB>
    <Info>Shows using point styles to mark maximum and minimum data values.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\02.Point styles\02.Custom point style" ParentName="02.Point styles" Text="Custom point style">
    <CodeCS>//&lt;Info&gt;
//Shows using custom point styles.
//&lt;/Info&gt;
public class Custom_point_style: ChartSample
{
	C1.Win.C1Chart.C1Chart _c1chart1;

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		_c1chart1 = c1chart1;
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();
		
		// Create sample data
		int n = 100;
		double[] x = new double[n];
		double[] y = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x[i] = i;
			y[i] = Math.Sin( 0.25*i);
		}
		
		C1.Win.C1Chart.ChartDataSeries ds =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.X.CopyDataIn( x);
		ds.Y.CopyDataIn( y);
		ds.LineStyle.Color = Color.Gray;
			
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);
		c1chart1.ChartArea.PlotArea.Boxed = true;

		//RtfNormal
		// Create point style
		C1.Win.C1Chart.PointStyle ps = c1chart1.ChartGroups[0].ChartData.PointStylesList.AddNewPointStyle();
		ps.Selection = C1.Win.C1Chart.PointStyleSelectionEnum.Custom;
		ps.SymbolStyle.Size = 4;
		ps.Select += new C1.Win.C1Chart.PointStyleSelectEventHandler(PointStyle_Select);
//&lt;/CodeSnippet&gt;
	}

//&lt;CodeSnippet&gt;
	//---------------------------------------------------------------------
	// PointStyleSelect event handler
	void PointStyle_Select( object sender, C1.Win.C1Chart.PointStyleSelectEventArgs e)
	{
		// Current y-value
		double yval = Convert.ToDouble(_c1chart1.ChartGroups[0].ChartData[e.SeriesIndex].Y[e.PointIndex]);

		double maxy = _c1chart1.ChartGroups[0].ChartData.MaxY;
		double miny = _c1chart1.ChartGroups[0].ChartData.MinY;

		C1.Win.C1Chart.ChartDataSeries ds = _c1chart1.ChartGroups[0].ChartData[e.SeriesIndex];

		C1.Win.C1Chart.PointStyle ps = (C1.Win.C1Chart.PointStyle)sender;

		// Change color according to y-value
		if( yval&gt;0)
		{
			Color clr = Color.FromArgb( (int)(255 * ( 1 - (maxy -yval) / maxy)), Palette.Dark1);
			ps.SymbolStyle.Color = clr;
		}
		else
		{
			yval = Math.Abs(yval);
			miny = Math.Abs( miny);
			Color clr = Color.FromArgb( (int)(255 * ( 1 - (miny -yval) / miny)), Palette.Dark2);
			ps.SymbolStyle.Color = clr;
		}

		// This hanlder process all data points
		e.Selected = true;
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using custom point styles.
'&lt;/Info&gt;
Public Class Custom_point_style
   Inherits ChartSample
   Private _c1chart1 As C1.Win.C1Chart.C1Chart
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      _c1chart1 = c1chart1
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample data
      Dim n As Integer = 100
      Dim x(n-1) As Double
      Dim y(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x(i) = i
         y(i) = Math.Sin((0.25 * i))
      Next i
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.X.CopyDataIn(x)
      ds.Y.CopyDataIn(y)
      ds.LineStyle.Color = Color.Gray
      
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      'RtfNormal
      ' Create point style
      Dim ps As C1.Win.C1Chart.PointStyle = c1chart1.ChartGroups(0).ChartData.PointStylesList.AddNewPointStyle()
      ps.Selection = C1.Win.C1Chart.PointStyleSelectionEnum.Custom
      ps.SymbolStyle.Size = 4
      AddHandler ps.Select, AddressOf PointStyle_Select
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' PointStyleSelect event handler
   Sub PointStyle_Select(sender As Object, e As C1.Win.C1Chart.PointStyleSelectEventArgs)
      ' Current y-value
      Dim yval As Double = Convert.ToDouble(_c1chart1.ChartGroups(0).ChartData(e.SeriesIndex).Y(e.PointIndex))
      
      Dim maxy As Double = _c1chart1.ChartGroups(0).ChartData.MaxY
      Dim miny As Double = _c1chart1.ChartGroups(0).ChartData.MinY
      
      Dim ds As C1.Win.C1Chart.ChartDataSeries = _c1chart1.ChartGroups(0).ChartData(e.SeriesIndex)
      
      Dim ps As C1.Win.C1Chart.PointStyle = CType(sender, C1.Win.C1Chart.PointStyle)
      
      ' Change color according to y-value
      If yval &gt; 0 Then
         Dim clr As Color = Color.FromArgb(CInt(255 *(1 -(maxy - yval) / maxy)), Palette.Dark1)
         ps.SymbolStyle.Color = clr
      Else
         yval = Math.Abs(yval)
         miny = Math.Abs(miny)
         Dim clr As Color = Color.FromArgb(CInt(255 *(1 -(miny - yval) / miny)), Palette.Dark2)
         ps.SymbolStyle.Color = clr
      End If
      
      ' This hanlder process all data points
      e.Selected = True
   End Sub 'PointStyle_Select
End Class 'Custom_point_style '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using custom point styles.
</Info>
  </CodeSample>
  <CodeSample Name="03.Coordinates conversion" ParentName="04.Advanced" Text="Coordinates conversion" />
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\03.Coordinates conversion\01.DataCoordinates" ParentName="03.Coordinates conversion" Text="DataCoordinates">
    <CodeCS>//&lt;Info&gt;
//Shows using coordinate conversion methods.
//&lt;/Info&gt;
public class DataCoordinates: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.TextBox tb1 = null;

	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				tb1 = new System.Windows.Forms.TextBox();
				tb1.Location = new System.Drawing.Point( 10, 0);
				tb1.Width = 100;
				tb1.ReadOnly = true;
				tb1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center;

                                _controls = new System.Windows.Forms.Control[]{ tb1};
			}

			return _controls;
		}
	}

	public override void Unload( C1.Win.C1Chart.C1Chart c1chart1)
	{
		c1chart1.MouseMove -= new System.Windows.Forms.MouseEventHandler(Chart_MouseMove);
		base.Unload( c1chart1);
	}

	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
		base.Load( c1chart1);
//&lt;CodeSnippet&gt;
		//RtfGray
		c1chart1.Reset();
		
		int n = 20;

		double[] x1 = new double[n];
		double[] y1 = new double[n];
		Random rnd = new Random();
		for( int i=0; i&lt;n; i++)
		{
			x1[i] = 2*(rnd.NextDouble()-0.5);
			y1[i] = 2*(rnd.NextDouble()-0.5);
		}
		
		C1.Win.C1Chart.ChartDataSeries ds1 =
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "Series 1";
		ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		ds1.SymbolStyle.Color = Palette.Light2;
		ds1.SymbolStyle.OutlineColor = Palette.Dark2;
		ds1.X.CopyDataIn( x1);
		ds1.Y.CopyDataIn( y1);
			
		c1chart1.Legend.Visible = true;
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot;

		// Create point style
		C1.Win.C1Chart.PointStyle ps = c1chart1.ChartGroups[0].ChartData.PointStylesList.AddNewPointStyle();
		ps.SymbolStyle.Color = Palette.Light1;
		ps.SymbolStyle.OutlineColor = Palette.Dark1;
		ps.SymbolStyle.Size = 10;
		ps.SeriesIndex = -1;
		ps.PointIndex = -1;

		// Set axis limits
		c1chart1.ChartArea.AxisX.SetMinMax( -1, 1);
		c1chart1.ChartArea.AxisY.SetMinMax( -1, 1);

		// Create frame around plot area
		c1chart1.ChartArea.PlotArea.Boxed = true;

		//RtfNormal
		c1chart1.MouseMove += new System.Windows.Forms.MouseEventHandler(Chart_MouseMove);
//&lt;/CodeSnippet&gt;
	}

//&lt;CodeSnippet&gt;
	// --------------------------------------------------------------------
	// Mouse move event handler
	private void Chart_MouseMove(object sender, System.Windows.Forms.MouseEventArgs e)
	{
		C1.Win.C1Chart.C1Chart chart = (C1.Win.C1Chart.C1Chart)sender;

		// Get plot area rectangle
		System.Drawing.Rectangle r = new Rectangle( chart.ChartArea.PlotArea.Location,
			chart.ChartArea.PlotArea.Size);

		C1.Win.C1Chart.PointStyle ps = c1chart1.ChartGroups[0].ChartData.PointStylesList[0];

		if( r.Contains( e.X, e.Y)) // Inside plot area
		{
			// Set cursor
			chart.Cursor = System.Windows.Forms.Cursors.Cross;

			// Find cursor data coordinates
			double x = 0, y = 0;
			chart.ChartGroups[0].CoordToDataCoord( e.X, e.Y, ref x, ref y);
			tb1.Text = string.Format( "x = {0:0.00}, y = {1:0.00}", x, y);

			// Find the closest data point 
			int si = -1, pi = -1, d = -1;
			chart.ChartGroups[0].CoordToDataIndex( e.X, e.Y,
				C1.Win.C1Chart.CoordinateFocusEnum.XandYCoord, ref si, ref pi, ref d);

			// Highlight the closest point
			ps.SeriesIndex = si;
			ps.PointIndex = pi;
		}
		else
		{
			// Restore cursor
			chart.Cursor = System.Windows.Forms.Cursors.Default;

			// Clear text
			tb1.Text = "";

			// Clear highlighted point
			ps.SeriesIndex = -1;
			ps.PointIndex = -1;
		}
	}
//&lt;/CodeSnippet&gt;
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows using coordinate conversion methods.
'&lt;/Info&gt;
Public Class DataCoordinates
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private tb1 As System.Windows.Forms.TextBox = Nothing
   
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            tb1 = New System.Windows.Forms.TextBox()
            tb1.Location = New System.Drawing.Point(10, 0)
            tb1.Width = 100
            tb1.ReadOnly = True
            tb1.TextAlign = System.Windows.Forms.HorizontalAlignment.Center
            
            _controls = New System.Windows.Forms.Control() {tb1}
         End If
         
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Unload(c1chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1chart1.MouseMove, AddressOf Chart_MouseMove
      MyBase.Unload(c1chart1)
   End Sub 'Unload
   
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1chart1)
      '&lt;CodeSnippet&gt;
      'RtfGray
      c1chart1.Reset()
      
      Dim n As Integer = 20
      
      Dim x1(n-1) As Double
      Dim y1(n-1) As Double
      Dim rnd As New Random()
      Dim i As Integer
      For i = 0 To n - 1
         x1(i) = 2 *(rnd.NextDouble() - 0.5)
         y1(i) = 2 *(rnd.NextDouble() - 0.5)
      Next i
      
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "Series 1"
      ds1.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      ds1.SymbolStyle.Color = Palette.Light2
      ds1.SymbolStyle.OutlineColor = Palette.Dark2
      ds1.X.CopyDataIn(x1)
      ds1.Y.CopyDataIn(y1)
      
      c1chart1.Legend.Visible = True
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.XYPlot
      
      ' Create point style
      Dim ps As C1.Win.C1Chart.PointStyle = c1chart1.ChartGroups(0).ChartData.PointStylesList.AddNewPointStyle()
      ps.SymbolStyle.Color = Palette.Light1
      ps.SymbolStyle.OutlineColor = Palette.Dark1
      ps.SymbolStyle.Size = 10
      ps.SeriesIndex = - 1
      ps.PointIndex = - 1
      
      ' Set axis limits
      c1chart1.ChartArea.AxisX.SetMinMax(- 1, 1)
      c1chart1.ChartArea.AxisY.SetMinMax(- 1, 1)
      
      ' Create frame around plot area
      c1chart1.ChartArea.PlotArea.Boxed = True
      
      'RtfNormal
      AddHandler c1chart1.MouseMove, AddressOf Chart_MouseMove
   End Sub 'Load
    '&lt;/CodeSnippet&gt;
   
   '&lt;CodeSnippet&gt;
   ' --------------------------------------------------------------------
   ' Mouse move event handler
   Private Sub Chart_MouseMove(sender As Object, e As System.Windows.Forms.MouseEventArgs)
      Dim chart As C1.Win.C1Chart.C1Chart = CType(sender, C1.Win.C1Chart.C1Chart)
      
      ' Get plot area rectangle
      Dim r = New Rectangle(chart.ChartArea.PlotArea.Location, chart.ChartArea.PlotArea.Size)
      
      Dim ps As C1.Win.C1Chart.PointStyle = c1chart1.ChartGroups(0).ChartData.PointStylesList(0)
      
      If r.Contains(e.X, e.Y) Then ' Inside plot area
         ' Set cursor
         chart.Cursor = System.Windows.Forms.Cursors.Cross
         
         ' Find cursor data coordinates
         Dim x As Double = 0
         Dim y As Double = 0
         chart.ChartGroups(0).CoordToDataCoord(e.X, e.Y, x, y)
         tb1.Text = String.Format("x = {0:0.00}, y = {1:0.00}", x, y)
         
         ' Find the closest data point 
         Dim si As Integer = - 1
         Dim pi As Integer = - 1
         Dim d As Integer = - 1
         chart.ChartGroups(0).CoordToDataIndex(e.X, e.Y, C1.Win.C1Chart.CoordinateFocusEnum.XandYCoord, si, pi, d)
         
         ' Highlight the closest point
         ps.SeriesIndex = si
         ps.PointIndex = pi
      Else
         ' Restore cursor
         chart.Cursor = System.Windows.Forms.Cursors.Default
         
         ' Clear text
         tb1.Text = ""
         
         ' Clear highlighted point
         ps.SeriesIndex = - 1
         ps.PointIndex = - 1
      End If
   End Sub 'Chart_MouseMove
End Class 'DataCoordinates '&lt;/CodeSnippet&gt;</CodeVB>
    <Info>Shows using coordinate conversion methods.
</Info>
  </CodeSample>
  <CodeSample Name="04.Data binding" ParentName="04.Advanced" Text="Data binding" />
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\04.Data binding\01.Data table" ParentName="04.Data binding" Text="Data table">
    <CodeCS>//&lt;Info&gt;
//Shows chart data binding using simple data table as data source.
//&lt;/Info&gt;
public class Data_table: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();

		// Create sample table
		DataTable dt = new DataTable("dt");
		DataColumn colX = new DataColumn("x",Type.GetType("System.Double"));
		DataColumn colY = new DataColumn("y",Type.GetType("System.Double"));
		dt.Columns.Add(colX);	dt.Columns.Add(colY);

		// Fill table
		DataRow nr;
		for(int i = 0; i &lt;7; i++)
		{
			nr = dt.NewRow();
			nr["x"] = i; nr["y"] = i*i;
			dt.Rows.Add(nr);
		}
		dt.AcceptChanges();

		//RtfNormal
		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds = 
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds.LineStyle.Color = Palette.Dark2;
		ds.SymbolStyle.Color = Palette.Light1;
		ds.SymbolStyle.OutlineColor = Palette.Dark1;

		// Bind to chart
		c1chart1.DataSource = dt;
		ds.X.DataField = "x";
		ds.Y.DataField = "y";
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows chart data binding using simple data table as data source.
'&lt;/Info&gt;
Public Class Data_table
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      
      ' Create sample table
      Dim dt As New DataTable("dt")
      Dim colX As New DataColumn("x", Type.GetType("System.Double"))
      Dim colY As New DataColumn("y", Type.GetType("System.Double"))
      dt.Columns.Add(colX)
      dt.Columns.Add(colY)
      
      ' Fill table
      Dim nr As DataRow
      Dim i As Integer
      For i = 0 To 6
         nr = dt.NewRow()
         nr("x") = i
         nr("y") = i * i
         dt.Rows.Add(nr)
      Next i
      dt.AcceptChanges()
      
      'RtfNormal
      ' Create data series
      Dim ds As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds.LineStyle.Color = Palette.Dark2
      ds.SymbolStyle.Color = Palette.Light1
      ds.SymbolStyle.OutlineColor = Palette.Dark1
      
      ' Bind to chart
      c1chart1.DataSource = dt
      ds.X.DataField = "x"
      ds.Y.DataField = "y"
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'Data_table</CodeVB>
    <Info>Shows chart data binding using simple data table as data source.
</Info>
  </CodeSample>
  <CodeSample Name="..\..\..\CodeSnippets\04.Advanced\04.Data binding\02.NorthWindDB" ParentName="04.Data binding" Text="NorthWindDB">
    <CodeCS>//&lt;Info&gt;
//Shows chart data binding using NorthWind database as data source.
//&lt;/Info&gt;
public class NorthWindDB: ChartSample
{
	public override void Load( C1.Win.C1Chart.C1Chart c1chart1)
	{
//&lt;CodeSnippet&gt;
		//RtfGray
		// Clear previous settings
		c1chart1.Reset();
		System.Data.DataTable dt = null;

		// Connect to database
		try
		{
			string path = System.Environment.SystemDirectory.Substring( 0, 1) + 
				":\\Program Files\\ComponentOne Studio.NET\\common\\nwind.mdb";

			string conn = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + path + ";Mode=Share Deny None;";
			string select = "SELECT CategoryID, ProductName, UnitsInStock, UnitsOnOrder, ReorderLevel FROM Products ORDER BY UnitsInStock DESC";

			System.Data.OleDb.OleDbDataAdapter adapter = 
				new System.Data.OleDb.OleDbDataAdapter( select, conn);

			dt = new System.Data.DataTable();
			adapter.Fill( dt);
		}
		catch (Exception e)
		{
			c1chart1.Header.Visible = true;
			c1chart1.Header.Text = e.ToString();
			c1chart1.Header.Style.ForeColor = Color.Red;
       			return;
		}

		// Create data series
		C1.Win.C1Chart.ChartDataSeries ds1 = 
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds1.Label = "In Stock";
		ds1.FillStyle.Color1 = Palette.Light1;

                C1.Win.C1Chart.ChartDataSeries ds2 = 
			c1chart1.ChartGroups[0].ChartData.SeriesList.AddNewSeries();
		ds2.Label = "On Order";
		ds2.FillStyle.Color1 = Palette.Light2;
		ds2.AutoEnumerate = true;

		//RtfNormal
		c1chart1.DataSource = dt.DefaultView;

		// Bind to chart
		ds1.X.DataField = "ProductName";
		ds1.Y.DataField = "UnitsInStock";
		ds2.Y.DataField = "UnitsOnOrder";

		//RtfGray
		// Set chart type
		c1chart1.ChartGroups[0].ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar;
		c1chart1.ChartGroups[0].Bar.ClusterWidth = 75;
		c1chart1.ChartArea.Inverted = true;

		// Setup appearance
		c1chart1.ChartArea.Margins.SetMargins( 0, 0, 0, 0);

		c1chart1.ChartArea.AxisX.ScrollBar.Visible = true;
		c1chart1.ChartArea.AxisX.ScrollBar.Min = -0.5;
		c1chart1.ChartArea.AxisX.ScrollBar.Max = dt.Rows.Count - 0.5;
		c1chart1.ChartArea.AxisX.ScrollBar.Scale = 0.1;
		c1chart1.ChartArea.AxisX.ScrollBar.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.Flat;

		c1chart1.ChartArea.AxisX.OnTop = true;
		c1chart1.ChartArea.AxisY.OnTop = true;

		c1chart1.Legend.Visible = true;
		c1chart1.Legend.Text = "Units";
//&lt;/CodeSnippet&gt;
	}
}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
'Shows chart data binding using NorthWind database as data source.
'&lt;/Info&gt;
Public Class NorthWindDB
   Inherits ChartSample
   
   Public Overrides Sub Load(c1chart1 As C1.Win.C1Chart.C1Chart)
      '&lt;CodeSnippet&gt;
      'RtfGray
      ' Clear previous settings
      c1chart1.Reset()
      Dim dt As System.Data.DataTable = Nothing
      
      ' Connect to database
      Try
         Dim path As String = System.Environment.SystemDirectory.Substring(0, 1) + ":\Program Files\ComponentOne Studio.NET\common\nwind.mdb"
         
         Dim conn As String = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + path + ";Mode=Share Deny None;"
         Dim [select] As String = "SELECT CategoryID, ProductName, UnitsInStock, UnitsOnOrder, ReorderLevel FROM Products ORDER BY UnitsInStock DESC"
         
         Dim adapter As New System.Data.OleDb.OleDbDataAdapter([select], conn)
         
         dt = New System.Data.DataTable()
         adapter.Fill(dt)
      Catch e As Exception
         c1chart1.Header.Visible = True
         c1chart1.Header.Text = e.ToString()
         c1chart1.Header.Style.ForeColor = Color.Red
         Return
      End Try
      
      ' Create data series
      Dim ds1 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds1.Label = "In Stock"
      ds1.FillStyle.Color1 = Palette.Light1
      
      Dim ds2 As C1.Win.C1Chart.ChartDataSeries = c1chart1.ChartGroups(0).ChartData.SeriesList.AddNewSeries()
      ds2.Label = "On Order"
      ds2.FillStyle.Color1 = Palette.Light2
      ds2.AutoEnumerate = True
      
      'RtfNormal
      c1chart1.DataSource = dt.DefaultView
      
      ' Bind to chart
      ds1.X.DataField = "ProductName"
      ds1.Y.DataField = "UnitsInStock"
      ds2.Y.DataField = "UnitsOnOrder"
      
      'RtfGray
      ' Set chart type
      c1chart1.ChartGroups(0).ChartType = C1.Win.C1Chart.Chart2DTypeEnum.Bar
      c1chart1.ChartGroups(0).Bar.ClusterWidth = 75
      c1chart1.ChartArea.Inverted = True
      
      ' Setup appearance
      c1chart1.ChartArea.Margins.SetMargins(0, 0, 0, 0)
      
      c1chart1.ChartArea.AxisX.ScrollBar.Visible = True
      c1chart1.ChartArea.AxisX.ScrollBar.Min = - 0.5
      c1chart1.ChartArea.AxisX.ScrollBar.Max = dt.Rows.Count - 0.5
      c1chart1.ChartArea.AxisX.ScrollBar.Scale = 0.1
      c1chart1.ChartArea.AxisX.ScrollBar.Appearance = C1.Win.C1Chart.ScrollBarAppearanceEnum.Flat
      
      c1chart1.ChartArea.AxisX.OnTop = True
      c1chart1.ChartArea.AxisY.OnTop = True
      
      c1chart1.Legend.Visible = True
      c1chart1.Legend.Text = "Units"
   End Sub 'Load '&lt;/CodeSnippet&gt;
End Class 'NorthWindDB</CodeVB>
    <Info>Shows chart data binding using NorthWind database as data source.
</Info>
  </CodeSample>
  <CodeSample Name="04.Functions" ParentName="04.Advanced" Text="Functions" />
  <CodeSample Name="..\01.Advanced\02.Functions\05.YFormula" ParentName="04.Functions" Text="YFormula">
    <CodeCS>//&lt;Info&gt;
// Shows the use of Formula type Y-Functions in the chart.
//&lt;/Info&gt;
public class YFormula: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.ComboBox ComboBoxWithFormula = null;
	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 130;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "Append Functions";
				cb1.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.ComboBox cbox1 = new System.Windows.Forms.ComboBox();
				cbox1.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cbox1.Width = 120;

				object [] yfuncs = new object[]
				{
					"Math.Sin(x)", "Math.Cos(x)", "Math.Exp(x)",
					"x+1", "x*x-2*x+1", "x*x*x-3*x*x-3*x+1",
					"BadFunction(x)",
				};
				cbox1.Items.AddRange(yfuncs);
				cbox1.SelectedIndex = 0;
				cbox1.SelectedIndexChanged += new EventHandler(ComboBox_SelectedIndexChanged);
				ComboBoxWithFormula = cbox1;

				_controls = new System.Windows.Forms.Control[]{cb1, cbox1};
			}
			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);
		//c1Chart1.Reset();

//&lt;CodeSnippet&gt;
		// Create chart with YFunctions through code.
		//
		// Although a chart can consist entirely of YFunctions as is demonstrated
		// in this sample, functions typically used to enhance understanding of
		// empirical data added to the chart in the usual manner.
		//
		c1Chart1.Reset();

		// Turn on the legend.
		c1Chart1.Legend.Visible = true;

		// Use the ComboBox handler to specify the YFunction to be charted.
		ComboBox_SelectedIndexChanged(ComboBoxWithFormula, new System.EventArgs());

//&lt;/CodeSnippet&gt;
	}

//&lt;CodeSnippet&gt;

	//---------------------------------------------------------------------
	// handler for check boxes
	private void CheckBox_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		if(cb.Text == "Append Functions")
		{
			AppendFunctions = cb.Checked;
		}
	}


	bool AppendFunctions = false;

	// handler for combo box
	private void ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		string functionText = (string)cb.SelectedItem;

		// The text of the formula, placed in functionText above, is dynmaically
		// compiled by the chart YFunction object and executed upon demand for each
		// point of the function.  In this case, the formula text is the text of
		// each entry of the combo box.

		Color [] clrs = new Color []
			{ Color.Red, Color.Orange, Color.Green, Color.Blue, Color.Brown, Color.Violet, Color.Black};

		Color selectedColor = clrs[cb.SelectedIndex % clrs.Length];

		C1.Win.C1Chart.FunctionsCollection funcs = c1chart1.ChartGroups.Group0.ChartData.FunctionsList;
		if(!AppendFunctions) funcs.Clear();	// remove existing functions

		// create the new function and add it to the functions collection.
		C1.Win.C1Chart.YFunction func = new C1.Win.C1Chart.YFunction();
		func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp;
		func.CodeText = functionText;
		func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Formula;
		func.MaxX = 2.0 * Math.PI;
		func.MinX = 0;
		func.Label = functionText;
		func.LegendEntry = true;
		func.LineStyle.Color = selectedColor;

		// use as many x values as there are pixels
		func.PlotNumPoints = c1chart1.ChartArea.PlotArea.Size.Width;

		// if an error occurs compiling the code, pop up a message box.
		if(!func.CodeValid)
		{
			string [] errs = func.CodeErrors;

			string msg = "Formula \"" + functionText + "\" does not compile correctly.\\r\\n";
			foreach(string err in errs) msg += "\\r\\n" + err;

			System.Windows.Forms.MessageBox.Show(msg);
			func.Dispose();
			return;
		}
		func.Visible = true;
		funcs.Add(func);
	}

//&lt;/CodeSnippet&gt;
}

</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows the use of Formula type Y-Functions in the chart.
'&lt;/Info&gt;
Public Class YFormula
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private ComboBoxWithFormula As System.Windows.Forms.ComboBox = Nothing
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 130
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "Append Functions"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cbox1 As New System.Windows.Forms.ComboBox()
            cbox1.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cbox1.Width = 120
            
            Dim yfuncs() As Object = {"Math.Sin(x)", "Math.Cos(x)", "Math.Exp(x)", "x+1", "x*x-2*x+1", "x*x*x-3*x*x-3*x+1", "BadFunction(x)"}
            cbox1.Items.AddRange(yfuncs)
            cbox1.SelectedIndex = 0
            AddHandler cbox1.SelectedIndexChanged, AddressOf ComboBox_SelectedIndexChanged
            ComboBoxWithFormula = cbox1
            
            _controls = New System.Windows.Forms.Control() {cb1, cbox1}
         End If
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      'c1Chart1.Reset();
      '&lt;CodeSnippet&gt;
      ' Create chart with YFunctions through code.
      '
      ' Although a chart can consist entirely of YFunctions as is demonstrated
      ' in this sample, functions typically used to enhance understanding of
      ' empirical data added to the chart in the usual manner.
      '
      c1Chart1.Reset()
      
      ' Turn on the legend.
      c1Chart1.Legend.Visible = True
      
      ' Use the ComboBox handler to specify the YFunction to be charted.
      ComboBox_SelectedIndexChanged(ComboBoxWithFormula, New System.EventArgs())
   End Sub 'Load
    
   '&lt;/CodeSnippet&gt;
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' handler for check boxes
   Private Sub CheckBox_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      If cb.Text = "Append Functions" Then
         AppendFunctions = cb.Checked
      End If
   End Sub 'CheckBox_CheckChanged
   
   
   Private AppendFunctions As Boolean = False
   
   
   ' handler for combo box
   Private Sub ComboBox_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim functionText As String = CStr(cb.SelectedItem)
      
      ' The text of the formula, placed in functionText above, is dynmaically
      ' compiled by the chart YFunction object and executed upon demand for each
      ' point of the function.  In this case, the formula text is the text of
      ' each entry of the combo box.
      Dim clrs() As Color = {Color.Red, Color.Orange, Color.Green, Color.Blue, Color.Brown, Color.Violet, Color.Black}
      
      Dim selectedColor As Color = clrs((cb.SelectedIndex Mod clrs.Length))
      
      Dim funcs As C1.Win.C1Chart.FunctionsCollection = c1chart1.ChartGroups.Group0.ChartData.FunctionsList
      If Not AppendFunctions Then
         funcs.Clear() ' remove existing functions
      End If
      ' create the new function and add it to the functions collection.
      Dim func As New C1.Win.C1Chart.YFunction()
      func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.VB
      func.CodeText = functionText
      func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Formula
      func.MaxX = 2.0 * Math.PI
      func.MinX = 0
      func.Label = functionText
      func.LegendEntry = True
      func.LineStyle.Color = selectedColor
      
      ' use as many x values as there are pixels
      func.PlotNumPoints = c1chart1.ChartArea.PlotArea.Size.Width
      
      ' if an error occurs compiling the code, pop up a message box.
      If Not func.CodeValid Then
         Dim errs As String() = func.CodeErrors
         
         Dim msg As String = "Formula """ + functionText + """ does not compile correctly." + ControlChars.CrLf
         Dim err As String
         For Each err In  errs
            msg += ControlChars.CrLf + err
         Next err 
         System.Windows.Forms.MessageBox.Show(msg)
         func.Dispose()
         Return
      End If
      func.Visible = True
      funcs.Add(func)
   End Sub 'ComboBox_SelectedIndexChanged
End Class 'NewSample 
'&lt;/CodeSnippet&gt;
</CodeVB>
    <Info> Shows the use of Formula type Y-Functions in the chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\01.Advanced\02.Functions\05.YMethod" ParentName="04.Functions" Text="YMethod">
    <CodeCS>//&lt;Info&gt;
// Shows the use of Method type Y-Functions in the chart.
//&lt;/Info&gt;
public class YMethod: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	System.Windows.Forms.ComboBox ComboBoxWithFormula = null;
	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.CheckBox cb1 = new System.Windows.Forms.CheckBox();
				cb1.Location = new System.Drawing.Point( 10, 0);
				cb1.Width = 130;
				cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				cb1.Text = "Append Functions";
				cb1.CheckedChanged += new EventHandler(CheckBox_CheckChanged);

				System.Windows.Forms.ComboBox cbox1 = new System.Windows.Forms.ComboBox();
				cbox1.Location = new System.Drawing.Point( cb1.Right + 10, 0);
				cbox1.Width = 120;

				object [] yfuncs = (object[])Array.CreateInstance(typeof(object), FunctionNames.Length);
				for(int i=0; i &lt; yfuncs.Length; i++)
					yfuncs[i] = FunctionNames[i];

				cbox1.Items.AddRange(yfuncs);
				cbox1.SelectedIndex = 0;
				cbox1.SelectedIndexChanged += new EventHandler(ComboBox_SelectedIndexChanged);
				ComboBoxWithFormula = cbox1;

				_controls = new System.Windows.Forms.Control[]{cb1, cbox1};
			}
			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);
		//c1Chart1.Reset();

//&lt;CodeSnippet&gt;
		// Create chart with YFunctions through code.
		//
		// Although a chart can consist entirely of YFunctions as is demonstrated
		// in this sample, functions typically used to enhance understanding of
		// empirical data added to the chart in the usual manner.
		//
		c1Chart1.Reset();

		// Turn on the legend.
		c1Chart1.Legend.Visible = true;

		// Use the ComboBox handler to specify the YFunction to be charted.
		ComboBox_SelectedIndexChanged(ComboBoxWithFormula, new System.EventArgs());

//&lt;/CodeSnippet&gt;
	}

//&lt;CodeSnippet&gt;

	//---------------------------------------------------------------------
	// handler for check boxes
	private void CheckBox_CheckChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.CheckBox cb = (System.Windows.Forms.CheckBox)sender;
		if(cb.Text == "Append Functions")
		{
			AppendFunctions = cb.Checked;
		}
	}


	bool AppendFunctions = false;

	string [] FunctionNames = new string[]
		{
			"Delta(x-3)",
			"Factorial(x)",
			"CircleArea(r)",
			"CirclePerimeter(r)",
			"BadFunction(x)"
		};

	// handler for combo box
	private void ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		string functionText = "return BadFunction(x);";

		// The text of the method, placed in the function CodeText property, is
		// wrapped with a function definition, then dynamically compiled by the chart
		// YFunction object and executed upon demand for each point of the function.
		//
		// In this case, the function text is the text defined for each each entry below.
		// Note that the text must indicate a return value for all paths.

		switch(cb.Text)
		{
			case "Delta(x-3)":
				functionText =
					"if(x &lt; 3)	" +
					"  return 0;	" +
					"else			" +
					"  return 1;	";
				break;

			case "Factorial(x)":
				functionText =
					"int ix = (int)Math.Floor(x);	" +
					"if(ix &lt; 1) return 1;		" +
					"int prod = 1;					" +
					"while(ix &gt; 1)				" +
					"{								" +
					"  prod *= ix;					" +
					"  ix--;						" +
					"}								" +
					"return prod;					";
				break;

			case "CircleArea(r)":
				functionText = "return Math.PI * x * x;";
				break;
			case "CirclePerimeter(r)":
				functionText = "return Math.PI * 2.0 * x;";
				break;

			case "BadFunction(x)":
			default:
				break;
		}

		Color [] clrs = new Color []
			{
				Color.Red, Color.Orange, Color.Green, Color.Blue,
				Color.Brown, Color.Violet, Color.Black
			};

		Color selectedColor = clrs[cb.SelectedIndex % clrs.Length];

		C1.Win.C1Chart.FunctionsCollection funcs = c1chart1.ChartGroups.Group0.ChartData.FunctionsList;
		if(!AppendFunctions) funcs.Clear();	// remove existing functions

		// create the new function and add it to the functions collection.
		C1.Win.C1Chart.YFunction func = new C1.Win.C1Chart.YFunction();
		func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp;
		func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Method;

		// Y Functions of type Method use code text that returns the Y
		// values as would be returned from a function.
		func.CodeText = functionText;

		func.MaxX = 2.0 * Math.PI;
		func.MinX = 0;
		func.Label = cb.Text;
		func.LegendEntry = true;
		func.LineStyle.Color = selectedColor;

		// use as many x values as there are pixels
		func.PlotNumPoints = c1chart1.ChartArea.PlotArea.Size.Width;

		// if an error occurs compiling the code, pop up a message box.
		if(!func.CodeValid)
		{
			string [] errs = func.CodeErrors;

			string msg = "Formula \"" + functionText + "\" does not compile correctly.\\r\\n";
			foreach(string err in errs) msg += "\\r\\n" + err;

			System.Windows.Forms.MessageBox.Show(msg);

			// since there is an error, return from this event without
			// adding the new function to the function collection.
			func.Dispose();
			return;
		}
		func.Visible = true;
		funcs.Add(func);
	}

//&lt;/CodeSnippet&gt;
}

</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows the use of Method type Y-Functions in the chart.
'&lt;/Info&gt;
Public Class YMethod
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   Private ComboBoxWithFormula As System.Windows.Forms.ComboBox = Nothing
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim cb1 As New System.Windows.Forms.CheckBox()
            cb1.Location = New System.Drawing.Point(10, 0)
            cb1.Width = 130
            cb1.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            cb1.Text = "Append Functions"
            AddHandler cb1.CheckedChanged, AddressOf CheckBox_CheckChanged
            
            Dim cbox1 As New System.Windows.Forms.ComboBox()
            cbox1.Location = New System.Drawing.Point(cb1.Right + 10, 0)
            cbox1.Width = 120
            
            Dim yfuncs As Object() = CType(Array.CreateInstance(GetType(Object), FunctionNames.Length), Object())
            Dim i As Integer
            For i = 0 To yfuncs.Length - 1
               yfuncs(i) = FunctionNames(i)
            Next i 
            cbox1.Items.AddRange(yfuncs)
            cbox1.SelectedIndex = 0
            AddHandler cbox1.SelectedIndexChanged, AddressOf ComboBox_SelectedIndexChanged
            ComboBoxWithFormula = cbox1
            
            _controls = New System.Windows.Forms.Control() {cb1, cbox1}
         End If
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      'c1Chart1.Reset();
      '&lt;CodeSnippet&gt;
      ' Create chart with YFunctions through code.
      '
      ' Although a chart can consist entirely of YFunctions as is demonstrated
      ' in this sample, functions typically used to enhance understanding of
      ' empirical data added to the chart in the usual manner.
      '
      c1Chart1.Reset()
      
      ' Turn on the legend.
      c1Chart1.Legend.Visible = True
      
      ' Use the ComboBox handler to specify the YFunction to be charted.
      ComboBox_SelectedIndexChanged(ComboBoxWithFormula, New System.EventArgs())
   End Sub 'Load
    
   '&lt;/CodeSnippet&gt;
   
   '&lt;CodeSnippet&gt;
   '---------------------------------------------------------------------
   ' handler for check boxes
   Private Sub CheckBox_CheckChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.CheckBox = CType(sender, System.Windows.Forms.CheckBox)
      If cb.Text = "Append Functions" Then
         AppendFunctions = cb.Checked
      End If
   End Sub 'CheckBox_CheckChanged
   
   
   Private AppendFunctions As Boolean = False
   
   Private FunctionNames() As String = {"Delta(x-3)", "Factorial(x)", "CircleArea(r)", "CirclePerimeter(r)", "BadFunction(x)"}
   
   
   ' handler for combo box
   Private Sub ComboBox_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim functionText As String = "Return BadFunction(x)"
      
      ' The text of the method, placed in the function CodeText property, is
      ' wrapped with a function definition, then dynamically compiled by the chart
      ' YFunction object and executed upon demand for each point of the function.
      '
      ' In this case, the function text is the text defined for each each entry below.
      ' Note that the text must indicate a return value for all paths.
      Select Case cb.Text
         Case "Delta(x-3)"
            functionText = _
		"If x &lt; 3 Then" + ControlChars.CrLf + _
		"    Return 0" + ControlChars.CrLf + _
		"Else" + vbCrLf + _
		"    Return 1" + ControlChars.CrLf + _
		"End If" + vbCrLf
         
         Case "Factorial(x)"
            functionText = _
		"Dim ix As Integer = Math.Floor(x)" + ControlChars.CrLf + _
		"If ix &lt; 1 Then Return 1" + ControlChars.CrLf + _
		"Dim prod As Integer = 1" + ControlChars.CrLf + _
		"While (ix &gt; 1)" + ControlChars.CrLf + _
		"    prod *= ix" + ControlChars.CrLf + _
		"    ix -= 1" + ControlChars.CrLf + _
		"End While" + ControlChars.CrLf + _
		"Return prod" + ControlChars.CrLf
         
         Case "CircleArea(r)"
            functionText = "Return Math.PI * x * x" + ControlChars.CrLf

         Case "CirclePerimeter(r)"
            functionText = "Return Math.PI * 2.0 * x" + ControlChars.CrLf
         
         Case "BadFunction(x)", Else
      End Select
      
      Dim clrs() As Color = {Color.Red, Color.Orange, Color.Green, Color.Blue, Color.Brown, Color.Violet, Color.Black}
      
      Dim selectedColor As Color = clrs((cb.SelectedIndex Mod clrs.Length))
      
      Dim funcs As C1.Win.C1Chart.FunctionsCollection = c1chart1.ChartGroups.Group0.ChartData.FunctionsList
      If Not AppendFunctions Then
         funcs.Clear() ' remove existing functions
      End If
      ' create the new function and add it to the functions collection.
      Dim func As New C1.Win.C1Chart.YFunction()
      func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.VB
      func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Method
      
      ' Y Functions of type Method use code text that returns the Y
      ' values as would be returned from a function.
      func.CodeText = functionText
      
      func.MaxX = 2.0 * Math.PI
      func.MinX = 0
      func.Label = cb.Text
      func.LegendEntry = True
      func.LineStyle.Color = selectedColor
      
      ' use as many x values as there are pixels
      func.PlotNumPoints = c1chart1.ChartArea.PlotArea.Size.Width
      
      ' if an error occurs compiling the code, pop up a message box.
      If Not func.CodeValid Then
         Dim errs As String() = func.CodeErrors
         
         Dim msg As String = "Formula """ + functionText + """ does not compile correctly." + ControlChars.CrLf
			
         Dim err As String
         For Each err In  errs
            msg += ControlChars.CrLf + err
         Next err 
         System.Windows.Forms.MessageBox.Show(msg)
         
         ' since there is an error, return from this event without
         ' adding the new function to the function collection.
         func.Dispose()
         Return
      End If
      func.Visible = True
      funcs.Add(func)
   End Sub 'ComboBox_SelectedIndexChanged
End Class 'NewSample 
'&lt;/CodeSnippet&gt;
</CodeVB>
    <Info> Shows the use of Method type Y-Functions in the chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\01.Advanced\02.Functions\05.YUnit" ParentName="04.Functions" Text="YUnit">
    <CodeCS>//&lt;Info&gt;
// Shows the use of Unit type Y-Functions in the chart.
//&lt;/Info&gt;
public class YUnit: ChartSample
{
	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);

//&lt;CodeSnippet&gt;
		// Create chart with YFunctions through code.
		//
		// Although a chart can consist entirely of YFunctions as is demonstrated
		// in this sample, functions typically used to enhance understanding of
		// empirical data added to the chart in the usual manner.
		//
		c1Chart1.Reset();
		c1Chart1.Repaint = false;		// turn off paint operations

		c1Chart1.Header.Text = "Area between a circle of a given\\r\\n" +
			"diameter and a circumscribing square.";

		c1Chart1.ChartArea.AxisX.Text = "Circle Diameter";
		c1Chart1.ChartArea.AxisY.Text = "Circle Area";

		C1.Win.C1Chart.FunctionsCollection funcs = c1Chart1.ChartGroups.Group0.ChartData.FunctionsList;

		// create the new function and add it to the functions collection.
		C1.Win.C1Chart.YFunction func = new C1.Win.C1Chart.YFunction();
		func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp;
		func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Unit;

		// A YFunction of type Unit, allows you to create an entire compile
		// unit with multiple functions and classes necessary to obtain a return
		// value.  The Unit must have a namespace of UserFunction, a Calculator
		// class which derives from ISimpleFunction, and a public function named
		// Calculate which returns a double, and takes a single double parameter.

		func.CodeText =
			"namespace UserFunction" +
			"{" +
			"  class Calculator : ISimpleFunction" +
			"  {" +
			"    public double Calculate(double x)" +
			"    {" +
			"       return SquareArea(x) - CircleArea(x/2.0);" +
			"    }" +
			"    public double CircleArea(double r)" +
			"    {" +
			"       return System.Math.PI * r * r;" +
			"    }" +
			"    public double SquareArea(double x)" +
			"    {" +
			"       return x * x;" +
			"    }" +
			"  }" +
			"}";
			
		func.MaxX = 10;
		func.MinX = 2;
		func.LineStyle.Color = Color.Blue;

		// use as many x values as there are pixels
		func.PlotNumPoints = c1Chart1.ChartArea.PlotArea.Size.Width;

		// if an error occurs compiling the code, pop up a message box.
		if(!func.CodeValid)
		{
			string [] errs = func.CodeErrors;

			string msg = "Unit does not compile correctly.\\r\\n";
			if(errs != null)
				foreach(string err in errs) msg += "\\r\\n" + err;

			System.Windows.Forms.MessageBox.Show(msg);

			// since there is an error, return from this event without
			// adding the new function to the function collection.
			func.Dispose();
			return;
		}
		func.Visible = true;
		funcs.Add(func);

		c1Chart1.PaintPlotArea += new System.Windows.Forms.PaintEventHandler(DrawSample);
		c1Chart1.Repaint = true;		// restore paint operations

//&lt;/CodeSnippet&gt;
	}

	public override void Unload(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		c1Chart1.PaintPlotArea -= new System.Windows.Forms.PaintEventHandler(DrawSample);
	}

//&lt;CodeSnippet&gt;

	// Chart PaintPlotArea Event Handler
	private void DrawSample(object sender, System.Windows.Forms.PaintEventArgs e)
	{
		Rectangle r = e.ClipRectangle;
		r.X += r.Width/8;
		r.Y += r.Height/8;
		if(r.Width &gt; r.Height)
		{
			r.Height /= 2;
			r.Width = r.Height;
		}
		else
		{
			r.Width /= 2;
			r.Height = r.Width;
		}

		// save the existing clip region.
		System.Drawing.Region regSave = e.Graphics.Clip;

		// create a region of the circle area and exclude it from
		// the graphics clipping region.  This forms a hole.
		System.Drawing.Drawing2D.GraphicsPath gp = new System.Drawing.Drawing2D.GraphicsPath();
		gp.AddEllipse(r);

		System.Drawing.Region reg = new System.Drawing.Region(gp);
		e.Graphics.ExcludeClip(reg);
		reg.Dispose();
		gp.Dispose();

		// draw the rectangle.
		e.Graphics.FillRectangle(System.Drawing.Brushes.SteelBlue, r);

		// restore the clipping area.
		e.Graphics.Clip = regSave;
		regSave.Dispose();
	}

//&lt;/CodeSnippet&gt;
}

</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows the use of Unit type Y-Functions in the chart.
'&lt;/Info&gt;
Public Class YUnit
   Inherits ChartSample
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      
      '&lt;CodeSnippet&gt;
      ' Create chart with YFunctions through code.
      '
      ' Although a chart can consist entirely of YFunctions as is demonstrated
      ' in this sample, functions typically used to enhance understanding of
      ' empirical data added to the chart in the usual manner.
      '
      c1Chart1.Reset()
      c1Chart1.Repaint = False ' turn off paint operations
      c1Chart1.Header.Text = "Area between a circle of a given" + _
		ControlChars.Cr + ControlChars.Lf + "diameter and a circumscribing square."

      c1Chart1.ChartArea.AxisX.Text = "Circle Diameter"
      c1Chart1.ChartArea.AxisY.Text = "Circle Area"
      
      Dim funcs As C1.Win.C1Chart.FunctionsCollection = c1Chart1.ChartGroups.Group0.ChartData.FunctionsList
      
      ' create the new function and add it to the functions collection.
      Dim func As New C1.Win.C1Chart.YFunction()
      func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.VB
      func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Unit
      
      ' A YFunction of type Unit, allows you to create an entire compile
      ' unit with multiple functions and classes necessary to obtain a return
      ' value.  The Unit must have a namespace of UserFunction, a Calculator
      ' class which derives from ISimpleFunction, and a public function named
      ' Calculate which returns a double, and takes a single double parameter.
      func.CodeText = _
		"Namespace UserFunction" + ControlChars.CrLf + _
		"  Class Calculator" + ControlChars.CrLf + _
		"    Implements ISimpleFunction" + ControlChars.CrLf + _
		"    Public Function Calculate(x As Double) As Double _" + ControlChars.CrLf + _
		"      Implements ISimpleFunction.Calculate" + ControlChars.CrLf + _
		"      Return SquareArea(x) - CircleArea(x/2)" + ControlChars.CrLf + _
		"    End Function" + ControlChars.CrLf + _
		"    Public Function CircleArea(r As Double) As Double" + ControlChars.CrLf + _
		"      Return System.Math.PI * r * r" + ControlChars.CrLf + _
		"    End Function" + ControlChars.CrLf + _
		"    Public Function SquareArea(x As Double) As Double" + ControlChars.CrLf + _
		"      Return x * x" + ControlChars.CrLf + _
		"    End Function" + ControlChars.CrLf + _
		"  End Class" + ControlChars.CrLf + _
		"End Namespace" + ControlChars.CrLf
      
      func.MaxX = 10
      func.MinX = 2
      func.LineStyle.Color = Color.Blue
      
      ' use as many x values as there are pixels
      func.PlotNumPoints = c1Chart1.ChartArea.PlotArea.Size.Width
      
      ' if an error occurs compiling the code, pop up a message box.
      If Not func.CodeValid Then
         Dim errs As String() = func.CodeErrors
         
         Dim msg As String = "Unit does not compile correctly." + ControlChars.CrLf
         If Not (errs Is Nothing) Then
            Dim err As String
            For Each err In  errs
               msg += ControlChars.CrLf + err
            Next err 
         End If
         System.Windows.Forms.MessageBox.Show(msg)
         
         ' since there is an error, return from this event without
         ' adding the new function to the function collection.
         func.Dispose()
         Return
      End If
      func.Visible = True
      funcs.Add(func)
      
      AddHandler c1Chart1.PaintPlotArea, AddressOf DrawSample
      c1Chart1.Repaint = True ' restore paint operations
   End Sub 'Load
   
   '&lt;/CodeSnippet&gt;
   
   Public Overrides Sub Unload(c1Chart1 As C1.Win.C1Chart.C1Chart)
      RemoveHandler c1Chart1.PaintPlotArea, AddressOf DrawSample
   End Sub 'Unload   
   
   '&lt;CodeSnippet&gt;
   ' Chart PaintPlotArea Event Handler
   Private Sub DrawSample(sender As Object, e As System.Windows.Forms.PaintEventArgs)
      Dim r As Rectangle = e.ClipRectangle
      r.X += r.Width / 8
      r.Y += r.Height / 8
      If r.Width &gt; r.Height Then
        r.Height /= 2
        r.Width = r.Height
      Else
        r.Width /= 2
        r.Height = r.Width
      EndIf
      
      ' save the existing clip region.
      Dim regSave As System.Drawing.Region = e.Graphics.Clip
      
      ' create a region of the circle area and exclude it from
      ' the graphics clipping region.  This forms a hole.
      Dim gp As New System.Drawing.Drawing2D.GraphicsPath()
      gp.AddEllipse(r)
      
      Dim reg As New System.Drawing.Region(gp)
      e.Graphics.ExcludeClip(reg)
      reg.Dispose()
      gp.Dispose()
      
      ' draw the rectangle.
      e.Graphics.FillRectangle(System.Drawing.Brushes.SteelBlue, r)
      
      ' restore the clipping area.
      e.Graphics.Clip = regSave
      regSave.Dispose()
   End Sub 'DrawSample
End Class 'NewSample 
'&lt;/CodeSnippet&gt;
</CodeVB>
    <Info> Shows the use of Unit type Y-Functions in the chart.
</Info>
  </CodeSample>
  <CodeSample Name="..\01.Advanced\02.Functions\05.ParaFormula" ParentName="04.Functions" Text="ParaFormula">
    <CodeCS>//&lt;Info&gt;
// Shows the use of Formula type ParametricFunctions in the chart.
//&lt;/Info&gt;
public class ParaFormula: ChartSample
{
	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);

//&lt;CodeSnippet&gt;
		// Create chart with ParametricFunctions through code.
		//
		// Although a chart can consist entirely of ParametricFunctions as is
		// demonstrated in this sample, functions are typically used to enhance
		// understanding of empirical data added to the chart in the usual manner.
		//
		c1Chart1.Reset();

		c1Chart1.Header.Text =
			"4 Leaf Rose\\r\\n\\r\\n" +
			"x = sin(2*t)*sin(t)\\r\\n" +
			"y = sin(2*t)*cos(t)";

		C1.Win.C1Chart.FunctionsCollection funcs = c1Chart1.ChartGroups.Group0.ChartData.FunctionsList;

		// create the new function and add it to the functions collection.
		C1.Win.C1Chart.ParametricFunction func = new C1.Win.C1Chart.ParametricFunction();
		func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp;
		func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Formula;

		// Like YFunctions, ParametricFunctions may be of 3 types, including
		// Formula, Method and Unit.  The simplest, Formula, is demonstrated
		// here.  In this case, each of the X and Y values must be defined as
		// a function of an independent variable, t.

		func.CodeTextX = "Math.Sin(2*t) * Math.Sin(t)";
		func.CodeTextY = "Math.Sin(2*t) * Math.Cos(t)";
			
		func.MaxT = Math.PI * 2;
		func.MinT = 0;
		func.LineStyle.Color = Color.Red;

		// use as many x values as there are pixels
		func.PlotNumPoints = c1Chart1.ChartArea.PlotArea.Size.Width;

		// if an error occurs compiling the code, pop up a message box.
		if(!func.CodeValid)
		{
			string [] errs = func.CodeErrors;

			string msg = "Unit does not compile correctly.\\r\\n";
			if(errs != null)
				foreach(string err in errs) msg += "\\r\\n" + err;

			System.Windows.Forms.MessageBox.Show(msg);

			// since there is an error, return from this event without
			// adding the new function to the function collection.
			func.Dispose();
			return;
		}
		func.Visible = true;
		funcs.Add(func);

//&lt;/CodeSnippet&gt;
	}
}

</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows the use of Formula type ParametricFunctions in the chart.
'&lt;/Info&gt;
Public Class ParaFormula
   Inherits ChartSample
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      
      '&lt;CodeSnippet&gt;
      ' Create chart with ParametricFunctions through code.
      '
      ' Although a chart can consist entirely of ParametricFunctions as is
      ' demonstrated in this sample, functions are typically used to enhance
      ' understanding of empirical data added to the chart in the usual manner.
      '
      c1Chart1.Reset()
      
      c1Chart1.Header.Text = "4 Leaf Rose" + ControlChars.CrLf + _
		ControlChars.CrLf + "x = sin(2*t)*sin(t)" + _
		ControlChars.CrLf + "y = sin(2*t)*cos(t)"
      
      Dim funcs As C1.Win.C1Chart.FunctionsCollection = c1Chart1.ChartGroups.Group0.ChartData.FunctionsList
      
      ' create the new function and add it to the functions collection.
      Dim func As New C1.Win.C1Chart.ParametricFunction()
      func.CodeLanguage = C1.Win.C1Chart.FunctionCodeLanguageEnum.CSharp
      func.CodeType = C1.Win.C1Chart.FunctionCodeTypeEnum.Formula
      
      ' Like YFunctions, ParametricFunctions may be of 3 types, including
      ' Formula, Method and Unit.  The simplest, Formula, is demonstrated
      ' here.  In this case, each of the X and Y values must be defined as
      ' a function of an independent variable, t.
      func.CodeTextX = "Math.Sin(2*t) * Math.Sin(t)"
      func.CodeTextY = "Math.Sin(2*t) * Math.Cos(t)"
      
      func.MaxT = Math.PI * 2
      func.MinT = 0
      func.LineStyle.Color = Color.Red
      
      ' use as many x values as there are pixels
      func.PlotNumPoints = c1Chart1.ChartArea.PlotArea.Size.Width
      
      ' if an error occurs compiling the code, pop up a message box.
      If Not func.CodeValid Then
         Dim errs As String() = func.CodeErrors
         
         Dim msg As String = "Unit does not compile correctly." + ControlChars.CrLf
         If Not (errs Is Nothing) Then
            Dim err As String
            For Each err In  errs
               msg += ControlChars.CrLf + err
            Next err 
         End If
         System.Windows.Forms.MessageBox.Show(msg)
         
         ' since there is an error, return from this event without
         ' adding the new function to the function collection.
         func.Dispose()
         Return
      End If
      func.Visible = True
      funcs.Add(func)
   End Sub 'Load 
End Class 'NewSample '&lt;/CodeSnippet&gt;
</CodeVB>
    <Info> Shows the use of Formula type ParametricFunctions in the chart.
</Info>
  </CodeSample>
  <CodeSample Name="04.Trendlines" ParentName="04.Advanced" Text="Trendlines" />
  <CodeSample Name="..\01.Advanced\02.Trendlines\05.Polynomial" ParentName="04.Trendlines" Text="Polynomial">
    <CodeCS>//&lt;Info&gt;
// Shows use of Trend functions in the chart.
//&lt;/Info&gt;
public class Polynomial: ChartSample
{
	System.Windows.Forms.Control[] _controls = null;
	protected override System.Windows.Forms.Control[] Controls
	{
		get
		{
			if( _controls == null)
			{
				System.Windows.Forms.Label lab = new System.Windows.Forms.Label();
				lab.Location = new System.Drawing.Point(10, 0);
				lab.Width = 88;
				lab.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
				lab.Text = "Polynomial Type";

				System.Windows.Forms.ComboBox cb1 = new System.Windows.Forms.ComboBox();
				cb1.Location = new System.Drawing.Point( lab.Right + 2, 0);
				cb1.Width = 100;
				cb1.BackColor = System.Drawing.SystemColors.Control;
				cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
				cb1.Items.AddRange(new object[] {"Linear","Quadratic","Cubic","4th-order","5th-order"});
				cb1.Text = "Linear";
				cb1.SelectedIndexChanged += new EventHandler(ComboBox_SelectedIndexChanged);

				System.Windows.Forms.Button btnRegen = new System.Windows.Forms.Button();
				btnRegen.Location = new System.Drawing.Point(cb1.Right + 20, 0);
				btnRegen.Width = 160;
				btnRegen.Text = "Generate New Data";
				btnRegen.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
				btnRegen.Click += new EventHandler(Button_Clicked);

				_controls = new System.Windows.Forms.Control[]{lab, cb1, btnRegen};
			}
			return _controls;
		}
	}

	public override void Load(C1.Win.C1Chart.C1Chart c1Chart1)
	{
		base.Load(c1Chart1);
		c1Chart1.Reset();

//&lt;CodeSnippet&gt;

		// Show a legend
		c1Chart1.Legend.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid;
		c1Chart1.Legend.Orientation = C1.Win.C1Chart.LegendOrientationEnum.Horizontal;
		c1Chart1.Legend.Compass = C1.Win.C1Chart.CompassEnum.South;
		c1Chart1.Legend.Visible = true;

		// Get the ChartData
		C1.Win.C1Chart.ChartData cdata = c1Chart1.ChartGroups.Group0.ChartData;

		// Create a new ChartDataSeries
		C1.Win.C1Chart.ChartDataSeriesCollection cdsc = cdata.SeriesList;
		C1.Win.C1Chart.ChartDataSeries cds = cdsc.AddNewSeries();

		// Adjust the series styles for scatter data
		cds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None;
		cds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot;
		cds.SymbolStyle.Color = System.Drawing.Color.LightCoral;
		cds.SymbolStyle.OutlineColor = System.Drawing.Color.DarkRed;
		cds.SymbolStyle.OutlineWidth = 1;
		cds.SymbolStyle.Size = 12;

		// Create and add the data
		GenerateData(cds, 25);

		// Add a Linear Trendline to start
		C1.Win.C1Chart.TrendLine trend = cdata.TrendsList.AddNewTrendLine();
		trend.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.Solid;
		trend.LineStyle.Color = System.Drawing.Color.Blue;
		trend.SeriesIndex = 0;
		trend.RegressionOptions.NumTerms = 2;
		trend.TrendLineType = C1.Win.C1Chart.TrendLineTypeEnum.Polynom;

//&lt;/CodeSnippet&gt;
	}

//&lt;CodeSnippet&gt;

	private void GenerateData(C1.Win.C1Chart.ChartDataSeries chartSeries, int numberOfPoints)
	{
		double [] x = new double[numberOfPoints];
		double [] y = new double[numberOfPoints];
		
		System.Random rnd = new System.Random();

		for(int i=0; i &lt; numberOfPoints; i++)
		{
			x[i] = i;
			y[i] = rnd.NextDouble() * 100;
		}

		chartSeries.X.CopyDataIn(x);
		chartSeries.Y.CopyDataIn(y);
	}

	//---------------------------------------------------------------------
	// handler for button

	private void Button_Clicked(object sender, System.EventArgs e)
	{
		GenerateData(c1chart1.ChartGroups.Group0.ChartData.SeriesList[0], 25);
	}

	// handler for combo box
	private void ComboBox_SelectedIndexChanged(object sender, System.EventArgs e)
	{
		System.Windows.Forms.ComboBox cb = (System.Windows.Forms.ComboBox)sender;
		int PolynomialOrder = 1;

		switch(cb.Text)
		{
			case "Linear":
				PolynomialOrder = 1;
				break;
			case "Quadratic":
				PolynomialOrder = 2;
				break;
			case "Cubic":
				PolynomialOrder = 3;
				break;
			case "4th-order":
				PolynomialOrder = 4;
				break;
			case "5th-order":
				PolynomialOrder = 5;
				break;
		}

		// trending polynomial has one more term that its order
		C1.Win.C1Chart.TrendLine tl = c1chart1.ChartGroups.Group0.ChartData.TrendsList[0];
		tl.LegendEntry = true;
		tl.Text = cb.Text;
		tl.RegressionOptions.NumTerms = PolynomialOrder + 1;
	}

//&lt;/CodeSnippet&gt;

}
</CodeCS>
    <CodeVB>
 _ '&lt;Info&gt;
' Shows use of Trend functions in the chart.
'&lt;/Info&gt;
Public Class Polynomial
   Inherits ChartSample
   Private _controls As System.Windows.Forms.Control() = Nothing
   
   Protected Overrides ReadOnly Property Controls() As System.Windows.Forms.Control()
      Get
         If _controls Is Nothing Then
            Dim lab As New System.Windows.Forms.Label()
            lab.Location = New System.Drawing.Point(10, 0)
            lab.Width = 88
            lab.TextAlign = System.Drawing.ContentAlignment.MiddleLeft
            lab.Text = "Polynomial Type"
            
            Dim cb1 As New System.Windows.Forms.ComboBox()
            cb1.Location = New System.Drawing.Point(lab.Right + 2, 0)
            cb1.Width = 100
            cb1.BackColor = System.Drawing.SystemColors.Control
            cb1.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList
            cb1.Items.AddRange(New Object() {"Linear", "Quadratic", "Cubic", "4th-order", "5th-order"})
            cb1.Text = "Linear"
            AddHandler cb1.SelectedIndexChanged, AddressOf ComboBox_SelectedIndexChanged
            
            Dim btnRegen As New System.Windows.Forms.Button()
            btnRegen.Location = New System.Drawing.Point(cb1.Right + 20, 0)
            btnRegen.Width = 160
            btnRegen.Text = "Generate New Data"
            btnRegen.FlatStyle = System.Windows.Forms.FlatStyle.Flat
            AddHandler btnRegen.Click, AddressOf Button_Clicked
            
            _controls = New System.Windows.Forms.Control() {lab, cb1, btnRegen}
         End If
         Return _controls
      End Get
   End Property
   
   
   Public Overrides Sub Load(c1Chart1 As C1.Win.C1Chart.C1Chart)
      MyBase.Load(c1Chart1)
      c1Chart1.Reset()
      
      '&lt;CodeSnippet&gt;
      ' Show a legend
      c1Chart1.Legend.Style.Border.BorderStyle = C1.Win.C1Chart.BorderStyleEnum.Solid
      c1Chart1.Legend.Orientation = C1.Win.C1Chart.LegendOrientationEnum.Horizontal
      c1Chart1.Legend.Compass = C1.Win.C1Chart.CompassEnum.South
      c1Chart1.Legend.Visible = True
      
      ' Get the ChartData
      Dim cdata As C1.Win.C1Chart.ChartData = c1Chart1.ChartGroups.Group0.ChartData
      
      ' Create a new ChartDataSeries
      Dim cdsc As C1.Win.C1Chart.ChartDataSeriesCollection = cdata.SeriesList
      Dim cds As C1.Win.C1Chart.ChartDataSeries = cdsc.AddNewSeries()
      
      ' Adjust the series styles for scatter data
      cds.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.None
      cds.SymbolStyle.Shape = C1.Win.C1Chart.SymbolShapeEnum.Dot
      cds.SymbolStyle.Color = System.Drawing.Color.LightCoral
      cds.SymbolStyle.OutlineColor = System.Drawing.Color.DarkRed
      cds.SymbolStyle.OutlineWidth = 1
      cds.SymbolStyle.Size = 12
      
      ' Create and add the data
      GenerateData(cds, 25)
      
      ' Add a Linear Trendline to start
      Dim trend As C1.Win.C1Chart.TrendLine = cdata.TrendsList.AddNewTrendLine()
      trend.LineStyle.Pattern = C1.Win.C1Chart.LinePatternEnum.Solid
      trend.LineStyle.Color = System.Drawing.Color.Blue
      trend.SeriesIndex = 0
      trend.RegressionOptions.NumTerms = 2
      trend.TrendLineType = C1.Win.C1Chart.TrendLineTypeEnum.Polynom
   End Sub 'Load
    
   '&lt;/CodeSnippet&gt;
   
   '&lt;CodeSnippet&gt;
   Private Sub GenerateData(chartSeries As C1.Win.C1Chart.ChartDataSeries, numberOfPoints As Integer)
      Dim x(numberOfPoints - 1) As Double
      Dim y(numberOfPoints - 1) As Double
      
      Dim rnd As New System.Random()
      
      Dim i As Integer
      For i = 0 To numberOfPoints - 1
         x(i) = i
         y(i) = rnd.NextDouble() * 100
      Next i
      
      chartSeries.X.CopyDataIn(x)
      chartSeries.Y.CopyDataIn(y)
   End Sub 'GenerateData
   
   
   '---------------------------------------------------------------------
   ' handler for button
   Private Sub Button_Clicked(sender As Object, e As System.EventArgs)
      GenerateData(c1chart1.ChartGroups.Group0.ChartData.SeriesList(0), 25)
   End Sub 'Button_Clicked
   
   
   ' handler for combo box
   Private Sub ComboBox_SelectedIndexChanged(sender As Object, e As System.EventArgs)
      Dim cb As System.Windows.Forms.ComboBox = CType(sender, System.Windows.Forms.ComboBox)
      Dim PolynomialOrder As Integer = 1
      
      Select Case cb.Text
         Case "Linear"
            PolynomialOrder = 1
         Case "Quadratic"
            PolynomialOrder = 2
         Case "Cubic"
            PolynomialOrder = 3
         Case "4th-order"
            PolynomialOrder = 4
         Case "5th-order"
            PolynomialOrder = 5
      End Select
      
      ' trending polynomial has one more term that its order
      Dim tl As C1.Win.C1Chart.TrendLine = c1chart1.ChartGroups.Group0.ChartData.TrendsList(0)
      tl.LegendEntry = True
      tl.Text = cb.Text
      tl.RegressionOptions.NumTerms = PolynomialOrder + 1
   End Sub 'ComboBox_SelectedIndexChanged
End Class 'NewSample 
'&lt;/CodeSnippet&gt;</CodeVB>
    <Info> Shows use of Trend functions in the chart.
</Info>
  </CodeSample>
</ArrayOfCodeSample>