//----------------------------------------------------------------------------
// CodeCompleteStrings.cs
//
// This is a part of the C1FlexReportDesigner application sources.
// Copyright (C) GrapeCity Inc.
// All rights reserved.
//----------------------------------------------------------------------------
namespace FlexReportDesignerApp
{
    public static class CodeCompleteStrings
    {
        public static class ItemTypeDescriptions
        {
            public const string C1RepParam = @"Report parameter";
            public const string C1RepField = @"Report field";
            public const string C1RepGroup = @"Report group";
            public const string C1RepSection = @"Report section";
            public const string C1dbField = @"Database field";
            public const string C1dbCalcField = @"Calculated field";
            public const string C1GlobalFunc = @"Report.GlobalScripts function";
            public const string C1GlobalSub = @"Report.GlobalScripts sub";
            public const string C1RepKeyword = @"C1FlexReport script keyword";
            public const string C1RepAggregate = @"C1FlexReport aggregate script function";
            public const string C1RepFunc = @"C1FlexReport built-in script function";
            public const string VbsKeyword = @"VBScript keyword";
            public const string VbsConstant = @"VBScript constant";
            public const string VbsFunction = @"VBScript function";
            public const string VbsProgram = @"VBScript statement";
            public const string DotNetProperty = @".NET object property";
            public const string DotNetMethod = @".NET object method";
            public const string DotNetField = @".NET object field";
            public const string DataFilterKeyword = @"Data Filter keyword";
            public const string DataFilterFunction = @"Data Filter built-in function";
        }
        public static class ScriptSyntaxItem
        {
            public const string C1SectionDescFmt = @"Section type={0}";
        }
        public static class VBKeywords
        {
            public const string True = @"Used to indicate a Boolean condition that is correct (True has a value of -1)";
            public const string False = @"Used to indicate a Boolean condition that is not correct (False has a value of 0)";
            public const string Nothing = @"Used to indicate an uninitialized object value, or to disassociate an object variable from an object to release system resources.<br>Example:<pre>Set myObject=Nothing</pre>";
            public const string Null = @"Used to indicate that a variable contains no valid data.<br>One way to think of Null is that someone has explicitly set the value to ""invalid"", unlike Empty where the value is ""not set"".<br><b>Note:</b> This is not the same as Empty or Nothing!<br>Example:<pre>x=Null 'x contains no valid data</pre>";
            public const string And = @"Performs a logical conjunction on two expressions.<br>Example:<pre>result = expression1 And expression2</pre>";
            public const string Or = @"Performs a logical disjunction on two expressions.<br>Example:<pre>result = expression1 Or expression2</pre>";
            public const string Not = @"Performs logical negation on an expression.<br>Example:<pre>result = Not expression</pre>";
            public const string Mod = @"Divides two integers and returns the integer remainder.<br>Example:<pre>result = number1 Mod number2</pre>";
            public const string Const = @"Declares constants for use in place of literal values.<br>Example:<pre>Const constname = expression</pre>";
            public const string Dim = @"Declares variables and allocates storage space.<br>Example:<pre>Dim varname[([subscripts])][, varname[([subscripts])]]...</pre>";
            public const string Redim = @"Declares dynamic-array variables, and allocates or reallocates storage space at procedure level.<br>Example:<pre>ReDim [Preserve] varname(subscripts) [, varname(subscripts)]...</pre>";
            public const string IfThen = @"Use the If...Then statement if you want to execute some code if a condition is trueIf you want to execute only one statement when a condition is true, you can write the code on one line:<br>Example:<pre>If i=10 Then response.write(""Hello"")</pre>";
            public const string IfThenElse = @"Use the If...Then...Else statement if you want to<br><ul><li>execute some code if a condition is true</li><li>select one of two blocks of code to execute</li></ul>If you want to execute only one statement when a condition is true, you can write the code on one line:<br>Example:<pre>If i=10 Then response.write(""Hello"") else response.write(""Good Bye"")</pre>";
            public const string IfThenElseEndIf = @"Use the If...Then...Else...EndIf statement if you want to<br><ul><li>execute some code if a condition is true</li><li>select one of two blocks of code to execute</li></ul>Example:<pre>If i=10 Then \n  response.write(""Hello"") \nElse \n  response.write(""Good Bye"") \nEndIf</pre>";
            public const string Then = @"A part of If...Then...Else statement.";
            public const string ElseIf = @"You can use the If...Then...ElseIf statement if you want to select one of many blocks of code to execute:Example:<pre>If i = 10 Then\n  response.write(""Just started...!"")\n  ElseIf i = 11 Then\n  response.write(""Hungry!"")\nEndIf</pre>";
            public const string Else = @"If you want to execute a statement if a condition is true and execute another statement if the condition is not true, you must add the ""Else"" keyword.Example:<pre>If i = 10 Then\n  <i>some statements</i>\nElse\n  <i>some statements</i>\nEndIf</pre>";
            public const string EndIf = @"If you want to execute more than one statement when a condition is true, you must put each statement on separate lines, and end the statement with the keyword ""EndIf"".Example:<pre>If i = 10 Then\n  <i>some statements</i>\nEndIf</pre>";
            public const string EndFunction = @"Declares the end of Function.";
            public const string EndSub = @"Declares the end of Sub.";
            public const string For = @"A For Each...Next loop repeats a block of code for each item in a collection, or for each element of an array.<br>Use the For...Next statement to run a block of code a specified number of times.<br>The For statement specifies the counter variable (i), and its start and end values. The Next statement increases the counter variable (i) by one.<br>Example:<pre>For i = 0 To 5\n  <i>some statements</i>\nNext</pre>";
            public const string To = @"Used to set the end value in a For Each...Next loop";
            public const string Next = @"Used to increase the counter variable in a For Each...Next loop";
            public const string Step = @"With the Step keyword, you can increase or decrease the counter variable by the value you specify.Example:<pre>For i=2 To 10 Step 2\n  <i>some statements</i>\nNext</pre>";
            public const string While = @"In a While..Wend loop, if the condition is True, all statements are executed until Wend keyword is encountered.<br>If the condition is false, the loop is exited and the control jumps to very next statement after Wend keyword.<br>Example:<pre>While condition(s)\n  <i>some statements</i>\nWend</pre>";
            public const string Wend = @"End of a While..Wend loop";
            public const string Sub = @"A Sub procedure:<br><ul><li>is a series of statements, enclosed by the Sub and End Sub statements</li><li>can perform actions, but does not return a value</li><li>can take arguments</li></ul>Example:<pre>Sub mysub(argument1,argument2)\n  <i>some statements</i>\nEnd Sub</pre>";
            public const string Function = @"A Function procedure:<br><ul><li>is a series of statements, enclosed by the Function and End Function statements</li><li>can perform actions and can return a value</li><li>can take arguments that are passed to it by a calling procedure</li><li>without arguments, must include an empty set of parentheses ()</li><li>returns a value by assigning a value to its name</li></ul>Example:<pre>Function MyFunction (argument1, argument2)\n  <i>some statements</i>\n  MyFunction = SomeValue\nEnd Function</pre>";
            public const string As = @"Defines type of passed argument";
            public const string Call = @"Transfers control to a Sub or Function procedure.<br><b><i>[Call] name [argumentlist]</i></b>";
            public const string ByRef = @"Indicates that the argument is passed by reference. If ByVal and ByRef are omitted, the default is ByRef.";
            public const string ByVal = @"Indicates that the argument is passed by value.";
        }
        public static class VBConstants
        {
            public const string vbCr = @"Carriage return.";
            public const string vbCrLf = @"Carriage returnâ€“linefeed combination.";
            public const string vbLf = @"Line feed.";
            public const string vbFormFeed = @"Form feed; not useful in Microsoft Windows.";
            public const string vbNewLine = @"Platform-specific newline character; whatever is appropriate for the platform.";
            public const string vbNullChar = @"Character having the value 0.";
            public const string vbTab = @"Horizontal tab.";
            public const string vbVerticalTab = @"Vertical tab; not useful in Microsoft Windows.";
            public const string vbBlack = @"Black color";
            public const string vbRed = @"Red color";
            public const string vbGreen = @"Green color";
            public const string vbYellow = @"Yellow color";
            public const string vbBlue = @"Blue color";
            public const string vbMagenta = @"Magenta color";
            public const string vbCyan = @"Cyan color";
            public const string vbWhite = @"White color";
            public const string vbEmpty = @"Uninitialized (default)";
            public const string vbNull = @"Contains no valid data ";
            public const string vbInteger = @"Integer subtype ";
            public const string vbLong = @"Long subtype";
            public const string vbSingle = @"Single subtype";
            public const string vbDouble = @"Double subtype";
            public const string vbCurrency = @"Currency subtype";
            public const string vbDate = @"Date subtype";
            public const string vbString = @"String subtype";
            public const string vbObject = @"Object";
            public const string vbError = @"Error subtype";
            public const string vbBoolean = @"Boolean subtype";
            public const string vbVariant = @"Variant (used only for arrays of variants)";
            public const string vbDataObject = @"Data access object";
            public const string vbDecimal = @"Decimal subtype";
            public const string vbByte = @"Byte subtype";
            public const string vbArray = @"Array";
            public const string vbOKOnly = @"Display OK button only.";
            public const string vbOKCancel = @"Display OK and Cancel buttons.";
            public const string vbAbortRetryIgnore = @"Display Abort, Retry, and Ignore buttons.";
            public const string vbYesNoCancel = @"Display Yes, No, and Cancel buttons.";
            public const string vbYesNo = @"Display Yes and No buttons.";
            public const string vbRetryCancel = @"Display Retry and Cancel buttons.";
            public const string vbCritical = @"Display Critical Message icon.";
            public const string vbQuestion = @"Display Warning Query icon.";
            public const string vbExclamation = @"Display Warning Message icon.";
            public const string vbInformation = @"Display Information Message icon.";
            public const string vbDefaultButton1 = @"First button is the default.";
            public const string vbDefaultButton2 = @"Second button is the default.";
            public const string vbDefaultButton3 = @"Third button is the default.";
            public const string vbDefaultButton4 = @"Fourth button is the default.";
            public const string vbApplicationModal = @"Application modal. The user must respond to the message box before continuing work in the current application.";
            public const string vbSystemModal = @"System modal. On Win16 systems, all applications are suspended until the user responds to the message box. On Win32 systems, this constant provides an application modal message box that always remains on top of any other programs you may have running.";
        }
        public static class VBStringFunctions
        {
            public const string Asc = @"Returns the ANSI character code corresponding to the first letter in a string.<br><b><i>Asc(string)</i></b><br>The string argument is any valid string expression. If the string contains no characters, a run-time error occurs.<br>Example:<pre>Dim MyNumber\nMyNumber = Asc(""A"")       ' Returns 65.\nMyNumber = Asc(""Apple"")   ' Returns 65.\nMyNumber = Asc(""a"")       ' Returns 97.</pre>";
            public const string AscW = @"Returns the unicode character code corresponding to the first letter in a string.<br><b><i>AscW(string)</i></b><br>The string argument is any valid string expression. If the string contains no characters, a run-time error occurs.<br>Example:<pre>Dim MyNumber\nMyNumber = AscW(""A"")       ' Returns 65.\nMyNumber = AscW(""Apple"")   ' Returns 65.\nMyNumber = AscW(""a"")       ' Returns 97.</pre>";
            public const string Chr = @"Returns the character associated with the specified ANSI character code.<br><b><i>Chr(charcode)</i></b><br>The charcode argument is a number that identifies a character.<br>Numbers from 0 to 31 are the same as standard, nonprintable ASCII codes. For example, Chr(10) returns a linefeed character.<br>The following example uses the Chr function to return the character associated with the specified character code:<br>Example:<pre>Dim MyChar\nMyChar = Chr(65)       ' Returns A.\nMyChar = Chr(97)       ' Returns a.</pre>";
            public const string ChrW = @"Returns the character associated with the specified unicode character code.<br><b><i>ChrW(charcode)</i></b><br>The charcode argument is a number that identifies a character.<br>Numbers from 0 to 31 are the same as standard, nonprintable ASCII codes. For example, ChrW(10) returns a linefeed character.<br>The following example uses the ChrW function to return the character associated with the specified character code:<br>Example:<pre>Dim MyChar\nMyChar = ChrW(65)       ' Returns A.\nMyChar = ChrW(97)       ' Returns a.</pre>";
            public const string CStr = @"Returns an expression that has been converted to a Variant of subtype String.<br><b><i>CStr(expression)</i></b><br>The expression argument is any valid expression.<br>Use the CStr function to provide conversions from any data type to a String subtype. CStr forces the results to be expressed as a String.<br>The CStr function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized, depending on the locale setting.<br>Example:<pre>Dim MyDouble, MyString\nMyDouble = 437.324         ' MyDouble is a Double.\nMyString = CStr(MyDouble)   ' MyString contains ""437.324"".</pre>";
            public const string FormatCurrency = @"Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.<br><b><i>FormatCurrency(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])</i></b><br><b>Expression</b> - required. Expression to be formatted.<br><b>NumDigitsAfterDecimal</b> - optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the computer's regional settings are used.<br><b>IncludeLeadingDigit</b> - optional. Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.<br><b>UseParensForNegativeNumbers</b> - optional. Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.<br><b>GroupDigits</b> - optional. Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See Settings section for values.<br>Example:<pre>Dim number\nnumber = -12345.6789\nMsgBox (FormatCurrency (number, -1, vbUseDefault, vbFalse))</pre>";
            public const string FormatDateTime = @"Returns an expression formatted as a date or time.<br><b><i>FormatDateTime(Date[, NamedFormat])</i></b><br><b>Date</b> - required. Date expression to be formatted.<br><b>NamedFormat</b> - optional. Numeric value that indicates the date/time format used. If omitted, <b>vbGeneralDate</b> is used.<br>Example:<pre>Function GetCurrentDate\n  GetCurrentDate = FormatDateTime(Date, 1) ' FormatDateTime formats Date in long date. \nEnd Function</pre>";
            public const string FormatNumber = @"Returns an expression formatted as a number.<br><b><i>FormatNumber(Expression [,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])</i></b><br><b>Expression</b> - required. Expression to be formatted.<br><b>NumDigitsAfterDecimal</b> - optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the computer's regional settings are used.<br><b>IncludeLeadingDigit</b> - optional. Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.<br><b>UseParensForNegativeNumbers</b> - optional. Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.<br><b>GroupDigits</b> - optional. Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the control panel. See Settings section for values.<br>Example:<pre>Dim number\nnumber = -12345.6789123\nMsgBox (FormatNumber(number, 3)) ' The NumDigitsAfterDecimal parameter is set to 3.</pre>";
            public const string FormatPercent = @"Returns an expression formatted as a percentage (multiplied by 100) with a trailing % character.<br><b><i>FormatPercent(Expression[,NumDigitsAfterDecimal [,IncludeLeadingDigit [,UseParensForNegativeNumbers [,GroupDigits]]]])</i></b><br><b>Expression</b> - required. Expression to be formatted.<br><b>NumDigitsAfterDecimal</b> - optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is -1, which indicates that the computer's regional settings are used.<br><b>IncludeLeadingDigit</b> - optional. Tristate constant that indicates whether or not a leading zero is displayed for fractional values. See Settings section for values.<br><b>UseParensForNegativeNumbers</b> - optional. Tristate constant that indicates whether or not to place negative values within parentheses. See Settings section for values.<br><b>GroupDigits</b> - optional. Tristate constant that indicates whether or not numbers are grouped using the group delimiter specified in the control panel. See Settings section for values.<br>Example:<pre>Dim MyPercent\nMyPercent = FormatPercent(2/32) ' MyPercent contains 6.25%.</pre>";
            public const string Instr = @"Returns the position of the first occurrence of one string within another.<br><b><i>InStr([start, ]string1, string2[, compare])</i></b><br><b>start</b> - optional. Numeric expression that sets the starting position for each search. The first character position is position 1. If this argument is omitted, search starts at the first character position. If the compare argument is specified, a start argument is required.<br><b>string1</b> - required. String expression being searched.<br><b>string2</b> - required. String expression searched for.<br><b>compare</b> - optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings section for values. If this argument is omitted, a binary comparison is performed. If this argument is specified, a start argument is required.<br>Example:<pre>Dim MyPos\nMyPos = InStr (""abcdefgh"", ""c"") ' Returns 3.</pre>";
            public const string LCase = @"Returns a string that has been converted to lowercase.<br><b><i>LCase(string)</i></b><br>The string argument is any valid string expression. If string contains Null, Null is returned.<br>Only uppercase letters are converted to lowercase; all lowercase letters and non-letter characters remain unchanged.Example:<pre>Dim MyString, LCaseString\nMyString = ""VBSCript""\nLCaseString = LCase(MyString)   ' LCaseString contains ""vbscript"".</pre>";
            public const string Left = @"Returns a specified number of characters from the left side of a string.<br><b><i>Left(string, length)</i></b><br><b>string2</b> - string expression from which the leftmost characters are returned. If string contains Null, Null is returned.<br><b>compare</b> - numeric expression indicating how many characters to return. If 0, a zero-length string("""") is returned. If greater than or equal to the number of characters in string, the entire string is returned.<br>Example:<pre>Dim MyString, LeftString\nMyString = ""VBSCript""\nLeftString = Left(MyString, 3) ' LeftString contains ""VBS"".</pre>";
            public const string Len = @"Returns the number of characters in a string or the number of bytes required to store a variable.<br><b><i>Len(string | varname)</i></b><br><b>string</b> - any valid string expression. If string contains Null, Null is returned.<br><b>varname</b> - any valid variable name. If varname contains Null, Null is returned.<br>Example:<pre>Dim MyString\nMyString = Len(""VBSCRIPT"") ' MyString contains 8.</pre>";
            public const string LTrim = @"Returns a copy of a string without leading spaces.<br><b><i>LTrim(string)</i></b><br>The <b>string</b> argument is any valid string expression. If string contains Null, Null is returned.<br>Example:<pre>Dim MyString\nMyString = LTrim(""   vbscript "")   ' MyString contains ""vbscript ""</pre>";
            public const string Mid = @"Returns a specified number of characters from a string.<br><b><i>Mid(string, start[, length])</i></b><br><b>string</b> - string expression from which characters are returned. If string contains Null, Null is returned.<br><b>start</b> - character position in string at which the part to be taken begins. If start is greater than the number of characters in string, <b>Mid</b> returns a zero-length string ("""").<br><b>length</b> - number of characters to return. If omitted or if there are fewer than length characters in the text (including the character at start), all characters from the start position to the end of the string are returned.<br>Example:<pre>Dim MyVar\nMyVar = Mid(""VBScript is fun!"", 3, 6) ' MyVar contains ""Script"".</pre>";
            public const string Replace = @"Returns a string in which a specified substring has been replaced with another substring a specified number of times.<br><b><i>Replace(expression, find, replacewith[, start[, count[, compare]]])</i></b><br><b>expression</b> - required. String expression containing substring to replace.<br><b>find</b> - required. Substring being searched for.<br><b>replacewith</b> - required. Replacement substring.<br><b>start</b> - optional. Position within expression where substring search is to begin. If omitted, 1 is assumed. Must be used in conjunction with count.<br><b>count</b> - optional. Number of substring substitutions to perform. If omitted, the default value is -1, which means make all possible substitutions. Must be used in conjunction with start.<br><b>compare</b> - Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings section for values. If omitted, the default value is 0, which means perform a binary comparison.<br>Example:<pre>Dim MyVar\nMyVar = Replace (""ABC123abc"", ""abc"", ""def"") ' Returns ABC123def</pre>";
            public const string Right = @"Returns a specified number of characters from the right side of a string.<br><b><i>Right(string, length)</i></b><br><b>string</b> - string expression from which the rightmost characters are returned. If string contains Null, Null is returned.<br><b>length</b> - numeric expression indicating how many characters to return. If 0, a zero-length string is returned. If greater than or equal to the number of characters in string, the entire string is returned.<br>Example:<pre>Dim AnyString, MyStr\nAnyString = ""Hello World""      ' Define string.MyStr = Right(AnyString, 6)    ' Returns "" World"".</pre>";
            public const string Space = @"Returns a string consisting of the specified number of spaces.<br><b><i>Space(number)</i></b><br>The <b>number</b> argument is the number of spaces you want in the string.<br>Example:<pre>Dim MyString\nMyString = Space(10)   ' Returns a string with 10 spaces.</pre>";
            public const string Trim = @"Returns a copy of a string without leading and trailing spaces.<br><b><i>Trim(string)</i></b><br>The <b>string</b> argument is any valid string expression. If string contains Null, Null is returned.<br>Example:<pre>Dim MyString\nMyString = LTrim(""   vbscript "")   ' MyString contains ""vbscript""</pre>";
            public const string UCase = @"Returns a string that has been converted to uppercase.<br><b><i>UCase(string)</i></b><br>The <b>string</b> argument is any valid string expression. If string contains Null, Null is returned.<br>Example:<pre>Dim MyWord\nMyWord = UCase(""Hello World"")   ' Returns ""HELLO WORLD"".</pre>";
            public const string Hex = @"Returns a string representing the hexadecimal value of a number.<br><b><i>Hex(number)</i></b><br>The <b>number</b> argument is any valid expression. If number is not already a whole number, it is rounded to the nearest whole number before being evaluated.<br>Example:<pre>Dim MyHex\nMyHex = Hex(5)   ' Returns 5.</pre>";
        }
        public static class VBConversionFunctions
        {
            public const string CBool = @"Returns an expression that has been converted to a Variant of subtype Boolean.<br><b><i>CBool(expression)</i></b><br>The <b>expression</b> argument is any valid expression. If expression is zero, False is returned; otherwise, True is returned. If expression can't be interpreted as a numeric value, a run-time error occurs.<br>Example:<pre>Dim A, B, Check\nA = 5: B = 5           ' Initialize variables.\nCheck = CBool(A = B)   ' Check contains True.</pre>";
            public const string CByte = @"Returns an expression that has been converted to a Variant of subtype Byte.<br><b><i>CByte(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CByte function to provide conversions from any data type to a Byte subtype. For example, CByte forces byte arithmetic when currency, single-precision, double-precision, or integer arithmetic would normally occur.<br>The CByte function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>If expression lies outside the acceptable range for the byte subtype, an error occurs.<br>Example:<pre>Dim MyDouble, MyByte\nMyDouble = 125.5678        ' MyDouble is a Double.\nMyByte = CByte(MyDouble)   ' MyByte contains 126.</pre>";
            public const string CCur = @"Returns an expression that has been converted to a Variant of subtype Currency.<br><b><i>CCur(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CCur function to provide conversions from any data type to a Currency subtype. For example, CCur forces currency arithmetic when integer arithmetic would normally occur.<br>The CCur function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized, depending on the locale setting, as are different thousand separators.<br>Example:<pre>Dim MyDouble, MyCurr\nMyDouble = 543.214588         ' MyDouble is a Double.\nMyCurr = CCur(MyDouble * 2)   ' Convert result of MyDouble * 2 (1086.429176) to a Currency (1086.4292).</pre>";
            public const string CDate = @"Returns an expression that has been converted to a Variant of subtype Date.<br><b><i>CDate(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the IsDate function to determine if date can be converted to a date or time. CDate recognizes date literals and time literals as well as some numbers that fall within the range of acceptable dates. When converting a number to a date, the whole number portion is converted to a date. Any fractional part of the number is converted to a time of day, starting at midnight.<br>CDate recognizes date formats according to the locale setting of your system. The correct order of day, month, and year may not be determined if it is provided in a format other than one of the recognized date settings. In addition, a long date format is not recognized if it also contains the day-of-the-week string.<br>Example:<pre>MyDate = ""October 19, 1962""   ' Define date.\nMyShortDate = CDate(MyDate)   ' Convert to Date data type.\nMyTime = ""4:35:47 PM""         ' Define time.\nMyShortTime = CDate(MyTime)   ' Convert to Date data type.</pre>";
            public const string CDbl = @"Returns an expression that has been converted to a Variant of subtype Double.<br><b><i>CDbl(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CDbl function to provide conversions from any data type to a Double subtype. For example, CDbl forces double-precision arithmetic when currency or integer arithmetic would normally occur.<br>The CDbl function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>Example:<pre>Dim MyCurr, MyDouble\nMyCurr = CCur(234.456784)              ' MyCurr is a Currency (234.4568).\nMyDouble = CDbl(MyCurr * 8.2 * 0.01)   ' Convert result to a Double (19.2254576).</pre>";
            public const string CInt = @"Returns an expression that has been converted to a Variant of subtype Integer.<br><b><i>CInt(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CInt function to provide conversions from any other data type to an Integer subtype. For example, CInt forces integer arithmetic when currency, single-precision, or double-precision arithmetic would normally occur.<br>The CInt function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>If expression lies outside the acceptable range for the Integer subtype, an error occurs.<br>Example:<pre>Dim MyDouble, MyInt\nMyDouble = 2345.5678     ' MyDouble is a Double.\nMyInt = CInt(MyDouble)   ' MyInt contains 2346.</pre>";
            public const string CLng = @"Returns an expression that has been converted to a Variant of subtype Long.<br><b><i>CLng(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CLng function to provide conversions from any other data type to an Long subtype. For example, CInt forces integer arithmetic when currency, single-precision, or double-precision arithmetic would normally occur.<br>The CLng function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>If expression lies outside the acceptable range for the Long subtype, an error occurs.<br>Example:<pre>Dim MyDouble, MyLong\nMyDouble = 12345.5678     ' MyDouble is a Double.\nMyLong = CLng(MyDouble)   ' MyInt contains 12346.</pre>";
            public const string CSng = @"Returns an expression that has been converted to a Variant of subtype Single.<br><b><i>CSng(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CSng function to provide conversions from any data type to a Single subtype. For example, CDbl forces double-precision arithmetic when currency or integer arithmetic would normally occur.<br>The CDbl function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>Example:<pre>Dim MyCurr, MySingle\nMyCurr = CCur(234.456784)              ' MyCurr is a Currency (234.4568).\nMySingle = CSng(MyCurr * 8.2 * 0.01)   ' Convert result to a Single (19.2254576).</pre>";
            public const string CStr = @"Returns an expression that has been converted to a Variant of subtype String.<br><b><i>CStr(expression)</i></b><br>The expression argument is any valid expression.<br>Use the CStr function to provide conversions from any data type to a String subtype. CStr forces the results to be expressed as a String.<br>The CStr function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized, depending on the locale setting.<br>Example:<pre>Dim MyDouble, MyString\nMyDouble = 437.324         ' MyDouble is a Double.\nMyString = CStr(MyDouble)   ' MyString contains ""437.324"".</pre>";
            public const string IsEmpty = @"Returns a Boolean value indicating whether a variable has been initialized.<br><b><i>IsEmpty(expression)</i></b><br>The expression argument is any valid expression. However, because IsEmpty is used to determine if individual variables are initialized, the expression argument is most often a single variable name.<br>IsEmpty returns True if the variable is uninitialized, or is explicitly set to Empty; otherwise, it returns False. False is always returned if expression contains more than one variable.<br>Example:<pre>Dim MyVar, MyCheck\nMyCheck = IsEmpty(MyVar)   ' Returns True.\nMyVar = Null   ' Assign Null.\nMyCheck = IsEmpty(MyVar)   ' Returns False.\nMyVar = Empty   ' Assign Empty.\nMyCheck = IsEmpty(MyVar)   ' Returns True.</pre>";
            public const string TypeName = @"Returns a String value containing data-type information about a variable.<br><b><i>TypeName(VarName)</i></b><br>The VarName argument is an Object variable.<br>If VarName is an array, the returned string can be any one of the strings in the preceding table with empty parentheses appended. For example, if VarName points to an array of integers, TypeName returns ""Integer()"".<br>When TypeName returns the name of a reference type such as a class, it returns only the name itself, not the qualified name. For example, if VarName points to an object of class System.Drawing.Printing.PaperSource, TypeName returns ""PaperSource"". Note that if the variable is declared to be of a certain class type but does not have an object assigned to it, TypeName returns ""Nothing"".<br>Example:<pre>Dim testType As String \nDim strVar As String = ""String for testing""\nDim decVar As Decimal \nDim intVar, arrayVar(5) As Integer\ntestType = TypeName(strVar) ' The preceding call returns ""String"".\ntestType = TypeName(decVar) ' The preceding call returns ""Decimal"".\ntestType = TypeName(intVar) ' The preceding call returns ""Integer"".\ntestType = TypeName(arrayVar) ' The preceding call returns ""Integer()"".</pre>";
            public const string VarType = @"Returns a value indicating the subtype of a variable.<br><b><i>VarType(expression)</i></b><br>The varname argument can be any variable.<br>The VarType function returns the following values:<br><b>vbEmpty</b> (0)  - empty (uninitialized)<br><b>vbNull</b> (1)  - null (no valid data)<br><b>vbInteger</b> (2)  - integer<br><b>vbLong</b> (3)  - long integer<br><b>vbSingle</b> (4)  - single-precision floating-point number<br><b>vbDouble</b> (5)  - double-precision floating-point number<br><b>vbCurrency</b> (6)  - currency<br><b>vbDate</b> (7)  - date<br><b>vbString</b> (8)  - string<br><b>vbObject</b> (9)  - automation object<br><b>vbError</b> (10)  - error<br><b>vbError</b> (11)  - boolean<br><b>vbVariant</b> (12)  - variant (used only with arrays of Variants)<br><b>vbDataObject</b> (13)  - a data-access object<br><b>vbByte</b> (17)  - byte<br><b>vbArray</b> (8192)  - array<br>Example:<pre>Dim MyCheck\nMyCheck = VarType(300)          ' Returns 2 (vbInteger).\nMyCheck = VarType(#10/19/62#)   ' Returns 7 (vbDate).\nMyCheck = VarType(""VBScript"")   ' Returns 8 (vbString).</pre>";
            public const string CBoolInvariant = @"Returns an expression that has been converted to a Variant of subtype Boolean.<br><b><i>CBool(expression)</i></b><br>The <b>expression</b> argument is any valid expression. If expression is zero, False is returned; otherwise, True is returned. If expression can't be interpreted as a numeric value, a run-time error occurs.<br>This function uses invariant culture\n<br>Example:<pre>Dim A, B, Check\nA = 5: B = 5           ' Initialize variables.\nCheck = CBool(A = B)   ' Check contains True.</pre>";
            public const string CByteInvariant = @"Returns an expression that has been converted to a Variant of subtype Byte.<br><b><i>CByte(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CByte function to provide conversions from any data type to a Byte subtype. For example, CByte forces byte arithmetic when currency, single-precision, double-precision, or integer arithmetic would normally occur.<br>The CByte function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>If expression lies outside the acceptable range for the byte subtype, an error occurs.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyDouble, MyByte\nMyDouble = 125.5678        ' MyDouble is a Double.\nMyByte = CByte(MyDouble)   ' MyByte contains 126.</pre>";
            public const string CCurInvariant = @"Returns an expression that has been converted to a Variant of subtype Currency.<br><b><i>CCur(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CCur function to provide conversions from any data type to a Currency subtype. For example, CCur forces currency arithmetic when integer arithmetic would normally occur.<br>The CCur function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized, depending on the locale setting, as are different thousand separators.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyDouble, MyCurr\nMyDouble = 543.214588         ' MyDouble is a Double.\nMyCurr = CCur(MyDouble * 2)   ' Convert result of MyDouble * 2 (1086.429176) to a Currency (1086.4292).</pre>";
            public const string CDateInvariant = @"Returns an expression that has been converted to a Variant of subtype Date.<br><b><i>CDate(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the IsDate function to determine if date can be converted to a date or time. CDate recognizes date literals and time literals as well as some numbers that fall within the range of acceptable dates. When converting a number to a date, the whole number portion is converted to a date. Any fractional part of the number is converted to a time of day, starting at midnight.<br>CDate recognizes date formats according to the locale setting of your system. The correct order of day, month, and year may not be determined if it is provided in a format other than one of the recognized date settings. In addition, a long date format is not recognized if it also contains the day-of-the-week string.<br>This function uses invariant culture\n<br>Example:<pre>MyDate = ""October 19, 1962""   ' Define date.\nMyShortDate = CDate(MyDate)   ' Convert to Date data type.\nMyTime = ""4:35:47 PM""         ' Define time.\nMyShortTime = CDate(MyTime)   ' Convert to Date data type.</pre>";
            public const string CDblInvariant = @"Returns an expression that has been converted to a Variant of subtype Double.<br><b><i>CDbl(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CDbl function to provide conversions from any data type to a Double subtype. For example, CDbl forces double-precision arithmetic when currency or integer arithmetic would normally occur.<br>The CDbl function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyCurr, MyDouble\nMyCurr = CCur(234.456784)              ' MyCurr is a Currency (234.4568).\nMyDouble = CDbl(MyCurr * 8.2 * 0.01)   ' Convert result to a Double (19.2254576).</pre>";
            public const string CIntInvariant = @"Returns an expression that has been converted to a Variant of subtype Integer.<br><b><i>CInt(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CInt function to provide conversions from any other data type to an Integer subtype. For example, CInt forces integer arithmetic when currency, single-precision, or double-precision arithmetic would normally occur.<br>The CInt function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>If expression lies outside the acceptable range for the Integer subtype, an error occurs.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyDouble, MyInt\nMyDouble = 2345.5678     ' MyDouble is a Double.\nMyInt = CInt(MyDouble)   ' MyInt contains 2346.</pre>";
            public const string CLngInvariant = @"Returns an expression that has been converted to a Variant of subtype Long.<br><b><i>CLng(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CLng function to provide conversions from any other data type to an Long subtype. For example, CInt forces integer arithmetic when currency, single-precision, or double-precision arithmetic would normally occur.<br>The CLng function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>If expression lies outside the acceptable range for the Long subtype, an error occurs.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyDouble, MyLong\nMyDouble = 12345.5678     ' MyDouble is a Double.\nMyLong = CLng(MyDouble)   ' MyInt contains 12346.</pre>";
            public const string CSngInvariant = @"Returns an expression that has been converted to a Variant of subtype Single.<br><b><i>CSng(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the CSng function to provide conversions from any data type to a Single subtype. For example, CDbl forces double-precision arithmetic when currency or integer arithmetic would normally occur.<br>The CDbl function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized depending on the locale setting, as are different thousand separators.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyCurr, MySingle\nMyCurr = CCur(234.456784)              ' MyCurr is a Currency (234.4568).\nMySingle = CSng(MyCurr * 8.2 * 0.01)   ' Convert result to a Single (19.2254576).</pre>";
            public const string CStrInvariant = @"Returns an expression that has been converted to a Variant of subtype String.<br><b><i>CStr(expression)</i></b><br>The expression argument is any valid expression.<br>Use the CStr function to provide conversions from any data type to a String subtype. CStr forces the results to be expressed as a String.<br>The CStr function uses the locale setting of your system to determine how to perform conversions. Different decimal separators are properly recognized, depending on the locale setting.<br>This function uses invariant culture\n<br>Example:<pre>Dim MyDouble, MyString\nMyDouble = 437.324         ' MyDouble is a Double.\nMyString = CStr(MyDouble)   ' MyString contains ""437.324"".</pre>";
        }
        public static class VBMathFunctions
        {
            public const string Abs = @"Returns the absolute value of a number.<br><b><i>Abs(number)</i></b><br>The number argument can be any valid numeric expression. If number contains Null, Null is returned; if it is an uninitialized variable, zero is returned.<br>The absolute value of a number is its unsigned magnitude. For example, Abs(-1) and Abs(1) both return 1.<br>Example:<pre>Dim MyNumber\nMyNumber = Abs(50.3)  ' Returns 50.3.\nMyNumber = Abs(-50.3) ' Returns 50.3.</pre>";
            public const string Acos = @"Return the arccosine of a number.<br><b><i>Acos(number)</i></b><br>The number argument can be any valid numeric expression. If the parameter x is outside the range -1 to 1, the method will return NaN.<br>The Acos() method returns the arccosine of a number as a value value between 0 and PI radians.<br>Example:<pre>Dim MyNumber\nMyNumber = Acos(0.5)  ' Returns 1.0471975511965979.</pre>";
            public const string Asin = @"Return the arcsine of a number.<br><b><i>Asin(number)</i></b><br>The number argument can be any valid numeric expression. If the parameter x is outside the range -1 to 1, the method will return NaN.<br>The Asin() method returns the arcsine of a number as a value value between -PI/2 and PI/2 radians.<br>Example:<pre>Dim MyNumber\nMyNumber = Asin(0.5)  ' Returns 0.5235987755982989.</pre>";
            public const string Atn = @"Return the arctangent of a number.<br><b><i>Atn(number)</i></b><br>The number argument can be any valid numeric expression.<br>The Atn() method returns the arcsine of a number as a value value between -PI/2 and PI/2 radians.<br>Example:<pre>Dim MyNumber\nMyNumber = Atn(2)  ' Returns 1.1071487177940904.</pre>";
            public const string Cos = @"Returns the cosine of a number in radians.<br><b><i>Cos(number)</i></b><br>The number argument can be any valid numeric expression.<br>The Cos() method returns the cosine of a number as a value value between -1 and 1 radians.<br>Example:<pre>Dim MyNumber\nMyNumber = Cos(1)  ' Returns 0.5403023058681398.</pre>";
            public const string Exp = @"Returns e (the base of natural logarithms) raised to a power.<br><b><i>Exp(number)</i></b><br>The number argument can be any valid numeric expression. If the value of number exceeds 709.782712893, an error occurs. The constant e is approximately 2.718282.<br>The Exp function complements the action of the Log function and is sometimes referred to as the antilogarithm.<br>Example:<pre>Dim MyNumber\nMyNumber = Exp(1)  ' Returns 2.718281828459045.</pre>";
            public const string Fix = @"The Fix function returns the integer part of a specified number.<br><b><i>Fix(number)</i></b><br>The number argument can be any valid numeric expression. If the number parameter contains Null, Null will be returned.<br>Example:<pre>Dim MyNumber\nMyNumber = Fix(1.1)  ' Returns 1.\nMyNumber = Fix(1.6)  ' Returns 1.</pre>";
            public const string Int = @"The Int function returns the integer part of a specified number.<br><b><i>Int(number)</i></b><br>The number argument can be any valid numeric expression. If the number parameter contains Null, Null will be returned.<br>Example:<pre>Dim MyNumber\nMyNumber = Int(1.1)  ' Returns 1.\nMyNumber = Int(1.6)  ' Returns 1.</pre>";
            public const string IsNull = @"Returns a Boolean value that indicates whether an expression contains no valid data (Null).<br><b><i>IsNull(expression)</i></b><br>The expression argument is any valid expression.<br>IsNull returns True if expression is Null, that is, it contains no valid data; otherwise, IsNull returns False.<br>The Null value indicates that the variable contains no valid data. Null is not the same as Empty, which indicates that a variable has not yet been initialized. It is also not the same as a zero-length string (""""), which is sometimes referred to as a null string.<br>Example:<pre>Dim MyVar, MyCheck\nMyCheck = IsNull(MyVar)   ' Returns True.\nMyVar = Null   ' Assign Null.\nMyCheck = IsNull(MyVar)   ' Returns True.\nMyVar = Empty   ' Assign Empty.\nMyCheck = IsNull(MyVar)   ' Returns False.</pre>";
            public const string IsNumeric = @"Returns a Boolean value indicating whether an expression can be evaluated as a number.<br><b><i>IsNumeric(expression)</i></b><br>The expression argument is any valid expression.<br>IsNumeric returns True if the entire expression is recognized as a number; otherwise, it returns False. IsNumeric returns False if expression is a date expression.<br>Example:<pre>Dim MyCheck\nMyCheck = IsNumeric(53)   ' Returns True.\nMyCheck = IsNumeric(""459.95"")   ' Returns True.\nMyCheck = IsNumeric(""45 Help"")   ' Returns False.</pre>";
            public const string IsObject = @"Returns a Boolean value indicating whether an expression references a valid Automation object.<br><b><i>IsObject(expression)</i></b><br>The expression argument is any valid expression.<br>IsObject returns True if expression is a variable of Object subtype or a user-defined object; otherwise, it returns False.<br>Example:<pre>Dim MyCheck\nMyCheck = IsObject(Me)   ' Returns True.\nMyCheck = IsObject(1)   ' Returns False.\nMyCheck = IsObject(""1"")   ' Returns False.</pre>";
            public const string Pi = @"Returns a Pi value.<br><b><i>Pi()</i></b><br>Example:<pre>Dim MyCheck\nMyCheck = Pi()   ' Returns 3.141592.\nMyCheck = IsObject(1)   ' Returns False.\nMyCheck = IsObject(""1"")   ' Returns False.</pre>";
            public const string Oct = @"Returns a string representing the octal value of a number.<br><b><i>Oct(expression)</i></b><br>The expression argument is any valid expression.<br>If number is not already a whole number, it is rounded to the nearest whole number before being evaluated.<br>Example:<pre>Dim MyOct\nMyOct = Oct(4)     ' Returns 4.\nMyOct = Oct(8)     ' Returns 10.\nMyOct = Oct(459)   ' Returns 713.</pre>";
            public const string Rnd = @"Returns a random number.<br><b><i>Rnd(expression)</i></b><br>The expression argument is any valid numeric expression.<br>The Rnd function returns a value less than 1 but greater than or equal to 0. The value of number determines how Rnd generates a random number:<br>If number is less than zero, the same number every time, using number as the seed.<br>If number is greater than zero, the next random number in the sequence.<br>If number is equal to zero, the most recently generated number.<br>If number is not supplied, the next random number in the sequence.<br>";
            public const string Round = @"Returns a number rounded to a specified number of decimal places.<br><b><i>Round(expression[, numdecimalplaces])</i></b><br><b>expression</b> - required. Numeric expression being rounded.<br><b>numdecimalplaces</b> - optional. Number indicating how many places to the right of the decimal are included in the rounding. If omitted, integers are returned by the Round function.<br>The Round function performs round to even, which is different from round to larger. The return value is the number closest to the value of expression, with the appropriate number of decimal places. If expression is exactly halfway between two possible rounded values, the function returns the possible rounded value whose rightmost digit is an even number. (In a round to larger function, a number that is halfway between two possible rounded values is always rounded to the larger number.)<br>Round to even is a statistically more accurate rounding algorithm than round to larger.<br>Example:<pre>Dim var1, var2, var3, var4, var5\nvar1 = Round(1.5)      ' var1 contains 2\nvar2 = Round(2.5)      ' var2 contains 2\nvar3 = Round(3.5)      ' var3 contains 4\nvar4 = Round(0.985, 2) ' var4 contains 0.98\nvar5 = Round(0.995, 2) ' var5 contains 1.00</pre>";
            public const string Sgn = @"Returns a number rounded to a specified number of decimal places.<br><b><i>Sgn(expression)</i></b><br>The number argument can be any valid numeric expression.<br>The Sgn function has the following return values:<br>Greater than 0 - 1<br>Equal to 0 - 0<br>Less than 0 - -1<br>Example:<pre>Dim MyVar1, MyVar2, MyVar3, MySign\nMyVar1 = 12: MyVar2 = -2.4: MyVar3 = 0\nMySign = Sgn(MyVar1)   ' Returns 1.\nMySign = Sgn(MyVar2)   ' Returns -1.\nMySign = Sgn(MyVar3)   ' Returns 0.</pre>";
            public const string Sin = @"Returns the sine of a number in radians.<br><b><i>Sin(number)</i></b><br>The number argument can be any valid numeric expression.<br>The Sin() method returns the sine of a number as a value value between -1 and 1 radians.<br>Example:<pre>Dim MyNumber\nMyNumber = Sin(1)  ' Returns 0.8414709848078965.</pre>";
            public const string Sign = @"Returns a number rounded to a specified number of decimal places.<br><b><i>Sign(number)</i></b><br>The number argument can be any valid numeric expression.<br>The Sign function has the following return values:<br>Greater than 0 - 1<br>Equal to 0 - 0<br>Less than 0 - -1<br>Example:<pre>Dim MyVar1, MyVar2, MyVar3, MySign\nMyVar1 = 12: MyVar2 = -2.4: MyVar3 = 0\nMySign = Sign(MyVar1)   ' Returns 1.\nMySign = Sign(MyVar2)   ' Returns -1.\nMySign = Sign(MyVar3)   ' Returns 0.</pre>";
            public const string Sqr = @"Returns the square root of a number.<br><b><i>Sqr(number)</i></b><br>The number argument can be any valid numeric expression greater than or equal to 0.<br>Example:<pre>Dim MySqr\nMySqr = Sqr(4)   ' Returns 2.\nMySqr = Sqr(23)   ' Returns 4.79583152331272.\nMySqr = Sqr(0)   ' Returns 0.\nMySqr = Sqr(-4)   ' Generates a run-time error.</pre>";
            public const string Tan = @"Returns the tangent of an angle.<br><b><i>Tan(number)</i></b><br>The number argument can be any valid numeric expression that expresses an angle in radians.<br>Tan takes an angle and returns the ratio of two sides of a right triangle. The ratio is the length of the side opposite the angle divided by the length of the side adjacent to the angle.<br>To convert degrees to radians, multiply degrees by pi /180. To convert radians to degrees, multiply radians by 180/pi.<br>Example:<pre>Dim MyAngle, MyCotangent\nMyAngle = 1.3   ' Define angle in radians.\nMyCotangent = 1 / Tan(MyAngle)   ' Calculate cotangent.</pre>";
        }
        public static class VBDateTimeFunctions
        {
            public const string CDate = @"Returns an expression that has been converted to a Variant of subtype Date.<br><b><i>CDate(expression)</i></b><br>The <b>expression</b> argument is any valid expression. Use the IsDate function to determine if date can be converted to a date or time. CDate recognizes date literals and time literals as well as some numbers that fall within the range of acceptable dates. When converting a number to a date, the whole number portion is converted to a date. Any fractional part of the number is converted to a time of day, starting at midnight.<br>CDate recognizes date formats according to the locale setting of your system. The correct order of day, month, and year may not be determined if it is provided in a format other than one of the recognized date settings. In addition, a long date format is not recognized if it also contains the day-of-the-week string.<br>Example:<pre>MyDate = ""October 19, 1962""   ' Define date.\nMyShortDate = CDate(MyDate)   ' Convert to Date data type.\nMyTime = ""4:35:47 PM""         ' Define time.\nMyShortTime = CDate(MyTime)   ' Convert to Date data type.</pre>";
            public const string DateAdd = @"Returns a date to which a specified time interval has been added.<br><b><i>DateAdd(interval, number, date)</i></b><br><b>interval</b> - required. String expression that is the interval you want to add. See Settings section for values.<br><b>number</b> - required. Numeric expression that is the number of interval you want to add. The numeric expression can either be positive, for dates in the future, or negative, for dates in the past.<br><b>date</b> - required. Variant or literal representing the date to which interval is added.<br>The interval argument can have the following values:<br><b>yyyy</b> - Year<br><b>q</b> - Quarter<br><b>m</b> - Month<br><b>y</b> - Day of year (same as Day)<br><b>d</b> - Day<br><b>w</b> - Weekday (same as Day)<br><b>ww</b> - Week<br><b>h</b> - Hour<br><b>n</b> - Minute<br><b>s</b> - Second<br>You can use the DateAdd function to add or subtract a specified time interval from a date. For example, you can use DateAdd to calculate a date 30 days from today or a time 45 minutes from now. To add days to date, you can use Day of Year (""y""), Day (""d""), or Weekday (""w"").<br>Example:<pre>NewDate = DateAdd(""m"", 1, ""31-Jan-95"") 'Returned ""28-Feb-95""</pre>";
            public const string DateDiff = @"Returns the number of intervals between two dates.<br><b><i>DateDiff(interval, date1, date2 [,firstdayofweek[, firstweekofyear]])</i></b><br><b>interval</b> - required. String expression that is the interval you want to add. See Settings section for values.<br><b>date1, date2</b> - required. Date expressions. Two dates you want to use in the calculation.<br><b>firstdayofweek</b> - optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values.<br><b>firstweekofyear</b> - optional. Constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. See Settings section for values.<br>The interval argument can have the following values:<br><b>yyyy</b> - Year<br><b>q</b> - Quarter<br><b>m</b> - Month<br><b>y</b> - Day of year (same as Day)<br><b>d</b> - Day<br><b>w</b> - Weekday (same as Day)<br><b>ww</b> - Week<br><b>h</b> - Hour<br><b>n</b> - Minute<br><b>s</b> - Second<br>You can use the DateDiff function to determine how many specified time intervals exist between two dates. For example, you might use DateDiff to calculate the number of days between two dates, or the number of weeks between today and the end of the year.<br>Example:<pre>Function DiffADate(theDate)\n  DiffADate = ""Days from today: "" & DateDiff(""d"", Now, theDate)\nEnd Function</pre>";
            public const string DatePart = @"Returns the specified part of a given date.<br><b><i>DatePart(interval, date[, firstdayofweek[, firstweekofyear]])</i></b><br><b>interval</b> - required. String expression that is the interval you want to add. See Settings section for values.<br><b>date</b> - required. Date expression you want to evaluate.<br><b>firstdayofweek</b> - optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values.<br><b>firstweekofyear</b> - optional. Constant that specifies the first week of the year. If not specified, the first week is assumed to be the week in which January 1 occurs. See Settings section for values.<br>The interval argument can have the following values:<br><b>yyyy</b> - Year<br><b>q</b> - Quarter<br><b>m</b> - Month<br><b>y</b> - Day of year (same as Day)<br><b>d</b> - Day<br><b>w</b> - Weekday (same as Day)<br><b>ww</b> - Week<br><b>h</b> - Hour<br><b>n</b> - Minute<br><b>s</b> - Second<br>You can use the DatePart function to evaluate a date and return a specific interval of time. For example, you might use DatePart to calculate the day of the week or the current hour.<br>The firstdayofweek argument affects calculations that use the ""w"" and ""ww"" interval symbols.<br>When you use the ""w"" interval symbol, the weekday value that is returned is 1 for Sunday, 2 for Monday, and so on (unless a firstdayofweek argument is provided).<br>When you use the ""h"" interval symbol, the hour that is returned is based on a 24-hour clock, and does not contain A.M. or P.M.<br>If date is a date literal, the specified year becomes a permanent part of that date. However, if date is enclosed in quotation marks ("" ""), and you omit the year, the current year is inserted in your code each time the date expression is evaluated. This makes it possible to write code that can be used in different years.<br>Example:<pre>Dim Quarter, DayOfYear, WeekOfYear\nQuarter    = DatePart(""q"", Now)\nDayOfYear  = DatePart(""y"", Now)\nWeekOfYear = DatePart(""ww"", Now)</pre>";
            public const string DateSerial = @"Returns a Variant of subtype Date for a specified year, month, and day.<br><b><i>DateSerial(year, month, day)</i></b><br><b>year</b> - number between 100 and 9999, inclusive, or a numeric expression.<br><b>month</b> - any numeric expression.<br><b>day</b> - any numeric expression.<br>To specify a date, such as December 31, 1991, the range of numbers for each DateSerial argument should be in the accepted range for the unit; that is, 1â€“31 for days and 1â€“12 for months. However, you can also specify relative dates for each argument using any numeric expression that represents some number of days, months, or years before or after a certain date.<br>Example:<pre>Dim MyDate1, MyDate2\nMyDate1 = DateSerial(1970, 1, 1)   ' Returns January 1, 1970.\nMyDate2 = DateSerial(1990 - 10, 8 - 2, 1 - 1)   ' Returns May 31, 1980.</pre>";
            public const string Day = @"Returns a whole number between 1 and 31, inclusive, representing the day of the month.<br><b><i>Day(date)</i></b><br>The date argument is any expression that can represent a date. If date contains Null, Null is returned.<br>Example:<pre>Dim MyDay\nMyDay = Day(""October 19, 1962"")   ' MyDay contains 19.</pre>";
            public const string Hour = @"Returns a whole number between 0 and 23, inclusive, representing the hour of the day.<br><b><i>Hour(time)</i></b><br>The time argument is any expression that can represent a time. If time contains Null, Null is returned.<br>Example:<pre>Dim MyHour\nMyTime = Now\nMyHour = Hour(MyTime)   ' MyHour contains the number representing the current hour.</pre>";
            public const string IsDate = @"Returns a Boolean value indicating whether an expression can be converted to a date.<br><b><i>IsDate(expression)</i></b><br>The expression argument can be any date expression or string expression recognizable as a date or time.<br>IsDate returns True if the expression is a date or can be converted to a valid date; otherwise, it returns False. In Microsoft Windows, the range of valid dates is January 1, 100 A.D. through December 31, 9999 A.D.; the ranges vary among operating systems.<br>Example:<pre>Dim MyDate, YourDate, NoDate, MyCheck\nMyDate = ""October 19, 1962"": YourDate = #10/19/62#: NoDate = ""Hello""\nMyCheck = IsDate(MyDate)   ' Returns True.\nMyCheck = IsDate(YourDate)   ' Returns True.\nMyCheck = IsDate(NoDate)   ' Returns False.</pre>";
            public const string Minute = @"Returns a whole number between 0 and 59, inclusive, representing the minute of the hour.<br><b><i>Minute(time)</i></b><br>The time argument is any expression that can represent a time. If time contains Null, Null is returned.<br>Example:<pre>Dim MyMinute\nMyTime = Now\nMyMinute = Minute(MyTime)   ' MyMinute contains the number representing the current minute.</pre>";
            public const string Month = @"Returns a whole number between 1 and 12, inclusive, representing the month of the year.<br><b><i>Month(date)</i></b><br>The date argument is any expression that can represent a date. If date contains Null, Null is returned.<br>Example:<pre>Dim MyMonth\nMyMonth = Month(""October 19, 1962"")   ' MyMonth contains 10.</pre>";
            public const string MonthName = @"Returns a string indicating the specified month.<br><b><i>MonthName(month[, abbreviate])</i></b><br><b>month</b> - required. The numeric designation of the month. For example, January is 1, February is 2, and so on.<br><b>abbreviate</b> - optional. Boolean value that indicates if the month name is to be abbreviated. If omitted, the default is False, which means that the month name is not abbreviated.<br>Example:<pre>Dim MyVar\nMyVar = MonthName(10, True) ' MyVar contains ""Oct"". </pre>";
            public const string Now = @"Returns the current date and time according to the setting of your computer's system date and time.<br><b><i>Now</i></b><br>Example:<pre>Dim MyVar\nMyVar = Now ' MyVar contains the current date and time. </pre>";
            public const string Second = @"Returns a whole number between 0 and 59, inclusive, representing the second of the minute.<br><b><i>Second(time)</i></b><br>The time argument is any expression that can represent a time. If time contains Null, Null is returned.<br>Example:<pre>Dim MySecond\nMySecond = Second(Now) ' MySecond contains the number representing the current second.</pre>";
            public const string Weekday = @"Returns a whole number representing the day of the week.<br><b><i>Weekday(date, [firstdayofweek])</i></b><br><b>date</b> - required. Date expression you want to evaluate.<br><b>firstdayofweek</b> - optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values.<br>Example:<pre>Dim MyDate, MyWeekDay\nMyDate = #October 19, 1962#   ' Assign a date.\nMyWeekDay = Weekday(MyDate)   ' MyWeekDay contains 6 because MyDate represents a Friday.</pre>";
            public const string WeekdayName = @"Returns a string indicating the specified day of the week.<br><b><i>WeekdayName(weekday, abbreviate, firstdayofweek)</i></b><br><b>weekday</b> - required. The numeric designation for the day of the week. Numeric value of each day depends on setting of the firstdayofweek setting.<br><b>abbreviate</b> - optional. Boolean value that indicates if the weekday name is to be abbreviated. If omitted, the default is False, which means that the weekday name is not abbreviated.<br><b>firstdayofweek</b> - optional. Constant that specifies the day of the week. If not specified, Sunday is assumed. See Settings section for values.<br>Example:<pre>Dim MyDate\nMyDate = WeekDayName(6, True)   ' MyDate contains Fri.</pre>";
            public const string Year = @"Returns a whole number representing the year.<br><b><i>Year(date)</i></b><br>The date argument is any expression that can represent a date. If date contains Null, Null is returned.<br>Example:<pre>Dim MyYear\nMyYear = Year(""October 19, 1962"")   ' MyYear contains 1962.</pre>";
            public const string Date = @"Returns the current system date.<br><b><i>Date</i></b><br>Example:<pre>Dim MyVar\nMyVar = Date ' MyVar contains the current system date. </pre>";
            public const string Timer = @"Returns the number of seconds that have elapsed since 12:00 AM (midnight).<br><b><i>Timer</i></b><br>Example:<pre>Dim StartTime, EndTime, Elapsed\nMsgBox ""Click to start timer."", vbExclamation\nStartTime = Timer\nMsgBox ""Click to end timer."", vbExclamation\nElapsed = Timer - StartTime\nMsgBox ""Elapsed Seconds: "" & Elapsed, vbInformation ' This works only if midnight does not occur between the two clicks.</pre>";
            public const string TimeSerial = @"Returns a Variant of subtype Date containing the time for a specific hour, minute, and second.<br><b><i>TimeSerial(hour, minute, second)</i></b><br><b>hour</b> - number between 0 (12:00 A.M.) and 23 (11:00 P.M.), inclusive, or a numeric expression.<br><b>minute</b> - any numeric expression.<br><b>second</b> - any numeric expression.<br>To specify a time, such as 11:59:59, the range of numbers for each TimeSerial argument should be in the accepted range for the unit; that is, 0â€“23 for hours and 0â€“59 for minutes and seconds. However, you can also specify relative times for each argument using any numeric expression that represents some number of hours, minutes, or seconds before or after a certain time.<br>When any argument exceeds the accepted range for that argument, it increments to the next larger unit as appropriate. For example, if you specify 75 minutes, it is evaluated as one hour and 15 minutes. However, if any single argument is outside the range -32,768 to 32,767, or if the time specified by the three arguments, either directly or by expression, causes the date to fall outside the acceptable range of dates, an error occurs.<br>Example:<pre>Dim MyTime1\nMyTime1 = TimeSerial(12 - 6, -15, 0) ' Returns 5:45:00 AM.</pre>";
            public const string TimeValue = @"Returns a Variant of subtype Date containing the time.<br><b><i>TimeValue(time)</i></b><br>The time argument is usually a string expression representing a time from 0:00:00 (12:00:00 A.M.) to 23:59:59 (11:59:59 P.M.), inclusive. However, time can also be any expression that represents a time in that range. If time contains Null, Null is returned.<br>You can enter valid times using a 12-hour or 24-hour clock. For example, ""2:24PM"" and ""14:24"" are both valid time arguments. If the time argument contains date information, TimeValue doesn't return the date information. However, if time includes invalid date information, an error occurs.Example:<pre>Dim MyTime\nMyTime = TimeValue(""4:35:17 PM"")   ' MyTime contains 4:35:17 PM.</pre>";
        }
        public static class VBMiscFunctions
        {
            public const string InputBox = @"Displays a prompt in a dialog box, waits for the user to input text or click a button, and returns the contents of the text box.<br><b><i>InputBox(prompt[, title][, default][, xpos][, ypos][, helpfile, context])</i></b><br><b>prompt</b> - string expression displayed as the message in the dialog box. The maximum length of prompt is approximately 1024 characters, depending on the width of the characters used. If prompt consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a linefeed character (Chr(10)), or carriage returnâ€“linefeed character combination (Chr(13) & Chr(10)) between each line.<br><b>title</b> - string expression displayed in the title bar of the dialog box. If you omit title, the application name is placed in the title bar.<br><b>default</b> - string expression displayed in the text box as the default response if no other input is provided. If you omit default, the text box is displayed empty.<br><b>xpos</b> - numeric expression that specifies, in twips, the horizontal distance of the left edge of the dialog box from the left edge of the screen. If xpos is omitted, the dialog box is horizontally centered.<br><b>ypos</b> - numeric expression that specifies, in twips, the vertical distance of the upper edge of the dialog box from the top of the screen. If ypos is omitted, the dialog box is vertically positioned approximately one-third of the way down the screen.<br><b>helpfile</b> - string expression that identifies the Help file to use to provide context-sensitive Help for the dialog box. If helpfile is provided, context must also be provided.<br><b>context</b> - numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided.<br>When both helpfile and context are supplied, a Help button is automatically added to the dialog box.<br>If the user clicks OK or presses ENTER, the InputBox function returns whatever is in the text box. If the user clicks Cancel, the function returns a zero-length string ("""").<br>Example:<pre>Dim Input\nInput = InputBox(""Enter your name"") \nMsgBox (""You entered: "" & Input)</pre>";
            public const string MsgBox = @"Displays a message in a dialog box, waits for the user to click a button, and returns a value indicating which button the user clicked.<br><b><i>MsgBox(prompt[, buttons][, title][, helpfile, context])</i></b><br><b>prompt</b> - string expression displayed as the message in the dialog box. The maximum length of prompt is approximately 1024 characters, depending on the width of the characters used. If prompt consists of more than one line, you can separate the lines using a carriage return character (Chr(13)), a linefeed character (Chr(10)), or carriage returnâ€“linefeed character combination (Chr(13) & Chr(10)) between each line.<br><b>buttons</b> - numeric expression that is the sum of values specifying the number and type of buttons to display, the icon style to use, the identity of the default button, and the modality of the message box. See Settings section for values. If omitted, the default value for buttons is 0.<br><b>title</b> - string expression displayed in the title bar of the dialog box. If you omit title, the application name is placed in the title bar.<br><b>helpfile</b> - string expression that identifies the Help file to use to provide context-sensitive Help for the dialog box. If helpfile is provided, context must also be provided.<br><b>context</b> - numeric expression that identifies the Help context number assigned by the Help author to the appropriate Help topic. If context is provided, helpfile must also be provided.<br>The buttons argument settings are:<br><b>vbOKOnly</b> (0)  - display OK button only.<br><b>vbOKCancel</b> (1) - display OK and Cancel buttons.<br><b>vbAbortRetryIgnore</b> (2) - display Abort, Retry, and Ignore buttons.<br><b>vbYesNoCancel</b> (3) - display Yes, No, and Cancel buttons.<br><b>vbYesNo</b> - (4) display Yes and No buttons.<br><b>vbRetryCancel</b> - (5) display Retry and Cancel buttons.<br><b>vbCritical</b> (16) - display Critical Message icon.<br><b>vbQuestion</b> (32) - display Warning Query icon.<br><b>vbExclamation</b> (48) - display Warning Message icon.<br><b>vbInformation</b> (64) - display Information Message icon.<br><b>vbDefaultButton1</b> (0) - first button is default.<br><b>vbDefaultButton2</b> (256) - second button is default.<br><b>vbDefaultButton3</b> (512) - third button is default.<br><b>vbDefaultButton4</b> (768) - fourth button is default.<br><b>vbApplicationModal</b> (0) - application modal. The user must respond to the message box before continuing work in the current application.<br><b>vbSystemModal</b> (4096) - system modal. On Microsoft Win16 systems, all applications are suspended until the user responds to the message box. On Microsoft Win32 systems, this constant provides an application modal message box that always remains on top of any other programs that you have running<br>The first group of values (0â€“5) describes the number and type of buttons displayed in the dialog box; the second group (16, 32, 48, 64) describes the icon style; the third group (0, 256, 512, 768) determines which button is the default; and the fourth group (0, 4096) determines the modality of the message box. When adding numbers to create a final value for the argument buttons, use only one number from each group.<br>The MsgBox function has the following return values:<br><b>vbOK</b> (1) - OK<br><b>vbCancel</b> (2) - cancel<br><b>vbAbort</b> (3) - abort<br><b>vbRetry</b> (4) - retry<br><b>vbIgnore</b> (5) - ignore<br><b>vbYes</b> (6) - yes<br><b>vbNo</b> (7)- no<br>When both helpfile and context are provided, the user can press F1 to view the Help topic corresponding to the context.<br>If the dialog box displays a Cancel button, pressing the ESC key has the same effect as clicking Cancel. If the dialog box contains a Help button, context-sensitive Help is provided for the dialog box. However, no value is returned until one of the other buttons is clicked.<br>When the MsgBox function is used with Microsoft Internet Explorer, the title of any dialog presented always contains ""VBScript:"" to differentiate it from standard system dialogs.<br>Example:<pre>result = MsgBox (""File Save Error"", 2, ""File Save Error"")\nDim message\nSelect Case result\n  Case 3\n    message = ""You chose Abort""\n  Case 4\n    message = ""You chose Retry""\n  Case 5\n    message = ""You chose Ignore""\nEnd Select\nMsgBox message, vbInformation</pre>";
            public const string Rgb = @"Returns a whole number representing an RGB color value.<br><b><i>RGB(red, green, blue)</i></b><br><b>red</b> - number in the range 0-255 representing the red component of the color.<br><b>green</b> - number in the range 0-255 representing the green component of the color.<br><b>blue</b> - number in the range 0-255 representing the blue component of the color.<br>Application methods and properties that accept a color specification expect that specification to be a number representing an RGB color value. An RGB color value specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.<br>The low-order byte contains the value for red, the middle byte contains the value for green, and the high-order byte contains the value for blue.<br>Example:<pre>Dim MyRgb\nMyRgb = Rgb(100, 50, 200)   ' Returns a color (100,50,200).</pre>";
            public const string Argb = @"Returns a whole number representing an ARGB color value.<br><b><i>ARGB(alpha, red, green, blue)</i></b><br><b>alpha</b> - number in the range 0-255 representing the alpha (opacity) component of the color.<br><b>red</b> - number in the range 0-255 representing the red component of the color.<br><b>green</b> - number in the range 0-255 representing the green component of the color.<br><b>blue</b> - number in the range 0-255 representing the blue component of the color.<br>Example:<pre>Dim MyArgb\nMyArgb = Argb(50, 100, 50, 200)   ' Returns a value with opacity=50 and color (100,50,200).</pre>";
        }
        public static class C1RepScriptItems
        {
            public const string Page = @"Gets or sets the value of C1FlexReport.Page property. <br>This property is initialized by the control when it starts rendering a report, and is incremented at each page break. Can be changed using scripts.";
            public const string Pages = @"Returns a token that gets replaced with the total page count when the report finishes rendering. <br>This is a read-only property that is typically used in page header or footer fields, e.g.: <br><b>""Page "" & Page & "" of "" & Pages</b>";
            public const string Report = @"Gets a reference to the C1FlexReport object, so you can access the full C1FlexReport object model from your scripts and expressions, e.g.:<br><b>""Fields: "" & Report.Fields.Count""</b>";
            public const string Parameters = @"Gets a reference to the C1FlexReport.Parameters collection.";
            public const string DataSources = @"Gets a reference to the C1FlexReport.DataSources collection.";
            public const string Cancel = @"Set Cancel to True to cancel the report rendering process, e.g.: <br><b>If Page > 100 Then Cancel = True</b>";
            public const string AggrScopeDesc = @"<br><b>Scope:</b> When used in a report header, aggregates over the entire dataset. When used in a group header or footer, aggregates over the group. <br>The optional <b>filterExpression</b> is evaluated before each value is about to be aggregated. If the filter evaluates to False, the value is skipped and not aggergated.<br>The optional <b>dataScope</b> specifies the scope for the aggregate, and can be a group object or group name.";
            public const string AggrAvgDesc = @"Returns the average value of <b>expression</b>.";
            public const string AggrAvgSamples = @"<br><i>Examples:</i> <br><b>Avg(SalesAmount)</b> calculates the average sales over the report or group.<br><b>Avg(SalesAmount, ProductType = 3)</b> calculates the average sales for a certain type of product.";
            public const string AggrCountDesc = @"Returns the count of records with non-null values of <b>expression</b>. Use asterisk to include all records.";
            public const string AggrCountSamples = @"<br><i>Examples:</i> <br><b>Count(Employees.Address)</b> counts the number of employees with valid (non-null) addresses.<br><b>Count(*)</b> counts the total number of employees.";
            public const string AggrCountDistinctDesc = @"Returns the count of records with distinct non-null values of <b>expression</b>.";
            public const string AggrMinDesc = @"Returns the minimum value for <b>expression</b>.";
            public const string AggrMaxDesc = @"Returns the maximum value for <b>expression</b>.";
            public const string AggrRangeDesc = @"Returns the range (difference) between the maximum and minimum values for <b>expression</b>.";
            public const string AggrStDevDesc = @"Returns the standard deviation for <b>expression</b>. The values are calculated using the sample (n-1) formulas, as in SQL and Microsoft Excel.";
            public const string AggrVarDesc = @"Returns the variance for <b>expression</b>. The values are calculated using the sample (n-1) formulas, as in SQL and Microsoft Excel.";
            public const string AggrStDevPDesc = @"Returns the standard deviation for <b>expression</b>. The values are calculated using the population (n) formulas, as in SQL and Microsoft Excel.";
            public const string AggrVarPDesc = @"Returns the variance for <b>expression</b>. The values are calculated using the population (n) formulas, as in SQL and Microsoft Excel.";
            public const string AggrSumDesc = @"Returns the sum of all values for <b>expression</b>.";
            public const string AggrMedianDesc = @"Returns the median of all values for <b>expression</b>.";
            public const string AggrModeDesc = @"Returns the most frequently occurring of all values for <b>expression</b>.";
            public const string LikeDesc = @"Compares <b>str</b> to <b>template</b>, returns True if <b>str</b> matches <b>template</b>, False otherwise. <br><b>template</b> may contain the wildcard character <b>%</b> which matches any sequence of characters. This function is case-sensitive. <br>Examples: <br><b>Like(""abc"", ""%bc"") returns True.</b>  <br><b>Like(""abc"", ""%bcd"") returns False.</b>  <br>This function is modeled after the SQL LIKE operator.";
            public const string InDesc = @"Tests whether <b>obj</b> is among <b>obj</b>, ..., <b>objN</b>, returns True if <b>obj</b> is found, False otherwise. This function is case-sensitive. <br>Examples: <br><b>In(1, 1, 2, 3) returns True.</b>  <br><b>In(1, 2, 3) returns False.</b>  <br>This function is modeled after the SQL IN operator.";
            public const string IifDesc = @"Evaluates <b>condition</b>, if it evaluated to True returns <b>trueValue</b>, otherwise returns <b>falseValue</b>.";
            public const string FormatDesc = @"Converts <b>value</b> to a string formatted according to instructions contained in <b>formatStr</b>. <br><b>value</b> may be a number, Boolean, date, or string. <br><b>formatStr</b> is a string built using syntax similar to the format string used in Visual Basic or VBA.";
            public const string GroupPageDesc = @"Returns the current page number within a group.<br>If <b>groupId</b> is omitted, returns the page number for the current group.<br>If specified, returns the page number for the specified group (this may be used to print the parent group's page in a nested group).<br>The <b>groupId</b> may be a group name, a group index, or a reference to the group.";
            public const string GroupPagesDesc = @"Returns the total page count for a group.<br>If <b>groupId</b> is omitted, returns the page count for the current group.<br>If specified, returns the page count for the specified group.<br>The <b>groupId</b> may be a group name, a group index, or a reference to the group.";
        }
        public static class DataFilterScriptItems
        {
            public const string LikeDesc = @"Compares <b>column</b> to <b>pattern</b>. Pattern may contain wildcards. <br>Both the <b>*</b> and <b>%</b> can be used interchangeably for wildcard characters. <br>If the string in a LIKE clause contains a <b>*</b> or <b>%</b>, those characters should be enclosed in brackets (<b>[]</b>). <br>If a bracket is in the clause, each bracket character should be enclosed in brackets (for example <b>[[]</b> or <b>[]]</b>). <br>A wildcard is allowed at the start and/or at the end of a pattern, but not in the middle.";
            public const string InDesc = @"Compares <b>column</b> to values <b>val1...valN</b>. E.g.<b>UserId IN ( 101, 102, 103 )</b>.";
            public const string SumDesc = @"The sum aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string AvgDesc = @"The average aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string MinDesc = @"The minimum aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string MaxDesc = @"The maximum aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string CountDesc = @"The count aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string StDevDesc = @"The statistical standard deviation aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string VarDesc = @"The statistical variance aggregate. <br>If a table has no rows, the aggregate functions will return <b>null</b>.";
            public const string ConvertDesc = @"Converts <b>expression</b> to a specified .NET Framework <b>type</b>. E.g. <b>Convert(total, 'System.Int32')</b>.";
            public const string LenDesc = @"Gets the length of string <b>expression</b>. E.g. <b>Len(ItemName)</b>.";
            public const string IsNullDesc = @"Checks <b>expression</b> and returns <b>replacementvalue</b> if it is <b>null</b>, otherwise returns the checked <b>expression</b> itself.";
            public const string IifDesc = @"Gets one of two values depending on the result of a logical expression. If <b>expression</b> is true, returns <b>truepart</b>, otherwise returns <b>falsepart</b>. <br>E.g. <b>IIF(total>1000, 'expensive', 'dear')</b>.";
            public const string TrimDesc = @"Removes all leading and trailing blank characters like \r, \n, \t, ' ' from <b>expression</b>.";
            public const string SubStringDesc = @"Gets a sub-string of the string <b>expression</b>, starting at <b>start</b>, with specified <b>length</b>.";
        }
    }

}
