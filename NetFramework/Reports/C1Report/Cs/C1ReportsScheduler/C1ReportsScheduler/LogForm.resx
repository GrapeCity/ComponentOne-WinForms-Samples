<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAAAGACoDAAAJgAAABAQAAAAABgAaAMAAM4MAAAoAAAAIAAAAEAAAAABABgAAAAAAAAA
        AABHAAAARwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAQ9D2l+X6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATdH2lOn6iuf6
        Isn1Ss/3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApur/W9n26f//5v//7v//wPX9W9n3DcT1jef/AAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        FMLw3v//y/f5ptvnx/H25f//6///6f//k+n7Ls31PdD3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZNjyler52P//pN7pdrvTeb7ThcXYq97p1fn6
        6v//8f//y/j9Ztz4D8X0guT/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAJMXu1///zP//z///r+fujc3dd7zTd7zTeLvRj8rctuTs4P/+7v//7///n+v7OND2Nc32
        uvD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcdn4j+v5zP//y///zf//z///
        0///yvr7p9/pg8TYdbvSdrvRd7vRmdDfw+vy6v//8///1/z/cN74Ecb0d+L/AAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAELvozP//md7peMPXltrmtPD0zf//z///0v//1v//wPL2ndfkeb3TdLjQ
        dLjQfLzTpNfk0fP37v//+P//b974P9D3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsur6YtvzxP//
        mODrbLzTbb3Tbr3TdMHWktXks+3yzv//0///1f//1f//turxkc7ecrjPcrbPbbPNw+vxzPr+G8fzAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANb3prfv9uf//vP//uf3+n+bvhNDfbbzTbLrSbbrScL3T
        j9Lir+rx0P//1v//2f//1P//rubultLi1v3/GMbzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAIb3nvf//t///uP//uv//vP//v///vf7+o+fvh9DfbbzRa7nRarjQbbvSitLjruTqtdLRq769q7u6
        bq++WMDbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuuv6XdnxrPr7asLXec3ekODqqPT4vP//
        vf//v///wv//wP//puvxitfnda2+fYKHfGpqdmdndGdncWhocGNicGVjg4GBAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAXszwjvL6pvr7Z8HXYr7TY73TZLvTar/VgtPimubvtfv8wf//wf//o62siXBvinp6
        k46PoqKitbSztbW0qqmqjIuNend3aGZmhoaGAAAAAAAAAAAAAAAAAAAAAAAAAAAAC67erf//p///qv//
        nvX4iuDqdMzeY7zTYrrSY7vRYbnRcMfbmZaWj3R0nJSVwb668N/O/+nM/+PE/+PD/+bI/+vW19PQlZaX
        cG1ucXBwAAAAAAAAAAAAAAAAAAAAAAAAKL3kqP//pP//pv//qP//qv//rf//q///l+zygtjlacbah5Sd
        mHl5qqWl4tTG/+XH/9/A/+HE/+LI/+XL/+XM/+HE/9y4/u3ara6vcW9vdnV1AAAAAAAAAAAAAAAAzO33
        SdHqnf7+bNDfdtfliejvnvn7qf//q///rf//r///ruXkn3l5q6Gh59bG/+PE/+HE/+HE/+DE/+DD/9/B
        /9/B/+TK/+fR/969/+zWp6epbGpqrK2tAAAAAAAAAAAAnNrvZ+Lzk/f6VrvTWL3TWLzTWbvTYsPXdtTj
        iuXunv3/qJ2dpomL1MzD/+TI/+PJ/+TK/+TL/+TK/+PJ/+LH/+HE/9/B/+HE/+nT/9689unchoaHamdn
        AAAAAAAAAAAAaMXmgfD4nf//lvz9hezyddrmZMjbWLvSWLrSV7vSX7fKrYGAuK2v+N7D/+bO/+bP/+fR
        /+fR/+jS/+nS/+vS/+bM/+PI/+DD/+LG/+fR/+LDvb6/bmpry8rKAAAAAAAANrHanP//n///nf//nP//
        nP//nf//mf7+h+3yd93ogbS/r4KC0MrF/+TI/+rX/+nV/+rX/+rX//DcyLiok4d86tO//+fP/+LH/+DD
        /+fQ/+HB5dzSfHl5mZaWAAAAAAAAG6fXML3gUNLpc+fzlv3+ov//oP//n///nf//m///qcfHsoiJ4tjK
        /+nT//Pq/+7e/+3d//Dg6trMPz9CbW5waWJd/eXQ/+bO/+LH/+PJ/+TJ+OfVhYOEe3NzAAAAAAAAAAAA
        AAAAwen3gtPvMbXjDarYLr7hUdPqcuj1lf//rsjGuIyN6drK/+3b//Xs//Po//Hk//nrtayjZ2hpu7u8
        Pz0708Kx9d7J/+bL/+PI/+XL/enWioeId25uAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwOr3gtPw
        MbfnUJ26u4qK6d7S/+vW//jx//fv//rx4dfPNDU1Q0FBenVxJygpVFFOzLuq8dnC/+TK/+XK8+LSiYSF
        jISEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvIyM3dXU/+PF//r1//z37efh
        Pj09Nzc49e3k///00cW6KCgqQkE/7tjC/+XM/+TI3tbMhnx9ubKyAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAyaCg0be5/ODE//ny//36SklILSws6OTf//z0//Xr//fp2cu9aWVf/+vU
        /+bO/+nPuLOygXJyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8eLiv5GS
        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
        AAD/BwAA//8AAA==
</value>
  </data>
</root>