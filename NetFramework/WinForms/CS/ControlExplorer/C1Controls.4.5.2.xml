<?xml version="1.0" encoding="utf-8" ?>
<controls>
  <control name="Barcode" icon="barcode.png" group="Utilities">
    <sample name="Overview" form="ControlExplorer.Barcode.Overview" short="This demo shows the supported barcode encodings" description="C1BarCode allows you to add barcode images to grid cells, reports, print documents and more. This sample shows some supported barcode encodings. Certain encodings will not render for every given value."/>
    <sample name="Printing" form="ControlExplorer.Barcode.PrintBarCodes" short="Render C1BarCodes to documents for printing" description="Render C1BarCodes to images for PrintDocuments using the Image property. The main advantage of using C1BarCode instead of barcode fonts is C1BarCode can be deployed with your application just like any regular assembly. Barcode fonts, on the other hand, must be installed into your clients Font directory (and they may not be royalty free)."/>
    <sample name="Bar and QR Codes" form="ControlExplorer.Barcode.BarCodeTypesSample" short="Shows supported Bar and QR code types" description="The ComponentOne Barcode for WinForms supports more than 30 Bar and QR code types." />
  </control>
  <control name="Bitmap" icon="bitmap.png" group="Utilities">
    <sample name="Overview" form="ControlExplorer.BitmapDemo.Overview" status="new" short="This demo shows C1Bitmap control base feature." description="This demo shows how to load an image from a data source into a C1Bitmap and how to use it to modify the image."/>
    <sample name="Rotating" form="ControlExplorer.BitmapDemo.Rotating" status="new" short="This demo shows  how to work with an image using C1Bitmap." description="This demo shows how to rotate image using C1Bitmap."/>
  </control>
  <control name="Calc Engine" icon="CalcEngine.png" status="new" group="Utilities">
    <sample name="ExcelEngineDemo" form="ControlExplorer.CalcEngine.ExcelEngineDemo" 
            short="This sample demonstrates how to use C1CalcEngine to calculate a simple Excel style formulas."
            description="This sample uses C1CalcEngine to operate with data mined from two grids that represented as two Excel-style sheets.The sheets can be addressed as 'sheet1' and 'sheet2' in the TextBox. Respectively the area for calculating is described as A1:B2, e.i. as in Excel. The first DataSource for CalcEngine is a DataTable descendant, a data source for the first grid. The second is the second grid itself, a descendant of C1FlexGrid. You can select areas in two grids to change the formula and calculate the sum."/>
    <sample name="VBAEngineDemo" form="ControlExplorer.CalcEngine.VBAEngineDemo"
            short="This sample demonstrates how to use C1CalcEngine to build a simple VBA style calculator."
            description="This sample uses C1CalcEngine to calculate 3 values for the details page. These are the name of the currently selected product, current sum and the common sum. You can change the data in the grid and formulas, and observe how to the calculated values change."/>
  </control>
  <control name="Calendar View" icon="calendarview.png" group="Scheduling">
    <sample name="Overview" form="ControlExplorer.CalendarView.Overview" short="This demo shows C1CalendarView layout features."
        description="C1CalendarView has rich layout settings. Change month or day title position, use vertical orientation or change the number of months to show..."/>
    <sample name="DateEdit" form="ControlExplorer.Input.DateEdit" short="The DateEdit control" description="The DateEdit control allows selecting and editing dates with support for masking, data validation, null values, maximum and minimum dates, watermark, custom date formats, and internationalization." />
  </control>
  <control name="Chart" icon="chart.png" group="Data Visualization">
    <sample name="Gallery" form="ControlExplorer.Chart.Gallery" short="This demo showcases most of the common chart types available" description="ComponentOne's C1Chart control offers over 80 different 2D and 3D chart types. C1Chart supports data labels, data highlighting, tooltips, trend lines, alarm zones, rotation, scrolling and it has advanced mouse tracking capabilities that make all forms of interaction possible. C1Chart offers extensive design customization including gradients, lighting effects, shadows, alpha-transparency and more. All design and data related features are highly customizable from the distance between each individual bar to the angle of Visual Effects lighting. This demo showcases most of the common chart types available."/>
    <sample name="Interaction" form="ControlExplorer.Chart.Interaction" short="This demo shows built-in interaction tools" description="C1Chart contains built-in tools that simplify the implementation of interactive behaviors for the end user. The end user can translate, scale, zoom and rotate the chart using combinations of the mouse and modifier keys. This demo loads data from Microsoft Excel files using ComponentOne Excel for .NET."/>
    <sample name="Pie Charts" form="ControlExplorer.Chart.PieCharts" short="Pie charts draw each series as a slice in a pie" description="Pie charts draw each series as a slice in a pie. The number of pies is the number of points in the data. Each pie displays the nth data point in each series. A slice of a pie chart can be emphasized by exploding it, which extrudes the slice from the rest of the pie."/>
    <sample name="Financial Charts" form="ControlExplorer.Chart.Financial" short="Hi-Lo, Hi-Lo-Open-Close and Candle charts" description="Hi-Lo charts combine two independent values to supply high and low data for each point in a series. These charts are used primarily in financial applications to show the high and low price for a given stock. In addition to showing the high and low value of a stock, Hi-Lo-Open-Close charts also provide open and close data for each point in the series. Candle charts are a special case of Hi-Lo-Open-Close charts. The candle (the solid bar between the opening and closing values) represents the change in stock price from opening to closing."/>
    <sample name="Gantt Charts" form="ControlExplorer.Chart.Gantt" short="Simle Gantt chart demo" description="C1Chart can be viewed as a Gantt chart to illustrate a timeline of various tasks and outline the critical activities to the project's completion. The activities/tasks are displayed along the left side of the chart and a timeline is shown at the top or bottom of the chart. The duration of each project's task is represented as a bar. The beginning of the bar indicates the start time of the activity or task. The end of the bar indicates the finish or completion time of the activity or task."/>
    <sample name="3D Charts" form="ControlExplorer.Chart.SurfaceCharts" short="Real 3D surface, bar, scatter and contour charts" description="For real 3D charts, Chart for WinForms includes the C1Chart3D control. Plot 3 dimensions of scatter, bar and surface charts. 3D surface charts display the data as a shaded or meshed surface in a 3D view with a Z-axis. These charts honor rotation and perspective control. C1Chart3D is also highly interactive. Hold down the left mouse button and move the mouse to rotate the chart. You can also use the following keyboard modifiers: Shift to translate, Ctrl to scale, and Alt to zoom."/>
    <sample name="Trend Lines" form="ControlExplorer.Chart.TrendLines" short="Built-in regression and non-regression trend lines" description="C1Chart supports various forms of trend lines for scatter, bar and line charts. Regression and non-regression trend lines can be set up at design-time or in code via the TrendLinesCollection. C1Chart also supports automatic statistics that report Mean, Median, Standard Deviation, Variance and Confidence intervals for the data. This demo shows trend lines, statistics, chart labels, and even custom dragging interaction."/>
    <sample name="Alarm Zones" form="ControlExplorer.Chart.AlarmZones" short="Alarm zones highlight regions of the plot" description="Alarm Zones are a series of bands or shapes that can be placed behind the plotted data, but in front of the chart background. Generally, Alarm Zones are used in much the same manner as grid lines, but the ability to modify the Alarm Zones allows them to be more useful and visually appealing. You can set up Alarm Zones which just based off of Y values, or use shapes (rectangles, ellipses, custom polygons) to highlight regions in both directions."/>
    <sample name="Histogram" form="ControlExplorer.Chart.Histogram" short="Combination scatter data and a histogram" description="This demo shows a combination chart with scatter data and a histogram. The histogram shows the distribution of the distance (in data coordinates) from each of the scatter data points to the marker intersection (crosshairs). A normal curve is provided for comparison of the histogram to the normal (Gaussian) distribution. This demo also shows automatic data labels and double Y axes."/>
    <sample name="Chart Editors" form="ControlExplorer.Chart.ChartEditor" short="Run-time chart set-up and customization" description="Give the power of chart creation and modification to the end-users. The design-time dialogs and wizards for quick chart modification can be displayed at runtime. Users can change the chart type, data bindings, visual effects and much more."/>
  </control>
  <control name="Dashboard" icon="dashboardlayout.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.DashboardLayout.Overview" short="This demo shows the basic features of C1DashboardLayout" description="Dashboard Layout visualizes data. It helps to organize and combining the elements into a screen report for instant data monitoring."/>
    <sample name="Save And Load Layout" form="ControlExplorer.DashboardLayout.SaveLoadLayout" short="This demo shows how to save and load C1DashboardLayout layout." description="Save and load layout from file or stream using the SaveLayout and LoadLayout methods."/>
    <sample name="Layout Types" form="ControlExplorer.DashboardLayout.LayoutTypes" short="This demo shows how the C1DashboardLayout looks at different layout types." description="Dashboard Layout has different layout types which defines some behavior and appearance features."/>
  </control>
  <control name="Data Collection" icon="datacollection.png" group="Grids and Data Management">
    <sample name="Overview" form="ControlExplorer.DataCollection.Overview"
       short="Shows how to use DataCollection in FlexGrid for WinForms"
       description="DataCollection is a series of cross-platform observable collections with features like sorting, grouping and filtering and data virtualization techniques like cursor and pagination.\r\n
\r\nThis sample shows how to use DataCollection as a DataSource for FlexGrid control. "/>
    <sample name="FlexGrid Virtualization" form="ControlExplorer.DataCollection.FlexGridVirtualization"
        short="Shows how to load data on demand through C1VirtualDataCollection"
        description="Incremental loading or on-demand loading is a powerful feature for applications where data is loaded in chunks as the user scroll down a list in real time.\r\n
\r\nC1VirtualDataCollection supports incremental loading for data bound controls, such as FlexGrid and DataGridView. "/>
    <sample name="DataGridView Virtualization" form="ControlExplorer.DataCollection.DataGridViewVirtualization"
        short="Shows how to load data on demand through C1VirtualDataCollection"
        description="Incremental loading or on-demand loading is a powerful feature for applications where data is loaded in chunks as the user scroll down a list in real time.\r\n
\r\nC1VirtualDataCollection supports incremental loading for data bound controls, such as FlexGrid and DataGridView. "/>
    <sample name="YouTubeChannels" form="ControlExplorer.DataCollection.YouTubeChannels"
        short="Shows how to load and group data through C1DataCollection"
        description="This sample shows how to load information about YouTube videos and group them by channel using C1DataCollection.GroupAsync method. The grouped data are shown in the unbound FlexGrid control. "/>
  </control>
  <control name="Data Filters" icon="datafilter.png" status="new" group="Grids and Data Management" newFeatureName="Filter Editor">
    <sample name="Overview" form="ControlExplorer.DataFilter.Overview"
        short="This demo shows the basic features of C1DataFilter"
        description="The DataFilter lets users filter data based on criteria's. It makes it easy to create filters from data sources, filters can be autogenerated or created manually. The Accordion based filtering UI can be attached to any control or information screen to provide intuitive filtering experience."/>
    <sample name="Filter Editor" form="ControlExplorer.DataFilter.FilterEditor" status="new"
        short="This demo shows the basic features of C1FilterEditor"
        description="The FilterEditor allows end-users to create complex filter criteria. The TreeView based filtering UI can be attached to any control or information screen. For every operation control shows drop-down hints with available options."/>
  </control>
  <control name="FlexChart" icon="flexchart.png" status="popular" group="Data Visualization" >
    <sample name="Introduction" form="ControlExplorer.FlexChart.Intro"
        short="FlexChart and FlexPie. Explore FlexChart’s essential features."
        description="Explore FlexChart’s essential features, including:\r\n
-   Elements such as labels, legends, headers, and footers;\r\n
-   Interactive features such as line markers, multiple axes…;\r\n
-   Data binding;\r\n
-   A variety of chart types, from basic bar, pie, and line graphs to more complex financial charts.\r\n
More samples are available in the FlexChartExplorer application."
  />
    <sample name="Axis Scrollbar" form="ControlExplorer.FlexChart.AxisScrollbarDemo"
       short="AxisScrollbar gives you an option of adding scrollbar to the axis of the chart.."
       description="AxisScrollbar gives you an option of adding scrollbar to the axis of the chart."
  />
    <sample name="Funnel Chart" form="ControlExplorer.FlexChart.FunnelChartIntro"
        short="This demo shows how to create and customize a Funnel Chart."
        description="More samples are available in the FlexChart101 application."
  />
    <sample name="TreeMap" form="ControlExplorer.FlexChart.TreeMapDemo"
      short="This demo shows TreeMap's basic features."
      description="TreeMap control displays hierarchical data as a set of nested rectangles. A node's rectangle has an area proportional to a value of data item's property which is specified by Binding property. The BindingName property specifies data item's property that is shown in rectangle label."
  />
    <sample name="FlexChart Animation" form="ControlExplorer.FlexChart.FlexChartAnimation"
      short="FlexChart comes with advanced animation options for loading, updating, and adding new data."
      description="FlexChart comes with advanced animation options for loading, updating, and adding new data."
  />
    <sample name="FlexPie Animation" form="ControlExplorer.FlexChart.FlexPieAnimation"
      short="FlexPie comes with advanced animation options for loading, updating, and adding new data."
      description="FlexPie comes with advanced animation options for loading, updating, and adding new data."
  />
    <sample name="Multiple Pies" form="ControlExplorer.FlexChart.MultiPie"
      short="The view shows how to create multiple pie charts based on the same data source."
      description="The view shows how to create multiple pie charts based on the same data source. To create multiple pie charts, just specify several comma-separated properties in FlexPie's Binding." />
    <sample name="Custom Animation" form="ControlExplorer.FlexChart.CustomAnimation"
      short="This view shows how to customize chart animation with AnimationTransform event."
      description="This view shows how to customize chart animation with AnimationTransform event."
  />

    <sample name="FlexChartExplorer..." form="ComponentOne\Demos\WinForms Edition\FlexChart\FlexChartExplorer.exe"/>
  </control>
  <control name="FinancialChart" icon="financialchart.png" group="Data Visualization"
       tooltip="Run FinancialChart Explorer..."
       link="ComponentOne\Demos\WinForms Edition\FinancialChartExplorer\FinancialChartExplorer.exe"/>
  <control name="DockingTab" icon="dockingtab.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.DockingTab.Overview" short="This demo shows all common properties for C1DockingTab" description="The C1DockingTab control implements the familiar tab control interface but it also includes a variety of features to visually enhance and customize the control. In addition to the appearance properties, C1DockingTab has several useful behavioral properties for closing tab pages, rearranging tabs, and auto-hiding capabilities."/>
    <sample name="Docking" form="ControlExplorer.DockingTab.NewDocking" short="Float and dock tabs to create different workspaces" description="C1DockingTabs can float and dock to any edge of the application. Choose among four different docking styles, including Visual Studio 2010 style. To undock and float a C1DockingTab, position your mouse over the tab or the caption bar. Then, click and drag to undock. When dragging tabs near the edges of the form you will notice docking rectangles appear signaling where to dock. In addition, C1DockingTab supports auto-hiding functionality where tabs can be minimized to slide in and out."/>
    <sample name="Hide Tabs" form="ControlExplorer.DockingTab.HideTabs" short="This demo shows a wizard UI created by hiding the C1DockingTab tabs" description="Hide the tabs of C1DockingTab to easily create multi-page forms with full drag and drop design-time support for each page." />
  </control>
  <control name="DynamicHelp" icon="dynamichelp.png" group="Utilities">
    <sample name="Overview" form="ControlExplorer.DynamicHelp.DynamicHelp" short="This demo shows the basic features of C1DynamicHelp" description="C1DynamicHelp improves the usability of your application by offering immediate and relevant Help as it is needed, right within the interface of the application. A separate Help system doesn't need to be opened and searched. Software developers can map topics to controls at design time, or Help Authors can use authoring mode, a special run-time mode with a simple interface, to do the mapping themselves. The supported Help formats include HTML help and NetHelp. You can also extend the HelpProvider interface to have DynamicHelp work with other formats."/>
    <sample name="Ice Cream Simulator" form="ControlExplorer.DynamicHelp.IceCreamSimulator" short="A real-world demo of C1DynamicHelp usage" description="Use the Ice Cream Simulator below to generate an ice cream creation. You will see how DynamicHelp provides useful information as you work in the application. The Help content used in this demo was created from simple Word files using ComponentOne's Doc-To-Help."/>
  </control>
  <control name="Editor" icon="editor.png" group="Input and Editing">
    <sample name="Overview" form="ControlExplorer.Editor.Editor" short="This demo shows C1Editor and the provided toolstrips" description="C1Editor is a text editor control that can be used to edit Xhtml in both design and source code modes. Insert tables, hyperlinks, and formatted text easily using the built-in toolbars or provide your own custom UI. As an Xhtml editor, Editor supports CSS and custom tags. It also has full printing, clipboard, history of changes, and find/replace support. Editor even includes some smart code clean-up routines that can automatically remove empty tags, close unclosed tags and otherwise improve messy Xml."/>
    <sample name="Syntax Highlight" form="ControlExplorer.Editor.SyntaxHighlight" short="This demo shows how to implement syntax-highlighting" description="This sample shows how to implement a syntax-highlighting editor using a C1Editor. The sample keeps track of any changes made to the document, and applies a list of regular expressions/style definitions to highlight the document. The content colors are the same as seen in a Visual Studio C# file (blue reserved words, green comments, red strings, and so on). The mechanism used is based on regular expressions and can be easily customized to apply other syntax rules."/>
    <sample name="RTF Editor" form="ControlExplorer.Editor.RTFEditor" short="This sample shows how the C1Editor can be used for Loading and Saving Text in the RTF Format."/>
  </control>
  <control name="Excel" icon="excel.png" group="Reporting and Documents">
    <sample name="Creating Worksheets" form="ControlExplorer.Excel.MultipleWorksheets" short="This demo shows creation of Excel files from C# code" description="With ComponentOne Excel for .NET you can create Microsoft Excel files directly from your application's code. The possibilities are endless with an easy-to-manipulate Excel object model exposed in your code. Create Excel files from data that doesn't directly support Excel exportation like any grid, schedule or chart. Excel for .NET supports formulas, cell styles and Excel formatting. This sample creates a workbook with NorthWind product information using the C1XLBook control. Each product category is placed on a separate worksheet."/>
    <sample name="Loading Files" form="ControlExplorer.Chart.Interaction" short="This demo shows loading Excel files into a C1Chart control" description="Excel for .NET makes it easy to read Excel files into your applications and you don't even need to have Microsoft® Excel installed! You can use the data from your Excel files in any number of ways. In this demo we use the C1XLBook component to load and extract the data into arrays which are used as the data source for our C1Chart control." />
  </control>
  <control name="Expressions" icon="expressioneditor.png" group="Utilities">
    <sample name="Overview" form="ControlExplorer.ExpressionEditor.Overview"
        short="This demo shows ExpressionEditor UI and layout features."
        description="The ExpressionEditor control makes it easy to create expressions to perform calculations for users.\r\n
      \r\nYou can customize the appearance and behavior of the ExpressionEditor, enable or disable syntax highlighting and underline errors. Use auto compilation and other features designed for your convenience."/>
    <sample name="FlexGrid integration" form="ControlExplorer.ExpressionEditor.GridIntegration"
        short="This demo shows how you can perform column calculations within FlexGrid using ExpressionEditor."
        description="Easy integration with FlexGrid and True DBGrid controls. \r\n
      \r\nJust add reference to C1.Win.ExpressionEditor and set Expression properties for column. To allow editing expression at runtime, set the Column.AllowExpressionEditing property to true."/>
    <sample name="FlexChart integration" form="ControlExplorer.ExpressionEditor.ChartIntegration"
        short="This demo shows how to integrate ExpressionEditor with FlexChart."
        description="You can use the ExpressionEditor to create filtering expression. Let's see how it works with FlexChart."/>
  </control>
  <control name="FlexGrid" icon="flexgrid.png" status="new,popular" group="Grids and Data Management" newFeatureName="Column Context Menu">
    <category name="Overview">
      <!-- overview?, Column Order, Formatting, Performance, Unbound Mode -->
      <sample name="See it in action" form="ControlExplorer.FlexGrid.Overview" short="See it in action" description="FlexGrid is a data grid control with a lightweight, flexible object model. It offers many unique features such as unbound mode, flexible cell merging, and multi-cell row and column headers."/>
      <sample name="Filtering" form="ControlExplorer.FlexGrid.CustomFiltering" short="Built-in and custom filters" description="FlexGrid provides three built-in filters that allow filtering most data types easily and efficiently. Value filters show a list of values present in the column and allow the user to select which specific values should be displayed. Conditional filters show two conditions defined by an operator and a parameter (e.g. 'greater than' and '2') and allows the user to combine multiple operators using AND and OR conditions. In some cases, you may want to implement custom filtering by creating a filter class and an editor class which allows users to configure the filter at runtime. This demo shows default text and numeric filtering, as well as custom color, date and range filtering."/>
      <sample name="Scrolling" form="ControlExplorer.FlexGrid.Scrolling" short="Scrolling features" description="Turn on delayed scrolling by just setting the ScrollOptions property. Using ShowScrollTip event, you can set a scroll tip based on the current scroll position and sort order. "/>
      <sample name="Freezing" form="ControlExplorer.FlexGrid.Freezing" short="Freezing features" description="FlexGrid supports freezing rows and columns both from code and by end-user. To allow the user to freeze rows and columns with the mouse, set the AllowFreezing property to Columns to freeze only columns, Rows to freeze only rows, or Both to freeze both columns and rows."/>
      <sample name="Performance" form="ControlExplorer.FlexGrid.Performance" short="See optimization techniques for loading large data sets" description="FlexGrid is capable of handling millions of records and includes a few tricks for getting optimal performance. For instance, set the Redraw property to false before data binding to prevent the grid from painting during load time. Set the AutoResize property to false to turn off automatic column and row resize, which can be expensive for larger data sets. Click 'Generate Items' in this demo to fill a list of items and populate the FlexGrid."/>
      <sample name="Unbound" form="ControlExplorer.FlexGrid.Unbound" short="This demo shows FlexGrid as a spreadsheet" description="FlexGrid is designed for optimal performance in both bound and unbound modes. When working with an unbound FlexGrid, you have complete control over column behavior. In this demo we created a form where users enter Proceeds and Payments and we wired up the remaining columns to calculate new values."/>
    </category>
    <category name="Columns">
      <sample name="Column Sizing" form="ControlExplorer.FlexGrid.ColumnSizingMethods" short="This demo shows different sizing methods of FlexGrid's columns" description="FlexGrid supports different column sizing modes. Columns can have fixed size with manually assigned values. Column size can be adjusted by content using AutoSizeCols method. Star-sizing allows you to specify the width of a column with respect to the total width available."/>
      <sample name="Sparkline" form="ControlExplorer.FlexGrid.Sparkline" short="This demo shows how to use sparklines in FlexGrid" description="The Sparkline property of column is used for sparkline customization. You can change the sparkline type, the series color, the showing and color of different marker types and X axis, line weight for the Line sparkline type and the distance between bars for the WinLoss and Column types."/>
      <sample name="BulletGraph" form="ControlExplorer.FlexGrid.FlexGridWithBulletGraph" short="This demo shows how to use BulletGraph in FlexGrid" description="BulletGraph can be used in FlexGrid to draw it in a cell."/>
      <sample name="Column Footers" form="ControlExplorer.FlexGrid.ColumnFooters" short="This demo shows how to use column footers in FlexGrid" description="Footers can be shown in FlexGrid columns, the footer can be fixed or as an additional row at the end, each column footer can show predefined calculated aggregates like sum, avg, min, max. Footers can also show values based on expressions, i.e. calculations based on several columns. The feature comes with full design time support to add columns footers with expressions and captions."/>
      <sample name="Column Context Menu" status="new" form="ControlExplorer.FlexGrid.ColumnContextMenu" short="This demo shows how to use the context menu of FlexGrid's columns." description="Column context menu provides a simple and convenient way to work with FlexGrid columns. FlexGrid provides built-in column context menu, but you can also customize it to suit your needs, for example, add a filter editor and condition formatting."/>
    </category>
    <category name="Data Binding">
      <!-- BindingList, EntityFramework, TreeListView, Data Tree, Virtual Mode-->
      <sample name="DataTable" form="ControlExplorer.FlexGrid.BaseDataBoundForm" short="This demo shows how to bind FlexGrid to DataTable" description="To bind FlexGrid to a data table, assign the data source object to the grid's DataSource property. If the data source object contains more than one table, you must also set the DataMember property a string that specifies which table should be used. \r\n
   \r\nWhen you assign a new data source to the grid, it will automatically refresh its columns according to the data source structure and fill rows with data. "/>
      <sample name="Data Tree" form="ControlExplorer.FlexGrid.DataTrees" short="This demo shows custom hiearchical data-binding" description="When FlexGrid is bound to a hierarchical data source, each master record can be expanded/collapsed to show/hide the details in child grids, which may in turn contain more details. The result is a 'data tree' similar to the type of grid presented by Microsoft Access when displaying hierarchical data. This is accomplished by deriving a control (C1FlexDataTree) from FlexGrid. When bound, the control detects subordinate data sources and creates additional instances of itself to display child tables."/>
    </category>
    <category name="Row Details">
      <!-- InputPanel, FlexGrid, Inheritance, Custom-->
      <sample name="InputPanel" form="ControlExplorer.FlexGrid.RowDetails.InputPanelSample" short="This demo shows how to use InputPanel as a row detail control for inline editing"
          description="Row detail allow to show additional content in the expandable area after the regular row.\r\n 
       \r\nTo use row detail for inline editing, set the RowDetailProvider property to the lambda expression returning a new instance of the C1InputPanelRowDetail class."/>
      <sample name="FlexGrid" form="ControlExplorer.FlexGrid.RowDetails.FlexGridSample" short="This demo shows how to use FlexGrid for master-detail data presentation"
          description="Row details allow to show additional content in the expandable area after the regular row.\r\n 
       \r\nYou can use row detail for master-detail data presentation by using C1FlexGridRowDetail control."/>
      <sample name="Inheritance" form="ControlExplorer.FlexGrid.RowDetails.InheritanceSample" short="This demo shows how to customize C1InputPanelRowDetail control"
          description="Row details allow to show additional content in the expandable area after the regular row.\r\n 
       \r\nTo customize appearance or functionality of the standard detail control, you can derive the new row detail control from the C1InputPanelRowDetail and override one or more virtual methods of the IC1FlexGridRowDetail interface."/>
      <sample name="Custom" form="ControlExplorer.FlexGrid.RowDetails.CustomSample" short="This demo shows how to create custom row detail control and use it"
          description="Row details allow to show additional content in the expandable area after the regular row.\r\n 
       \r\nYou can create your own row detail control and setup it as you want. The custom row detail control must implement the IC1FlexGridRowDetail interface."/>
    </category>
    <category name="Editing">
      <!-- Excel Style, Column Editors, DataMap -->
      <sample name="Column Editors" form="ControlExplorer.FlexGrid.ColumnCellTypes" short="This demo shows many common column data types and their desired editors" description="FlexGrid for WinForms supports numerous types custom editors. Any control that derives from the base Control class can be used as a basic grid editor. This demo shows many common column data types and their desired editors. Double-click within a cell to edit its contents."/>
      <sample name="DataMap" form="ControlExplorer.FlexGrid.DataMap" short="This demo shows how to use data-mapped columns when bound to a data source" description="The sample binds the grid to the Northwind Products table, and attaches a Dictionary to the DataMap property of the CategoryID column. This way, the grid displays the CategoryName instead of the ID. (The value stored in the grid is still the CategoryID)."/>
    </category>
    <category name="Grouping">
      <sample name="Group Panel" form="ControlExplorer.FlexGrid.GroupPanelDemo" short="This demo shows group panel for FlexGrid" description="FlexGridGroupPanel offers group data of the associated FlexGrid control by dragging columns from grid to group panel. Depending on selected options groups might be collapsed or expanded after grouping and columns might be hidden or visible."/>
      <sample name="Dynamic Grouping" form="ControlExplorer.FlexGrid.GroupDescriptions" short="Explore the dynamic grouping API" description="Explore the dynamic grouping API! \r\n
       \r\nDynamic grouping automatically sorts the data, splits it into groups, and adds collapsible group rows above or below each group. The group rows may include aggregate values for one or more columns."/>
      <sample name="Subtotals" form="ControlExplorer.FlexGrid.Subtotals" short="This demo shows how to calculate grouped totals in FlexGrid" description="Use the Subtotal method to automatically calculate totals for individual columns. When the end user drags a column header to a different position, the grid instantly reorganizes the data and recalculates the subtotals."/>
      <sample name="TreeListView" form="ControlExplorer.FlexGrid.TreeView" short="See how to use FlexGrid as a TreeListView" description="FlexGrid can behave as a tree view. It has the expected features of a tree view plus those of an extensive data grid. Users can drag items, perform sorts, insert new items, edit text inline, and even print. Use the SetCellImage or the SetCellCheck methods to easily add images or checkboxes to items."/>
    </category>
    <category name="Merging">
      <!-- Simple, Custom -->
      <sample name="Content-Based Merging" form="ControlExplorer.FlexGrid.Merging" short="Content-based merging" description="FlexGrid can automatically merge cells down columns or across rows based on the cell contents. There are several different merging rules which you can select by setting AllowMerging property."/>
      <sample name="Custom Cell Merging" form="ControlExplorer.FlexGrid.CustomCellMerging" short="This demo shows cell merging" description="FlexGrid offers several built-in cell merging modes that handle most common display scenarios: free, spill, nodes, row/column control, fixed only, and outline. If none of the built-in modes meet your needs, you can inherit from FlexGrid and implement a custom version.\r\n\r\nThis example uses custom merge logic to render a TV schedule that merges programs across columns and rows."/>
    </category>
    <category name="Print, Import &amp; Export">
      <!-- Excel, PDF, Printing-->
      <sample name="Importing and Exporting" form="ControlExplorer.FlexGrid.Excel" short="Save and load data directly from Microsoft Excel" description="Save and Load data directly from Excel using the SaveExcel and LoadExcel methods. FlexGrid supports many different exporting options, such as whether to include formatting, fixed cells, merged ranges, mapped values and more. You can also directly print FlexGrid by just calling the PrintGrid method while optionally showing preview and progress dialogs. For more control over printing, FlexGrid has a custom Printable class which can be used to combine multiple grids in one document or add surrounding content."/>
      <sample name="Export to PDF" form="ControlExplorer.FlexGrid.PdfExport" short="Use C1Pdf method to export C1FlexGrids to PDF files." description="This sample marks selected rows and columns as break points, then breaks the grid into several images and renders the images into a C1PdfDocument."/>
    </category>
    <category name="Searching">
      <sample name="Search Panel" form="ControlExplorer.FlexGrid.SearchPanel" short="This demo shows search panel for FlexGrid" description="FlexGridSearchPanel offers search across all data of the associated FlexGrid control. Depending on selected options search results might be filtered and highlighted."/>
      <sample name="FilterRow" form="ControlExplorer.FlexGrid.FilterRowDemo" short="This demo shows how to implement FilterRow for FlexGrid" description="This custom FilterRow implementation offers filtering of data in each column by entering text value in the cell of row."/>
    </category>
    <category name="Styling">
      <!-- Custom Styles, Owner Draw, Cell Styles -->
      <sample name="Themes" form="ControlExplorer.Themes.Themes3" short="See how Component One Themes change FlexGrid appearance"
          description="Themes unify the look and feel of your application. ComponentOne WinForms Edition ships with over two dozen professionally-designed, hand-crafted themes so you can make an elegant brand statement.\r\n
      \r\nTry out the Office 2016 themes!"/>
      <sample name="Custom Theme" form="ControlExplorer.FlexGrid.CustomTheme" short="This demo shows how you can apply custom theme" description="Themes unify the look and feel of your application. You can use create new, or customize existing themes using C1ThemeDesignerApp application."/>
      <sample name="Custom Styling" form="ControlExplorer.FlexGrid.CustomStyle" short="This demo shows how you can apply custom styles" description="FlexGrid have a rich styling model that gives you the freedom to customize any style imaginable. You can also customize the appearance of all glyphs, the built-in images such as sorting arrows and checkboxes."/>
      <sample name="Cell Styles" form="ControlExplorer.FlexGrid.CellStyles" short="This demo shows how you can change cell styles" description="FlexGrid allows you to assign styles to individual cells and modify them on the fly.\r\n
   \r\nSelect cells and use toolbar buttons to change styling of the selected cells."/>
      <sample name="OwnerDraw Cells" form="ControlExplorer.FlexGrid.OwnerDraw" short="This demo shows how to customize the appearance of any cell using OwnerDraw" description="The OwnerDrawCell event allows you to customize the way each cell is rendered. You can modify some elements of the cell or override the painting completely. In this example, OwnerDraw mode is used to display alpha-blended progress bars on cells to implement a user interface similar to that of Windows Media Player."/>
    </category>
    <category name="Validation">
      <!-- ErrorInfo, Data Annotations -->
      <sample name="Data Annotations" form="ControlExplorer.FlexGrid.DataAnnotations" short="This sample shows DataAnnotations attributes support of FlexGrid" description="DataAnnotation attributes allow developers to add meta-data to their classes, making it easier to bridge the gap between models and views. For example, you may use DataAnnotations to specify how items should be formatted, what their captions should be, whether they should be editable or displayed."/>
      <sample name="Error Info" form="ControlExplorer.FlexGrid.ErrorInfo" short="This sample shows IDataErrorInfo interface of FlexGrid" description="When the ShowErrors property is set to true, the grid will detect errors and show them using an icon in the cells (for field-specific errors) or along the first column (for record-level errors). When the user moves the mouse over the error icon, a tooltip shows the error description."/>
    </category>
  </control>
  <control name="FlexPivot" icon="flexgrid.png" group="Grids and Data Management" >
    <sample name="Overview" form="ControlExplorer.FlexPivot.Overview" short="This demo performs analytics on sales data." description="FlexPivot supports all common aggregation functions and filtering. It is capable of analyzing large data sets with millions of records in seconds or less. The user can specify what kinds of analytics to perform, and see the results in different views including a pivot grid and a chart."/>
    <sample name="Slicer" form="ControlExplorer.FlexPivot.Slicer" short="This sample shows how to use C1FlexPivotSlicer control to setup FlexPivot filters." description="The Slicer control provides a quick way to edit filters applied to PivotField objects."/>
    <sample name="Ranges" form="ControlExplorer.FlexPivot.Ranges" short="This sample shows how to setup different types of data ranges to group values by criteria." description="FlexPivot supports group ranges for fields, it is possible to create ranges over string, numeric and dates. For Example, it is possible to create weekly, quarterly or fiscal year date ranges and apply filtering based on these. This sample shows group ranges feature with the help of slicer and pivot grid."/>
    <sample name="Top N" form="ControlExplorer.FlexPivot.TopN" short="This sample shows how you can use the C1FlexPivot's top N and bottom N filtering." description="Top N is a feature of filter that allows you to show a certain number of elements with the highest (lowest) values to be included in the output."/>
  </control>
  <control name="FlexViewer" icon="FlexReport.png" group="Reporting and Documents">
    <sample name="PdfView" form="ControlExplorer.PdfDocumentSource.PdfView"
        short="Use C1PdfDocumentSource to create a PDF document viewer"
        description="Shows how to leverage the various features of FlexViewer by connecting it to a C1PdfDocumentSource to create a powerful PDF viewer with just a few lines of code." />
    <sample name="FlexCommonTasks" form="ControlExplorer.FlexReport.CommonReports"
        short="Uses FlexReport/FlexViewer to load and generate common reports"
        description="FlexReport comes with a report generating component (C1FlexReport), a viewer control with a rich ribbon-based UI (C1FlexViewer), and a FlexReport Designer application which is used to create and edit report definition files (default extension .FLXR). \r\n
      \r\nThis sample uses C1FlexReport to load and generate various reports from the FlexCommonTasks.flxr report definition file, and shows them in the C1FlexViewer control. The reports in FlexCommonTasks.flxr were created using the FlexReport Designer application."
  />
    <sample name="SSRS Reports in FlexViewer" form="ControlExplorer.SSRS.FlexSsrsViewer"
        short="Demonstrates the ability of FlexViewer control to show SSRS reports"
        description="FlexViewer control can connect to C1SSRSDocumentSource to access a Report Server and view SSRS reports. This sample shows a few sample reports with parameters, bookmarks, outlines, and other features of SSRS reports."
  />
  </control>
  <control name="FlexReport" icon="FlexReport.png" status="popular" group="Reporting and Documents">
    <sample name="FlexCommonTasks" form="ControlExplorer.FlexReport.CommonReports"
        short="Uses FlexReport/FlexViewer to load and generate common reports"
        description="FlexReport comes with a report generating component (C1FlexReport), a viewer control with a rich ribbon-based UI (C1FlexViewer), and a FlexReport Designer application which is used to create and edit report definition files (default extension .FLXR). \r\n
      \r\nThis sample uses C1FlexReport to load and generate various reports from the FlexCommonTasks.flxr report definition file, and shows them in the C1FlexViewer control. The reports in FlexCommonTasks.flxr were created using the FlexReport Designer application."
  />
    <sample name="Common Reports" form="ControlExplorer.Reports.LoadReports"
        short="Uses legacy C1Report and C1PrintPreviewControl to show common reports"
        description="This demo uses the legacy C1Report and C1PrintPreviewControl components to load and generate common reports from the CommonTasks.xml report definition file. \r\n
      \r\nNote that FlexReport can also load C1Report .XML report definition files, converting them on the fly to FlexReport format. (The FlexReport Designer application allows you to save the loaded files in the FlexReport .FLXR file format.)"
  />
    <sample name="FlexReportExplorer..." form="ComponentOne\Demos\WinForms Edition\FlexReportExplorer\FlexReportExplorer.exe"/>
  </control>
  <control name="GanttView" icon="gauge.png" group="Scheduling">
    <sample name="Overview" icon="2" form="ControlExplorer.GanttView.GanttViewDemo" short="Shows the GanttView control in action!" description="The C1GanttView control delivers a Microsoft Project®-like user experience for project management. It provides a graphical diagram of a schedule that helps to plan, coordinate, and track specific tasks in a project. Manage your projects effectively and efficiently with added support for constraints, dependencies, resources, styles and more."/>
  </control>
  <control name="Gauges" icon="gauge.png" group="Data Visualization">
    <sample name="Simple Gauges" form="ControlExplorer.Gauges.SimpleGauges" short="Shows some basic gauge templates" description="Show off your data in style with Gauges for WinForms."/>
    <sample name="Radial Gauges" form="ControlExplorer.Gauges.RadialGauges" short="Shows some examples of radial gauge templates" description="Create circular, helical, half-circular, rectangular and clamshell shaped radial gauges. Add numeric counters, state indicators, ranges, multiple pointers, scales, labels, images and more."/>
    <sample name="Linear Gauges" form="ControlExplorer.Gauges.LinearGauges" short="Shows some examples of linear gauge templates" description="Create rulers, progress bars, thermometers and more with linear gauges. Represent data values with pointers and moving ranges."/>
    <sample name="Advanced Types" form="ControlExplorer.Gauges.Advanced" short="Shows some examples of advanced gauge templates" description="Create advanced gauges where the scale sweeps more than 360 degrees or rotates around a stationary pointer."/>
    <sample name="Dashboard" form="ControlExplorer.Gauges.WeatherDashboard" short="This demo shows data binding to create a dashboard" description="C1Gauge supports data-binding, multiple pointers, databound ranges and more. Combine multiple gauges in one container to create a dashboard."/>
    <sample name="Interaction" form="ControlExplorer.Gauges.Interaction" short="This demo shows common interaction features" description="Users can now interact with the C1RadialGauge and C1LinearGauges. Use Gauges for WinForms for unique input by allowing users to drag the pointers like a knob. The gauge pointers can even snap to specific intervals. You can also create custom buttons with specific styles for each state (over, pressed, normal, etc) and use them throughout the gauge controls." />
    <sample name="BulletGraph" form="ControlExplorer.Gauges.BulletGraph" short="This demo shows basic C1BulletGraph features" description="BulletGraph is a type of linear gauge designed specifically for use in dashboards and information screens. It displays a single key measure along with a comparative measure and qualitative ranges to instantly signal whether the measure is good, bad, or in some other state."/>
    <sample name="BulletGraph in FlexGrid" form="ControlExplorer.FlexGrid.FlexGridWithBulletGraph" short="This demo shows how to use BulletGraph in FlexGrid" description="BulletGraph can be used in FlexGrid to draw it in a cell."/>
  </control>
  <control name="Input" icon="input.png" group="Input and Editing">
    <sample name="Data Binding" form="ControlExplorer.Input.Overview" short="This demo shows some C1Input controls with visual styles"
        description="ComponentOne Input for WinForms is a suite of individual controls that support visual styles, data binding, auto-formatting and much more. These controls include C1PictureBox, C1NumericEdit, C1DBNavigator, C1DropDownControl, C1Button, C1CheckBox, C1TextBox, and C1Label. Display dynamic data in a visual format, manage dataset navigation, and much more.\r\n\r\nNote, the new C1DateEdit control has been added to the C1.Win.Calendar assembly. The old C1DateEdit control is deprecated."/>
    <sample name="Dropdown Controls"  form="ControlExplorer.Input.DropDownControls" short="This demo shows C1SplitButton, C1ColorPicker and C1FontPicker controls" description="Use C1SplitButton on a form as an independent button with multiple options. Enhance your UI with Color and Font pickers."/>
    <sample name="Format Types" form="ControlExplorer.Input.FormatTypes" short="This demo shows built-in format validation" description="Input for WinForms includes over 30 built-in format types, including Currency, Percent, Scientific, Hexadecimal, YesNo, GeneralDate, and more. You can easily specify the formatting method by setting just one property, FormatType, and not have to worry about writing repetitive validation code." />
    <sample name="Custom Dropdowns" form="ControlExplorer.Input.CustomDropDowns" short="This demo shows custom drop-downs" description="With C1DropDownControl you can easily create a custom drop-down just as you would create a form in Visual Studio. This demo shows several custom drop-downs created using C1DropDownControl."/>
    <sample name="RangeSlider" form="ControlExplorer.Input.RangeSlider" short="This demo shows the C1RangeSlider control" description="C1RangeSlider provides two thumb elements to select value ranges. Drag single thumb to change lower or upper value, or drag on area between thumbs to move the whole range." />
    <sample name="DateEdit" form="ControlExplorer.Input.DateEdit" short="The DateEdit control from the C1.Win.Calendar.4 assembly" description="Use the C1DateEdit control from the C1.Win.Calendar assembly instead of old C1DateEdit from C1Input for better performance and appearance." />
  </control>
  <control name="InputPanel" icon="inputpanel.png" group="Input and Editing">
    <sample name="Overview" form="ControlExplorer.InputPanel.Overview" short="See all of the native controls in C1InputPanel" description="InputPanel is a container control that helps developers create and maintain powerful data input applications in less time. Developers can choose from any combination of the nineteen native data input controls provided or any third party .NET control. Adding a new control is done simply by selecting the type of control from the Add New Item combobox at design-time. InputPanel provides automatic binding, layout, and styling. The easy setup paired with low maintenance yields increased productivity."/>
    <sample name="Data Binding" form="ControlExplorer.InputPanel.DataBinding" short="This demo shows a bound input form navigator" description="InputPanel can bind to any .NET data source with little or no code, allowing you to create a fully-navigational database browser in seconds. Simply connect the InputPanel to a data source, select the record set and a fully bound input control for each field is automatically created for you."/>
    <sample name="Validation and Tooltips" form="ControlExplorer.InputPanel.Validation" short="See how C1InputPanel supports error providing and validation" description="C1InputPanel supports error providing validation. When the end-user enters invalid input, a customizable visual alert is automatically provided and a red frame appears around the input control. You can also add custom alerts such as ToolTips. For example, you can allow your end-users to only enter alpha characters, and show an error indicator when any other character is entered. The tooltips used by InputPanel inherit from C1SuperTooltip so they can display Html content and images."/>
    <sample name="Master Detail" form="ControlExplorer.InputPanel.MasterDetail" short="Create master and detail input panels" description="Use C1InputPanel to create master/detail data-entry forms by connecting to related data tables."/>
    <sample name="Dynamic Forms" form="ControlExplorer.InputPanel.QueryBuilder" short="See how to manage input forms programmatically" description="One of the benefits of using C1InputPanel is that you can create and manage input forms dynamically in code without having to worry about layout and positioning. Just add controls to the items collection and C1InputPanel automatically places them at the bottom of the panel. Use Insert and RemoveAt methods to further manage the input controls. This demo shows a Query Builder that can add and remove conditions."/>
  </control>
  <control name="List" icon="list.png" group="Grids and Data Management">
    <sample name="Overview" form="ControlExplorer.List.ComboDetail" short="See overview of C1List and C1Combo controls" description="With List for WinForms you get a multi-column drop-down list, C1Combo, and a full-featured listbox control, C1List. Both components operate in unbound and databound modes. C1Combo supports incremental searching and auto-completion to aide finding values as the user types into the text portion of the drop-down. In this demo, we've created a master-detail relationship between C1Combo and C1List."/>
    <sample name="More Features" form="ControlExplorer.List.MoreFeatures" short="See complete features for C1List and C1Combo controls" description="List comes packed with many of the features you find in rich datagrids such as interactive splits, column sorting, alternating rows, checkboxes, images, value translation, fixed columns, scroll tips, drag-and-drop, and multiple-line data display. With List you can even display column options as radio buttons. While a datagrid like FlexGrid or TrueDBGrid is still better suited for editing data, C1List and C1Combo prove themselves as feature-rich controls for displaying and selecting data. With C1List set the SelectionMode property to determine how users can select items; such as with checkboxes as shown in this demo. Note that all features of C1List except the checkbox selection mode are also available for C1Combo."/>
  </control>
  <control name="Maps" icon="map.png" group="Data Visualization">
    <sample name="Overview" form="ControlExplorer.Map.Overview" short="Shows the C1Map control."
        description="Get smooth zooming, panning, and mapping between screen and geographical coordinates with C1Map. Display information from various sources, including Microsoft Live Maps."/>
    <sample name="Marks" status="new" form="ControlExplorer.Map.Marks" short="Show how to work with marks in C1Map." description="This sample shows how to create various layers, marks and labels and manage with different properties."/>
    <sample name="Routes" status="new"  form="ControlExplorer.Map.Routes" short="Show how to work with routes in C1Map." description="This sample shows how to create route on list of cities."/>
  </control>
  <control name="MultiSelect" group="Input and Editing">
    <sample name="MultiSelect" form="ControlExplorer.MultiSelect.MultiSelect" short="This demo shows the C1MultiSelect control"
        description="Check out the MultiSelect control.
      \r\nThe MultiSelect control allows users to select multiple objects from either a drop-down checklist or by a editing list of tags. Both DropDown and Header are customizable, and data can range from simple strings to custom objects."/>
    <sample name="TagEditor"  form="ControlExplorer.MultiSelect.TagEditor" short="This demo shows the C1TagEditor control"
        description="Use the TagEditor control to edit a collection of tags by either adding or removing them. It can represent tags as either text with separators or as button-like UI elements."/>    
  </control>
  <control name="PDF" icon="pdf.png" group="Reporting and Documents">
    <sample name="Bookmarks" form="ControlExplorer.PDF.Bookmarks" short="See how to create Adobe PDF documents with bookmarks from C#" description="Create Adobe PDF documents from your apps using ComponentOne PDF for .NET. The benefit of creating PDFs from your .NET apps is that you can essentially create databound PDF documents. This sample creates a Pdf file with NorthWind product information. Each product category is placed on a separate page and added to an outline structure with bookmarks. This demo requires Adobe Reader to view the PDF."/>
    <sample name="Table of Contents" form="ControlExplorer.PDF.TableOfContents" short="See how to create tables of content" description="This sample creates a document with a table of contents. It keeps a list of bookmarks added to the document as it is created. When the document is complete, the sample uses the list to create a table of contents page with local links to each topic. Finally, the table of contents is moved to the start of the document using the Pages collection. This demo requires Adobe Reader to view the PDF."/>
    <sample name="Acroforms" form="ControlExplorer.PDF.PdfAcroform" short="See how to create Acrobat Forms" description="ComponentOne PDF supports the creation of Acrobat Forms, documents that contain fields that are filled out by users. Fields are created using the AddField method. Several field types are supported, including text boxes, check boxes, combo boxes, radio buttons, push buttons, list boxes and signatures. This demo requires Adobe Reader to view the PDF."/>
    <sample name="Rich Graphics" form="ControlExplorer.PDF.GdiModel" short="See how to use the GDI model to render graphics within PDF files" description="ComponentOne PDF creates documents using commands that are similar to those provided by the .NET Graphics class, and the same objects (fonts, colors, rectangles, points, etc.). The main difference is that C1Pdf always uses points as units, while the .NET Graphics class uses pixels by default and allows you to switch to other coordinate systems with transforms. This demo requires Adobe Reader to view the PDF."/>
  </control>
  <control name="PdfSource" icon="PdfSource.png" group="Reporting and Documents">
    <sample name="PdfView" form="ControlExplorer.PdfDocumentSource.PdfView"
        short="Shows how to easily create a full-featured PDF viewer"
        description="Shows how, with virtually a few lines of code, to create a powerful PDF viewer application with text search and selection, export etc., by connecting a FlexViewer control to a C1PdfDocumentSource component." />
    <sample name="PrintAndExport" form="ControlExplorer.PdfDocumentSource.PrintAndExport"
        short="Shows how to use C1PdfDocumentSource to print or export a PDF file"
        description="Shows how to use a C1PdfDocumentSource component to programmatically print an arbitrary PDF file or export it to one of the supported formats." />
  </control>
  <control name="Ribbon" icon="ribbon.png" group="Navigation and Layout" >
    <sample name="New Ribbon" form="ControlExplorer.Ribbon.NewRibbon" short="A complete WordPad demo using the New Ribbon" 
        description="New Ribbon for WinForms provides UI concept compatible with MS Office 365. New Ribbon supports simplified view, vector icons, backstage component, updated galleries and more. It ships with enhanced set of embedded images. Choose among built-in color options or apply a theme from C1ThemeController. "/>
    <sample name="Themes" form="ControlExplorer.Themes.Themes3" short="ComponentOne Themes, applies themes on Ribbon UI control and its child groups and tabs"
        description="Themes unify the look and feel of your application. ComponentOne WinForms Edition ships with over two dozen professionally-designed, hand-crafted themes so you can make an elegant brand statement."/>
    <sample name="Classic Ribbon UI" form="ControlExplorer.Ribbon.WordPad" short="A complete WordPad demo using C1Ribbon"
        description="Ribbon Classic for WinForms provides a pixel-perfect implementation of the Ribbon UI concept introduced in the 2007 release of Microsoft Office. The C1Ribbon component replaces traditional menus and toolbars with a set of tabs at the top of the parent form. C1Ribbon supports the application menu, QAT (Quick Access Toolbar), dialog launchers, contextual tabs, galleries and more. Choose among built-in visual styles or apply a theme from C1ThemeController. The C1Ribbon interface can be customized with easy-to-use visual designers and even constructed entirely in code. Ribbon also includes the C1StatusBar control for creating themed status bars that support embedded controls."/>
    <!--  <sample name="Google Maps" form="ControlExplorer.Ribbon.GoogleMaps" short="This demo uses C1Ribbon to navigate Google Maps" 
description="This sample uses the C1Ribbon and C1StatusBar components to implement two-way communication between a Windows Forms application and a Web page that provides an interface to Google Maps (requires an Internet connection)."/>-->
  </control>
  <control name="Rules Manager" icon="rulesmanager.png" group="Grids and Data Management" status="new" newFeatureName="FlexGrid conditional formatting">
    <sample name="FlexGrid conditional formatting" form="ControlExplorer.RulesManager.FlexGridConditionalFormatting" short="This sample shows the basic features of C1RulesManager control."
        description="The C1RulesManager provides a conditional formatting for a control which supports IFormattableView interface. Such support is built-in for C1FlexGrid control.\r\nThe rules manager control contains a collection of rules which can be setup in variety of parameters - with predefined or custom expression, with different styling options. Also each rule can be applied to the whole data or specific range of it.\r\nEach UI element of control (e.g. header, add or remove rule buttons, rule expression editor, etc.) can be hidden separately if such UI element would not be used in final application."/>
    <sample name="Excel like conditional formatting" form="ControlExplorer.RulesManager.ExcelLikeConditionalFormatting" short="This sample shows how to use C1RulesManager API in excel-like conditional formatting scenario."
        description="The C1RulesManager control provides API for setting up rule expression, style and to which range of data such rule should be applied.\r\nUsing of API allows to develop application which even not show rules manager control in the application, but apply conditional formatting.\r\nAs an example of such application can be excel-like app which use for setup of rules some forms with predefined expression and styles or some menu items which apply gradient rule (data bars, color scales, icon sets) to the selected cells of grid."/>
    <sample name="DataGridView conditional formatting" form="ControlExplorer.RulesManager.DataGridViewConditionalFormatting" short="This sample shows how to setup MS DataGridView control to work with C1RulesManager."
        description="The C1RulesManager provides a conditional formatting for a control which supports IFormattableView interface.\r\nAny WinForms control (e.g. MS DataGridView) can be extended for using with C1RulesManager by implementing such interface.\r\nThis sample shows such basic implementation.\r\nDue to the fact that gradient rules support was not added in the provided implementation and to not confuse end-user about not-working functionality, the gradient rules tab was hidden in the rules manager UI."/>
    <sample name="Chart conditional formatting" form="ControlExplorer.RulesManager.ChartConditionalFormatting" short="This sample shows the basic setup of different chart controls to work with C1RulesManager."
        description="Conditional formatting can be used not only with grid controls, but for example with charts.\r\nImplementation of IFormattableView C1RulesManager interface allows to add such possibility.\r\nThe sample contains 2 chart controls - FlexChart and FlexPie which implements IFormattableView interface.\r\nOnly one C1RulesManager is bound with both controls to show the same data (UnitsOnOrder column of DataTable) in the different representations."/>
  </control>
  <control name="Scheduler" icon="scheduler.png" group="Scheduling" >
    <sample name="Overview" form="ControlExplorer.Schedule.Overview" short="Shows the C1Schedule and C1Calendar controls" description="ComponentOne Scheduler for WinForms includes two visual components: C1Schedule and C1Calendar. C1Schedule displays Outlook-style appointments in day, week, work week, time line or monthly views. It also includes a built-in data layer that automatically manages one-time or recurring appointments with reminders, as well as related collections such as contacts, categories, labels, and resources. C1Calendar provides navigation and date range selection for an associated C1Schedule control. Both controls include a dozen of the latest visual styles. At run time users can print the schedule and view a print preview of schedule appointment data using the run-time context menu, or buttons on the toolbar of the Appointment dialog box."/>
    <sample name="Grouping" icon="2" form="ControlExplorer.Schedule.Grouping" short="Demonstrates how to do resource scheduling and time line view" description="Group appointments by contacts, categories and resources to create a multi-tab, multi-user layout. Each appointment can be assigned to one or more categories, contacts and resources. Grouping is supported in all scheduler view types." />
    <sample name="Agenda View" form="ControlExplorer.Schedule.AgendaView"
        short="This demo shows the Agenda View which can be used along with the C1Schedule to show upcoming events in compact form."
        description="The Agenda View can be used along with the C1Schedule to show upcoming events in compact form. The C1AgendaView control displays appointments grouped by date in a table view. Single table row represents single appointment. This view is sorted by dates in ascending order."/>
    <sample name="Table View" form="ControlExplorer.Schedule.TableView"
        short="This demo shows the Table View which can be used along with the C1Schedule."
        description="The C1TableView control displays appointment in a table view which can be grouped, sorted or filtered. The view supports in place editing for subject, location, start and end dates, other complex columns can be updated through the EditAppointment dialog."/>
    <sample name="Custom Data" form="ControlExplorer.Schedule.CustomDialog" short="This demo uses a custom dialog for editing appointments" description="Not every scheduling data model looks the same. This demo shows how you can customize the appointment dialog to match a unique data model. Double-click within the C1Schedule control to display the customized appointment form."/>
    <sample name="Drag and Drop" form="ControlExplorer.Schedule.DragDrop" short="This demo shows how to handle drag and drop with C1Schedule" description="Users can perform drag-and-drop operations at run time to move an appointment between two C1Schedule controls. Users can also drag an appointment onto C1Calendar to move the appointment to the dropped date. You can also can customize drag-and-drop operations between a C1Schedule and another drag-enabled control. In this demo users can drag a cell from a grid and drop it on C1Schedule."/>
  </control>
  <control name="Sizer" icon="sizer.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.Sizer.SizerForm" short="This demo shows C1Sizer in action" description="C1Sizer is a container control with a powerful grid layout manager that extends the basic layout capabilities provided by the .NET Framework (Dock and Anchor properties). C1Sizer gives you the ability to easily manage every contained controls behavior when the panel is resized, thus eliminating the need to set docking and anchoring properties for each control. You can also add splitters anywhere between controls. In this demo we use buttons to represent arbitrary controls on a form."/>
    <sample name="Presentation Features" form="ControlExplorer.Sizer.SizerNewFeatures" short="This demo is the same as the Overview but with style features" description="C1Sizer has three WPF-like styling features: gradient backgrounds, border styles and rounded corners. For the gradient background you can create a custom, 4 point blend between two colors or choose a preset blend. Add some style to your apps without adding image resources."/>
    <sample name="C1SizerLight Control" form="ControlExplorer.Sizer.SizerLight" short="This demo shows usage of the C1SizerLight component" description="In addition to C1Sizer there is C1SizerLight. With C1SizerLight you can create resolution-independent applications without having to write any code or play with design-time configuration. Just drop C1SizerLight on your form it keeps track of the forms' size and position. When the form is resized, C1SizerLight resizes all contained controls proportionally, so the form retains its appearance at any resolution."/>
  </control>
  <control name="Sparkline" icon="sparkline.png" group="Data Visualization">
    <sample name="Overview" form="ControlExplorer.Sparkline.Overview" short="See it in action" description="C1Sparkline is a lightweight chart control which represents the general shape of the data variation in a condensed way. The control could be used to show maximum and minimum data, stock price movements, economic cycles and data trends. 
      \r\nControl the sparkline's style by editing axis color, color of data points (first and last), series color, and the color of marker points in high, low, negative, first, and last points. You can also highlight all data points by setting ShowMarkers property to true."/>
  </control>
  <control name="SpellChecker" icon="spellchecker.png" group="Utilities">
    <sample name="Overview" form="ControlExplorer.Ribbon.WordPad" short="This demo shows a complete WordPad implementation with spell-checking" description="ComponentOne SpellChecker for WinForms gives you as-you-type and dialog based spell-checking in any controls that derive from TextBox, RichTextBox or WebBrowser control. It also supports programmatic interfaces that can be used to add spell checking functionality to other kinds of controls, such as grids. This example implements a basic RichTextBox editor using C1SpellChecker and C1Ribbon."/>
    <sample name="Spell-Checking Components" form="ControlExplorer.SpellChecker.SpellGrid" short="This demo uses C1SpellChecker to check spelling in a data grid" description="C1SpellChecker can provide active spell-checking for a variety of components including TextBox, RichTextBox and WebBrowser. This demo shows that we can implement a wrapper class for the ISpellCheckable interface to provide active spell-checking for a grid too."/>
  </control>
  <control name="SplitContainer" icon="splitcontainer.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.SplitContainer.SplitContainerDemo" short="See the C1SplitContainer in action!" description="ComponentOne SplitContainer for WinForms is similar to the standard SplitContainer control. It represents a container for resizable docked panels, but unlike the standard control, C1SplitContainer supports more than 2 panels. You can arrange panels horizontally and vertically, display header text and even turn on collapsible buttons for each panel."/>
  </control>
  <control name="SuperTooltip" icon="supertooltip.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.SuperTooltip.Overview" short="This demo shows the basic features of C1SuperTooltip" description="With C1SuperTooltip you get a traditional tooltip control packed with many additional features including rich HTML rendering for the content, support for background images, background gradients and more. Displaying images within the tooltip content is a simple task with C1SuperTooltip."/>
    <sample name="Error Providing" form="ControlExplorer.SuperTooltip.SuperErrorProvider" short="This demo shows the basic features of C1SuperErrorProvider" description="SuperTooltip includes C1SuperErrorProvider for providing input errors through HTML-based tooltips. With C1SuperErrorProvider you can display rich error messages to end-users." />
    <sample name="Html Features" form="ControlExplorer.SuperTooltip.HtmlFeatures" short="This demo shows the HTML support of C1SuperLabel and C1SuperTooltip" description="SuperTooltip for WinForms includes the C1SuperLabel component which renders Html content. Both C1SuperTooltip and C1SuperLabel make it 'super' easy to display Html formatted content in labels and tooltips. You can even draw the Html content to bitmaps, increasing the possibilities within your apps (For full Html editing and exporting see PDF and Editor)."/>
  </control>
  <control name="Themes" icon="" group="Utilities">
    <sample name="Grids" form="ControlExplorer.Themes.Themes1" short="ComponentOne Themes, applies themes on Grids" 
        description="Themes unify the look and feel of your application. ComponentOne WinForms Edition ships with over two dozen professionally-designed, hand-crafted themes so you can make an elegant brand statement.\r\n
      \r\nTry out the Material themes!"/>
    <sample name="Ribbon" form="ControlExplorer.Themes.Themes3" 
        short="ComponentOne Themes, applies themes on Ribbon UI control and its child groups and tabs"
        description="Themes unify the look and feel of your application. ComponentOne WinForms Edition ships with over two dozen professionally-designed, hand-crafted themes so you can make an elegant brand statement.\r\n
      \r\nTry out the Material themes!"/>
    <sample name="Input Editors" form="ControlExplorer.Themes.Themes2" 
        short="ComponentOne Themes, applies themes on Input Editor controls"
        description="Themes unify the look and feel of your application. ComponentOne WinForms Edition ships with over two dozen professionally-designed, hand-crafted themes so you can make an elegant brand statement.\r\n
      \r\nTry out the Material themes!"/>
    <sample name="ThemePicker" form="ControlExplorer.Themes.Themes4" 
      short="ComponentOne ThemePicker, applies themes on application forms"
      description="C1ThemePicker control allows you to select and apply any registered theme for all forms of your application. ComponentOne WinForms Edition ships with over two dozen professionally-designed, hand-crafted themes so you can make an elegant brand statement.\r\n"/>
  </control>
  <control name="TileControl" icon="TileControl.png" group="Navigation and Layout">
    <sample name="File Explorer" form="ControlExplorer.Tiles.FileExplorer" short="Windows 8 ModernUI styled File Explorer Application" description="Create and use a ModernUI styled File Explorer for your desktop applications. View the drives, as shown in My Computer, grouped as Fixed and Removable. Easily differentiate between Drives, Folders and Files, as they are depicted using different templates for TileControl."/>
    <sample name="Flickr Stream" form="ControlExplorer.Tiles.Flickr" short="This demo shows Tiles with live information" description="View and update Tiles with images from the Flickr data stream. Update and tag images, all though a desktop application which looks like a Metro App. Design WinForms application like never before !!!"/>
    <sample name="Moving Slides" form="ControlExplorer.Tiles.MovingSlides" short="Animated tiles with moving months" description="Animate your tiles, with live data, images. Drag and drop tile from one location to another, using mouse or touch actions."/>
    <sample name="AppsPanel" form="ControlExplorer.Tiles.AppsPanel" short="Windows 8 based UI, with listing of all applications." description="Recreate the whole Windows 8 Start screen in your WinForms apps. Experience a whole new way to navigate"/>
  </control>
  <control name="Toolbars" icon="menusandtoolbars.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.MenusToolbars.Overview" short="This demo shows C1Menu, C1ContextMenu and C1Toolbar" description="Menus and Toolbars is a suite of controls including C1MainMenu, C1ContextMenu, and C1ToolBar. The menus and toolbar components can share commands, meaning you will have a cleaner UI and less code to manage. Other features include Office Visual Styles, embedding arbitrary controls, run-time toolbar customization and more."/>
    <sample name="C1NavBar Control" form="ControlExplorer.MenusToolbars.C1NavBar" short="This demo shows C1NavBar" description="C1NavBar is a professional looking and flexible Outlook-style navigation control that requires minimal coding. Group information into distinct categories to organize and help users navigate information quickly. C1NavBar is collapsible and includes an options menu available at the bottom right corner."/>
    <sample name="C1TopicBar Control" form="ControlExplorer.MenusToolbars.C1TopicBar" short="This demo shows C1TopicBar" description="C1TopicBar contains a collection of pages organized into various groups very similar to the Windows Explorer bar. Each page includes a title bar with a collapsible/expandable image and the content area consists of links."/>
    <sample name="C1OutBar Control" form="ControlExplorer.MenusToolbars.C1OutBar" short="This demo shows C1OutBar" description="C1OutBar is a classic control used for grouping related items. It behaves like an accordion with only one group expanded at a time so it helps save on screen real estate. By default, C1OutBar will embed a C1Toolbar in each group to quickly add commands to your application, however you can embed any .NET controls inside each group panel." />
    <sample name="C1Radial Menu" form="ControlExplorer.MenusToolbars.C1RadialMenu" short="This demo shows C1RadialMenu" description="C1RadialMenu is a OneNote based menu control. We have merged the inspiration with theme capabilities for this control and given a whole new way to navigate within applications with ease. It can be used in collapsed state as well as expanded. It can be used to give your application an enhanced experience touch based navigation feel as well." />
  </control>
  <control name="TreeView" icon="treeview.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.TreeView.Overview" short="Shows the C1TreeView control." description="This demo uses bound C1TreeView with BindingList object. You can create C1TreeView control and setup it at design time or in code. Use the RaiseApplyNodeStyles method and ApplyNodeStyles event to customize node styles of C1TreeView. Also you can customize the appearence of columns and node cells."/>
    <sample name="Source Code Structure Viewer" form="ControlExplorer.TreeView.SourceCodeStructureViewer" short="This demo shows how to populate with data unbound C1TreeView" description="You can add any number of images to C1TreeView node by ImageList property of C1TreeView and IndicesImages property of any node."/>
    <sample name="Todo List" form="ControlExplorer.TreeView.TodoList" short="This demo shows how to use checkboxes of C1TreeView" description="C1TreeView supports checkbox appearance in nodes. This sample shows how C1TreeView can be turned into todo list with subcases in any node."/>
    <sample name="CheckList" form="ControlExplorer.TreeView.CheckList" short="This demo shows the C1CheckList control" description="The CheckList control allows users to select multiple items from a list with check boxes. The control supports options for databinding and UI customization." />
  </control>
  <control name="True DBGrid" icon="truedbgrid.png" status="popular" group="Grids and Data Management">
    <sample name="Child Grids" form="ControlExplorer.TrueDBGrid.ChildGrids" short="This demo uses C1TrueDBGrid to create hierarchical displays" description="By simply setting the ChildGrid property to connect two TrueDBGrid controls, you can create a fully editable drop-down child that appears within the master table. By left clicking on any of the expand icons, our child table appears in a drop-down."/>
    <sample name="Filter Bar" form="ControlExplorer.TrueDBGrid.FilterBar" short="This demo shows the basic filter bar feature" description="Set the FilterBar property to True to add a filter row to the top of the grid. By default the filter editor is a TextBox but you can optionally display distinct column values in a combobox. Set the colum's FilterMultiSelect property to True and you can filter by multiple values. You can also specify watermark text to display in empty filters."/>
    <sample name="Conditional Filtering" form="ControlExplorer.TrueDBGrid.ConditionalFiltering" short="See how conditional filtering works" description="With conditional filtering a filter drop-down button appears on the column headers when the user hovers over any column. The built-in filters include a value filter (checkboxes) as well as conditions such as 'Greater than' or 'Contains.' This type of filtering is modeled after the FlexGrid filtering and can be turned on for any column with one simple property."/>
    <sample name="Grouping" form="ControlExplorer.TrueDBGrid.GroupBy" short="Shows the GroupBy data view" description="In C1TrueDBGrid's GroupBy view, users can drag columns to the grouping area above the grid to sort the data. After a column is dragged to the grouping area, each distinct value is rendered as an expandable row in the grid. C1TrueDBGrid also supports interval grouping, such as alphabetical and date-span. Drag the Product column header to the grouping area and notice it's grouped alphabetically."/>
    <sample name="Multi-Line Rows" form="ControlExplorer.TrueDBGrid.MultipleLines" short="Shows the MultipleLines data view" description="Normally when a datagrid is not wide enough to display all of the columns in the record, a horizontal scrollbar automatically appears. By just setting the DataView property, C1TrueDBGrid can display each row of data on multiple lines so that there is no need for a horizontal scrollbar. The LinesPerRow property determines how many lines."/>
    <sample name="Interactive Splits" form="ControlExplorer.TrueDBGrid.Splits" short="Shows the interactive splits feature" description="You can create horizontal and vertical splits at design time or in code. Use the AllowHorizontalSplit and AllowVerticalSplit properties to control whether end users can create splits interactively. Drag the slider at the lower left corner rightward to create synchronized vertical splits. Drag the slider at the upper right corner downward to create independent horizontal splits."/>
    <sample name="TrueDBDropDown" form="ControlExplorer.TrueDBGrid.TDBDropDown" short="This demo uses C1TrueDBDropDown to show bound, multi-column comboboxes" description="C1TrueDBGrid supports combo boxes, value items and even comes with its own data-binding C1TrueDBDropDown control. This sample demonstrates the C1TrueDBDropDown control on two columns: Customer and Employee. With C1TrueDBDropDown you get a multi-column, bindable and sortable drop-down that is easily connected to your grid. With its ValueTranslate property, C1TrueDBDropDown can automatically map a value field (like EmployeeID) to a more readable representation (like Employee Name) within the TrueDBGrid."/>
    <sample name="Exporting" form="ControlExplorer.TrueDBGrid.Exporting" short="This demo shows complete export features for C1TrueDBGrid" description="C1TrueDBGrid includes built-in support for printing, print preview, and export to a variety of popular file formats."/>
  </control>
  <control name="Win Pack" icon="taskbarbutton.png" group="Navigation and Layout">
    <sample name="Overview" form="ControlExplorer.Win7Pack.Win7PackMainForm" short="This demo shows Win Pack features" description="ComponentOne Windows Control Pack™ for WinForms helps you integrate your applications with the Microsoft Windows operating system. The C1TaskbarButton and C1TaskDialog controls enable you to manage progress indicators, thumbnails and jump lists on the Windows taskbar, as well as create custom, system-based message boxes. These controls only work on Windows 7 and higher versions and show nothing on older systems (C1TaskDialog also works on Vista)."/>
  </control>
  <control name="Word" icon="taskbarbutton.png" group="Reporting and Documents">
    <sample name="Word Creator" form="ControlExplorer.Word.WordCreator" short="Create various Word documents using the C1Word component" description="The C1Word component allows to programmatically create RTF and DOCX documents that include text, images and graphcis."/>
  </control>
</controls>

