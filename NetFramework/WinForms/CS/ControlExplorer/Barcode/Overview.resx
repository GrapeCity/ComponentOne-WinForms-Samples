<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="c1Zoom1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="c1SuperTooltip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>124, 17</value>
  </metadata>
  <data name="label1.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Code 39&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  Code 39 is an alpha-numeric encoding also known as 3 of 9 and LOGMARS. This was the first alphanumeric symbology developed, and is one of the most widely used encodings.&lt;br&gt;
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label2.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Code 93&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  Code 93 is an alpha-numeric encoding that is slightly denser than code 39.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label3.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;I2of5&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  Code I2of5 is a numeric encoding. The symbol can be as long as necessary to store the encoded data.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;hr noshade size=1 style='margin:2' color=darker&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Value must contain numeric digits only.&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label4.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;CodaBar&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  Codabar may encode 16 different characters (0 through 9 plus -$:/.+), plus an additional 4 start/stop characters (A through D). Codabar is used by some US blood banks, photo labs, and on FedEx airbills.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label5.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Code 128&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  Code 128 is a very high density alpha-numeric bar code. It will use the least amount of space of any current 1-D symbology for symbols with 6 characters or more. 

&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label6.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;PostNet&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  PostNet is a numeric encoding used by the US postal service. It differs from most others in that it is based on the height of the bars rather than on their width.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;hr noshade size=1 style='margin:2' color=darker&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;img src='res://TraceError.png'&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Value requires some numeric digits.&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label7.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;EAN-8&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  EAN-8 uses only numbers (7 numbers and a check digit).
Enabling Checksum is mandatory for this barcode type.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;hr noshade size=1 style='margin:2' color=darker&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Value must contain 7 numeric digits.&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label8.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;EAN-13&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  EAN-13 was implemented by the International Article Numbering Association (EAN) in Europe. EAN-13 encodes a 12-digit code that consists of a 2 digit system code followed by a 5 digit manufacturer code and a 5-digit product code. The 12-digit code is followed by a checksum digit (automatically added by the control).
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;hr noshade size=1 style='margin:2' color=darker&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;img src='res://TraceError.png'&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Value must contain exactly 12 numeric digits.&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label9.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;UPC-A&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  UPC-A is the the common encoding you will find on virtually every consumer good on the shelves of your local supermarket, as well as books, magazines, and newspapers. It is similar to EAN-13, and encodes 11 digits of numeric data along with a trailing check digit.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;hr noshade size=1 style='margin:2' color=darker&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;img src='res://TraceError.png'&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Value must contain exactly 11 numeric digits.&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <data name="label10.ToolTip" xml:space="preserve">
    <value>&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;UPC-E&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;
&lt;parm&gt;&lt;/parm&gt;
&lt;div style='margin:1 12'&gt;&lt;parm&gt;
  UPC-E is a variation of the UPC-A symbol that is used for number system 0. By suppressing zeroes, UPC-E codes can be printed in a very small space and are used for labeling small items.
&lt;/parm&gt;&lt;/div&gt;
&lt;parm&gt;&lt;hr noshade size=1 style='margin:2' color=darker&gt;&lt;/parm&gt;
&lt;table&gt;&lt;tr&gt;
  &lt;td&gt;&lt;parm&gt;&lt;img src='res://TraceError.png'&gt;&lt;/parm&gt;&lt;/td&gt;
  &lt;td&gt;&lt;b&gt;&lt;parm&gt;Value must start with 0 and contain digits only. Check online for more rules.&lt;/parm&gt;&lt;/b&gt;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;</value>
  </data>
  <metadata name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>272, 17</value>
  </metadata>
</root>