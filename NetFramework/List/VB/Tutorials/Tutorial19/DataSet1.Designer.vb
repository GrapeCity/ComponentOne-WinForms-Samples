'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version:2.0.41115.19
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DataSet1")>  _
Partial Public Class DataSet1
    Inherits System.Data.DataSet
    
    Private tableCustomers As CustomersDataTable
    
    Private tableCustType As CustTypeDataTable
    
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Customers")) Is Nothing) Then
                MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
            End If
            If (Not (ds.Tables("CustType")) Is Nothing) Then
                MyBase.Tables.Add(New CustTypeDataTable(ds.Tables("CustType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Customers() As CustomersDataTable
        Get
            Return Me.tableCustomers
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustType() As CustTypeDataTable
        Get
            Return Me.tableCustType
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DataSet1 = CType(MyBase.Clone,DataSet1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        Me.Reset
        Dim ds As System.Data.DataSet = New System.Data.DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Customers")) Is Nothing) Then
            MyBase.Tables.Add(New CustomersDataTable(ds.Tables("Customers")))
        End If
        If (Not (ds.Tables("CustType")) Is Nothing) Then
            MyBase.Tables.Add(New CustTypeDataTable(ds.Tables("CustType")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCustomers = CType(MyBase.Tables("Customers"),CustomersDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomers) Is Nothing) Then
                Me.tableCustomers.InitVars
            End If
        End If
        Me.tableCustType = CType(MyBase.Tables("CustType"),CustTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustType) Is Nothing) Then
                Me.tableCustType.InitVars
            End If
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DataSet1"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DataSet1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableCustomers = New CustomersDataTable
        MyBase.Tables.Add(Me.tableCustomers)
        Me.tableCustType = New CustTypeDataTable
        MyBase.Tables.Add(Me.tableCustType)
    End Sub
    
    Private Function ShouldSerializeCustomers() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCustType() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSet1 = New DataSet1
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub CustomersRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomersRowChangeEvent)
    
    Public Delegate Sub CustTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As CustTypeRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomersDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCompany As System.Data.DataColumn
        
        Private columnContacted As System.Data.DataColumn
        
        Private columnCustType As System.Data.DataColumn
        
        Private columnFirstName As System.Data.DataColumn
        
        Private columnLastName As System.Data.DataColumn
        
        Private columnPhone As System.Data.DataColumn
        
        Private columnUserCode As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Customers"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property CompanyColumn() As System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Public ReadOnly Property ContactedColumn() As System.Data.DataColumn
            Get
                Return Me.columnContacted
            End Get
        End Property
        
        Public ReadOnly Property CustTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustType
            End Get
        End Property
        
        Public ReadOnly Property FirstNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Public ReadOnly Property LastNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Public ReadOnly Property PhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Public ReadOnly Property UserCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnUserCode
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomersRow
            Get
                Return CType(Me.Rows(index),CustomersRow)
            End Get
        End Property
        
        Public Event CustomersRowChanged As CustomersRowChangeEventHandler
        
        Public Event CustomersRowChanging As CustomersRowChangeEventHandler
        
        Public Event CustomersRowDeleted As CustomersRowChangeEventHandler
        
        Public Event CustomersRowDeleting As CustomersRowChangeEventHandler
        
        Public Overloads Sub AddCustomersRow(ByVal row As CustomersRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustomersRow(ByVal Company As String, ByVal Contacted As Date, ByVal CustType As Short, ByVal FirstName As String, ByVal LastName As String, ByVal Phone As Double, ByVal UserCode As String) As CustomersRow
            Dim rowCustomersRow As CustomersRow = CType(Me.NewRow,CustomersRow)
            rowCustomersRow.ItemArray = New Object() {Company, Contacted, CustType, FirstName, LastName, Phone, UserCode}
            Me.Rows.Add(rowCustomersRow)
            Return rowCustomersRow
        End Function
        
        Public Function FindByUserCode(ByVal UserCode As String) As CustomersRow
            Return CType(Me.Rows.Find(New Object() {UserCode}),CustomersRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CustomersDataTable = CType(MyBase.Clone,CustomersDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CustomersDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnContacted = MyBase.Columns("Contacted")
            Me.columnCustType = MyBase.Columns("CustType")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnUserCode = MyBase.Columns("UserCode")
        End Sub
        
        Private Sub InitClass()
            Me.columnCompany = New System.Data.DataColumn("Company", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnContacted = New System.Data.DataColumn("Contacted", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContacted)
            Me.columnCustType = New System.Data.DataColumn("CustType", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustType)
            Me.columnFirstName = New System.Data.DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New System.Data.DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnPhone = New System.Data.DataColumn("Phone", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnUserCode = New System.Data.DataColumn("UserCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserCode)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnUserCode}, true))
            Me.columnUserCode.AllowDBNull = false
            Me.columnUserCode.Unique = true
            Me.Locale = New System.Globalization.CultureInfo("en-US")
        End Sub
        
        Public Function NewCustomersRow() As CustomersRow
            Return CType(Me.NewRow,CustomersRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CustomersRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustomersRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomersRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomersRowChanged(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomersRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomersRowChanging(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomersRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomersRowDeleted(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomersRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomersRowDeleting(Me, New CustomersRowChangeEvent(CType(e.Row,CustomersRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustomersRow(ByVal row As CustomersRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomersDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustTypeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTypeDesc As System.Data.DataColumn
        
        Private columnTypeId As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "CustType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property TypeDescColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeDesc
            End Get
        End Property
        
        Public ReadOnly Property TypeIdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeId
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustTypeRow
            Get
                Return CType(Me.Rows(index),CustTypeRow)
            End Get
        End Property
        
        Public Event CustTypeRowChanged As CustTypeRowChangeEventHandler
        
        Public Event CustTypeRowChanging As CustTypeRowChangeEventHandler
        
        Public Event CustTypeRowDeleted As CustTypeRowChangeEventHandler
        
        Public Event CustTypeRowDeleting As CustTypeRowChangeEventHandler
        
        Public Overloads Sub AddCustTypeRow(ByVal row As CustTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCustTypeRow(ByVal TypeDesc As String, ByVal TypeId As Short) As CustTypeRow
            Dim rowCustTypeRow As CustTypeRow = CType(Me.NewRow,CustTypeRow)
            rowCustTypeRow.ItemArray = New Object() {TypeDesc, TypeId}
            Me.Rows.Add(rowCustTypeRow)
            Return rowCustTypeRow
        End Function
        
        Public Function FindByTypeId(ByVal TypeId As Short) As CustTypeRow
            Return CType(Me.Rows.Find(New Object() {TypeId}),CustTypeRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CustTypeDataTable = CType(MyBase.Clone,CustTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CustTypeDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTypeDesc = MyBase.Columns("TypeDesc")
            Me.columnTypeId = MyBase.Columns("TypeId")
        End Sub
        
        Private Sub InitClass()
            Me.columnTypeDesc = New System.Data.DataColumn("TypeDesc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeDesc)
            Me.columnTypeId = New System.Data.DataColumn("TypeId", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeId)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTypeId}, true))
            Me.columnTypeId.AllowDBNull = false
            Me.columnTypeId.Unique = true
            Me.Locale = New System.Globalization.CultureInfo("en-US")
        End Sub
        
        Public Function NewCustTypeRow() As CustTypeRow
            Return CType(Me.NewRow,CustTypeRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CustTypeRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CustTypeRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent CustTypeRowChanged(Me, New CustTypeRowChangeEvent(CType(e.Row,CustTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent CustTypeRowChanging(Me, New CustTypeRowChangeEvent(CType(e.Row,CustTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustTypeRowDeleted(Me, New CustTypeRowChangeEvent(CType(e.Row,CustTypeRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustTypeRowDeleting(Me, New CustTypeRowChangeEvent(CType(e.Row,CustTypeRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCustTypeRow(ByVal row As CustTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSet1 = New DataSet1
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class CustomersRow
        Inherits System.Data.DataRow
        
        Private tableCustomers As CustomersDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomers = CType(Me.Table,CustomersDataTable)
        End Sub
        
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.CompanyColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Company", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.CompanyColumn) = value
            End Set
        End Property
        
        Public Property Contacted() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.ContactedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Contacted", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.ContactedColumn) = value
            End Set
        End Property
        
        Public Property CustType() As Short
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.CustTypeColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column CustType", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.CustTypeColumn) = value
            End Set
        End Property
        
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.FirstNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column FirstName", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.LastNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column LastName", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.LastNameColumn) = value
            End Set
        End Property
        
        Public Property Phone() As Double
            Get
                Try 
                    Return CType(Me(Me.tableCustomers.PhoneColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Phone", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomers.PhoneColumn) = value
            End Set
        End Property
        
        Public Property UserCode() As String
            Get
                Return CType(Me(Me.tableCustomers.UserCodeColumn),String)
            End Get
            Set
                Me(Me.tableCustomers.UserCodeColumn) = value
            End Set
        End Property
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableCustomers.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactedNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.ContactedColumn)
        End Function
        
        Public Sub SetContactedNull()
            Me(Me.tableCustomers.ContactedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustTypeNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.CustTypeColumn)
        End Function
        
        Public Sub SetCustTypeNull()
            Me(Me.tableCustomers.CustTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableCustomers.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableCustomers.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tableCustomers.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tableCustomers.PhoneColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Partial Public Class CustTypeRow
        Inherits System.Data.DataRow
        
        Private tableCustType As CustTypeDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustType = CType(Me.Table,CustTypeDataTable)
        End Sub
        
        Public Property TypeDesc() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustType.TypeDescColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column TypeDesc", e)
                End Try
            End Get
            Set
                Me(Me.tableCustType.TypeDescColumn) = value
            End Set
        End Property
        
        Public Property TypeId() As Short
            Get
                Return CType(Me(Me.tableCustType.TypeIdColumn),Short)
            End Get
            Set
                Me(Me.tableCustType.TypeIdColumn) = value
            End Set
        End Property
        
        Public Function IsTypeDescNull() As Boolean
            Return Me.IsNull(Me.tableCustType.TypeDescColumn)
        End Function
        
        Public Sub SetTypeDescNull()
            Me(Me.tableCustType.TypeDescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class CustomersRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CustomersRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As CustomersRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As CustomersRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    Public Class CustTypeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CustTypeRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As CustTypeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As CustTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
