'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version:2.0.41115.19
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("DsContacts")>  _
Partial Public Class DsContacts
    Inherits System.Data.DataSet
    
    Private tableContacts As ContactsDataTable
    
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Contacts")) Is Nothing) Then
                MyBase.Tables.Add(New ContactsDataTable(ds.Tables("Contacts")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Contacts() As ContactsDataTable
        Get
            Return Me.tableContacts
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.ComponentModel.DefaultValueAttribute(true)>  _
    Public Shadows Property EnforceConstraints() As Boolean
        Get
            Return MyBase.EnforceConstraints
        End Get
        Set
            MyBase.EnforceConstraints = value
        End Set
    End Property
    
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DsContacts = CType(MyBase.Clone,DsContacts)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        Me.Reset
        Dim ds As System.Data.DataSet = New System.Data.DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("Contacts")) Is Nothing) Then
            MyBase.Tables.Add(New ContactsDataTable(ds.Tables("Contacts")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableContacts = CType(MyBase.Tables("Contacts"),ContactsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableContacts) Is Nothing) Then
                Me.tableContacts.InitVars
            End If
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "DsContacts"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/DsContacts.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableContacts = New ContactsDataTable
        MyBase.Tables.Add(Me.tableContacts)
    End Sub
    
    Private Function ShouldSerializeContacts() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DsContacts = New DsContacts
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ContactsRowChangeEventHandler(ByVal sender As Object, ByVal e As ContactsRowChangeEvent)
    
    <System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ContactsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCallback As System.Data.DataColumn
        
        Private columnComments As System.Data.DataColumn
        
        Private columnContactDate As System.Data.DataColumn
        
        Private columnContactType As System.Data.DataColumn
        
        Private columnUserCode As System.Data.DataColumn
        
        Private columnCompany As System.Data.DataColumn
        
        Private columnContacted As System.Data.DataColumn
        
        Private columnCustType As System.Data.DataColumn
        
        Private columnFirstName As System.Data.DataColumn
        
        Private columnLastName As System.Data.DataColumn
        
        Private columnPhone As System.Data.DataColumn
        
        Private columnExpr1 As System.Data.DataColumn
        
        Public Sub New()
            MyBase.New
            Me.TableName = "Contacts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        Public ReadOnly Property CallbackColumn() As System.Data.DataColumn
            Get
                Return Me.columnCallback
            End Get
        End Property
        
        Public ReadOnly Property CommentsColumn() As System.Data.DataColumn
            Get
                Return Me.columnComments
            End Get
        End Property
        
        Public ReadOnly Property ContactDateColumn() As System.Data.DataColumn
            Get
                Return Me.columnContactDate
            End Get
        End Property
        
        Public ReadOnly Property ContactTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnContactType
            End Get
        End Property
        
        Public ReadOnly Property UserCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnUserCode
            End Get
        End Property
        
        Public ReadOnly Property CompanyColumn() As System.Data.DataColumn
            Get
                Return Me.columnCompany
            End Get
        End Property
        
        Public ReadOnly Property ContactedColumn() As System.Data.DataColumn
            Get
                Return Me.columnContacted
            End Get
        End Property
        
        Public ReadOnly Property CustTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnCustType
            End Get
        End Property
        
        Public ReadOnly Property FirstNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Public ReadOnly Property LastNameColumn() As System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Public ReadOnly Property PhoneColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        Public ReadOnly Property Expr1Column() As System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As ContactsRow
            Get
                Return CType(Me.Rows(index),ContactsRow)
            End Get
        End Property
        
        Public Event ContactsRowChanged As ContactsRowChangeEventHandler
        
        Public Event ContactsRowChanging As ContactsRowChangeEventHandler
        
        Public Event ContactsRowDeleted As ContactsRowChangeEventHandler
        
        Public Event ContactsRowDeleting As ContactsRowChangeEventHandler
        
        Public Overloads Sub AddContactsRow(ByVal row As ContactsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddContactsRow(ByVal Callback As Boolean, ByVal Comments As String, ByVal ContactDate As Date, ByVal ContactType As Short, ByVal UserCode As String, ByVal Company As String, ByVal Contacted As Date, ByVal CustType As Short, ByVal FirstName As String, ByVal LastName As String, ByVal Phone As Double, ByVal Expr1 As String) As ContactsRow
            Dim rowContactsRow As ContactsRow = CType(Me.NewRow,ContactsRow)
            rowContactsRow.ItemArray = New Object() {Callback, Comments, ContactDate, ContactType, UserCode, Company, Contacted, CustType, FirstName, LastName, Phone, Expr1}
            Me.Rows.Add(rowContactsRow)
            Return rowContactsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ContactsDataTable = CType(MyBase.Clone,ContactsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ContactsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCallback = MyBase.Columns("Callback")
            Me.columnComments = MyBase.Columns("Comments")
            Me.columnContactDate = MyBase.Columns("ContactDate")
            Me.columnContactType = MyBase.Columns("ContactType")
            Me.columnUserCode = MyBase.Columns("UserCode")
            Me.columnCompany = MyBase.Columns("Company")
            Me.columnContacted = MyBase.Columns("Contacted")
            Me.columnCustType = MyBase.Columns("CustType")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnExpr1 = MyBase.Columns("Expr1")
        End Sub
        
        Private Sub InitClass()
            Me.columnCallback = New System.Data.DataColumn("Callback", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCallback)
            Me.columnComments = New System.Data.DataColumn("Comments", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComments)
            Me.columnContactDate = New System.Data.DataColumn("ContactDate", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactDate)
            Me.columnContactType = New System.Data.DataColumn("ContactType", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactType)
            Me.columnUserCode = New System.Data.DataColumn("UserCode", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserCode)
            Me.columnCompany = New System.Data.DataColumn("Company", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompany)
            Me.columnContacted = New System.Data.DataColumn("Contacted", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContacted)
            Me.columnCustType = New System.Data.DataColumn("CustType", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustType)
            Me.columnFirstName = New System.Data.DataColumn("FirstName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New System.Data.DataColumn("LastName", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnPhone = New System.Data.DataColumn("Phone", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnExpr1 = New System.Data.DataColumn("Expr1", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.Locale = New System.Globalization.CultureInfo("en-US")
        End Sub
        
        Public Function NewContactsRow() As ContactsRow
            Return CType(Me.NewRow,ContactsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ContactsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ContactsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ContactsRowChangedEvent) Is Nothing) Then
                RaiseEvent ContactsRowChanged(Me, New ContactsRowChangeEvent(CType(e.Row,ContactsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ContactsRowChangingEvent) Is Nothing) Then
                RaiseEvent ContactsRowChanging(Me, New ContactsRowChangeEvent(CType(e.Row,ContactsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ContactsRowDeletedEvent) Is Nothing) Then
                RaiseEvent ContactsRowDeleted(Me, New ContactsRowChangeEvent(CType(e.Row,ContactsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ContactsRowDeletingEvent) Is Nothing) Then
                RaiseEvent ContactsRowDeleting(Me, New ContactsRowChangeEvent(CType(e.Row,ContactsRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveContactsRow(ByVal row As ContactsRow)
            Me.Rows.Remove(row)
        End Sub
        
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DsContacts = New DsContacts
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ContactsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    Partial Public Class ContactsRow
        Inherits System.Data.DataRow
        
        Private tableContacts As ContactsDataTable
        
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableContacts = CType(Me.Table,ContactsDataTable)
        End Sub
        
        Public Property Callback() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableContacts.CallbackColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Callback", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.CallbackColumn) = value
            End Set
        End Property
        
        Public Property Comments() As String
            Get
                Try 
                    Return CType(Me(Me.tableContacts.CommentsColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Comments", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.CommentsColumn) = value
            End Set
        End Property
        
        Public Property ContactDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContacts.ContactDateColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column ContactDate", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.ContactDateColumn) = value
            End Set
        End Property
        
        Public Property ContactType() As Short
            Get
                Try 
                    Return CType(Me(Me.tableContacts.ContactTypeColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column ContactType", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.ContactTypeColumn) = value
            End Set
        End Property
        
        Public Property UserCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableContacts.UserCodeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column UserCode", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.UserCodeColumn) = value
            End Set
        End Property
        
        Public Property Company() As String
            Get
                Try 
                    Return CType(Me(Me.tableContacts.CompanyColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Company", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.CompanyColumn) = value
            End Set
        End Property
        
        Public Property Contacted() As Date
            Get
                Try 
                    Return CType(Me(Me.tableContacts.ContactedColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Contacted", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.ContactedColumn) = value
            End Set
        End Property
        
        Public Property CustType() As Short
            Get
                Try 
                    Return CType(Me(Me.tableContacts.CustTypeColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column CustType", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.CustTypeColumn) = value
            End Set
        End Property
        
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableContacts.FirstNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column FirstName", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableContacts.LastNameColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column LastName", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.LastNameColumn) = value
            End Set
        End Property
        
        Public Property Phone() As Double
            Get
                Try 
                    Return CType(Me(Me.tableContacts.PhoneColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Phone", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.PhoneColumn) = value
            End Set
        End Property
        
        Public Property Expr1() As String
            Get
                Try 
                    Return CType(Me(Me.tableContacts.Expr1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Expr1", e)
                End Try
            End Get
            Set
                Me(Me.tableContacts.Expr1Column) = value
            End Set
        End Property
        
        Public Function IsCallbackNull() As Boolean
            Return Me.IsNull(Me.tableContacts.CallbackColumn)
        End Function
        
        Public Sub SetCallbackNull()
            Me(Me.tableContacts.CallbackColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCommentsNull() As Boolean
            Return Me.IsNull(Me.tableContacts.CommentsColumn)
        End Function
        
        Public Sub SetCommentsNull()
            Me(Me.tableContacts.CommentsColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactDateNull() As Boolean
            Return Me.IsNull(Me.tableContacts.ContactDateColumn)
        End Function
        
        Public Sub SetContactDateNull()
            Me(Me.tableContacts.ContactDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactTypeNull() As Boolean
            Return Me.IsNull(Me.tableContacts.ContactTypeColumn)
        End Function
        
        Public Sub SetContactTypeNull()
            Me(Me.tableContacts.ContactTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUserCodeNull() As Boolean
            Return Me.IsNull(Me.tableContacts.UserCodeColumn)
        End Function
        
        Public Sub SetUserCodeNull()
            Me(Me.tableContacts.UserCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCompanyNull() As Boolean
            Return Me.IsNull(Me.tableContacts.CompanyColumn)
        End Function
        
        Public Sub SetCompanyNull()
            Me(Me.tableContacts.CompanyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsContactedNull() As Boolean
            Return Me.IsNull(Me.tableContacts.ContactedColumn)
        End Function
        
        Public Sub SetContactedNull()
            Me(Me.tableContacts.ContactedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCustTypeNull() As Boolean
            Return Me.IsNull(Me.tableContacts.CustTypeColumn)
        End Function
        
        Public Sub SetCustTypeNull()
            Me(Me.tableContacts.CustTypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableContacts.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableContacts.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableContacts.LastNameColumn)
        End Function
        
        Public Sub SetLastNameNull()
            Me(Me.tableContacts.LastNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tableContacts.PhoneColumn)
        End Function
        
        Public Sub SetPhoneNull()
            Me(Me.tableContacts.PhoneColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableContacts.Expr1Column)
        End Function
        
        Public Sub SetExpr1Null()
            Me(Me.tableContacts.Expr1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    Public Class ContactsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ContactsRow
        
        Private eventAction As System.Data.DataRowAction
        
        Public Sub New(ByVal row As ContactsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row() As ContactsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
