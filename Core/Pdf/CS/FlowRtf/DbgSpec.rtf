{\rtf1\ansi\ansicpg1252\uc1\deff0\stshfdbch0\stshfloch0\stshfhich0\stshfbi0\deflang1033\deflangfe1041{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f5\fmodern\fcharset0\fprq1{\*\panose 02070409020205020404}Courier;}
{\f6\froman\fcharset0\fprq2{\*\panose 02020603040505020304}Tms Rmn;}{\f86\froman\fcharset238\fprq2 Times New Roman CE;}{\f87\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f89\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f90\froman\fcharset162\fprq2 Times New Roman Tur;}{\f91\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f92\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f93\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f94\froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f96\fswiss\fcharset238\fprq2 Arial CE;}{\f97\fswiss\fcharset204\fprq2 Arial Cyr;}{\f99\fswiss\fcharset161\fprq2 Arial Greek;}{\f100\fswiss\fcharset162\fprq2 Arial Tur;}
{\f101\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f102\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f103\fswiss\fcharset186\fprq2 Arial Baltic;}{\f104\fswiss\fcharset163\fprq2 Arial (Vietnamese);}{\f106\fmodern\fcharset238\fprq1 Courier New CE;}
{\f107\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f109\fmodern\fcharset161\fprq1 Courier New Greek;}{\f110\fmodern\fcharset162\fprq1 Courier New Tur;}{\f111\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f112\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f113\fmodern\fcharset186\fprq1 Courier New Baltic;}{\f114\fmodern\fcharset163\fprq1 Courier New (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;
\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;
\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \snext0 Normal;}{\s1\ql \li0\ri0\sb120\keepn\widctlpar
\tx480\nooverflow\faroman\outlinelevel0\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext0 heading 1;}{\s2\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel1\rin0\lin0\itap0 
\b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon1 \snext0 heading 2;}{\s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 
\sbasedon2 \snext0 heading 3;}{\s4\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel3\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon3 \snext0 heading 4;}{\s5\ql \li0\ri0\sb120\keepn\widctlpar
\tx480\nooverflow\faroman\outlinelevel4\rin0\lin0\itap0 \b\f1\fs22\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon4 \snext0 heading 5;}{\s6\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel5\rin0\lin0\itap0 
\b\i\f1\fs22\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon5 \snext0 heading 6;}{\s7\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel6\rin0\lin0\itap0 \b\f1\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 
\sbasedon6 \snext0 heading 7;}{\s8\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel7\rin0\lin0\itap0 \b\i\f1\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon7 \snext0 heading 8;}{\s9\ql \li0\ri0\sb120\keepn\widctlpar
\tx360\tx480\nooverflow\faroman\outlinelevel8\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon8 \snext0 heading 9;}{\*\cs10 \additive \ssemihidden Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tscellwidthfts0\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv 
\ql \li0\ri0\widctlpar\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1024\langfe1024\cgrid\langnp1024\langfenp1024 \snext11 \ssemihidden Normal Table;}{\s15\ql \li0\ri0\sb120\widctlpar\tqr\tx8640\nooverflow\faroman\rin0\lin0\itap0 
\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext15 footer;}{\s16\ql \li0\ri0\sb120\widctlpar\tqc\tx4320\tqr\tx8640\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext16 
header;}{\*\cs17 \additive \fs16\up6 \sbasedon10 \ssemihidden footnote reference;}{\s18\ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext18 \ssemihidden footnote text;}
{\s19\ql \li360\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin360\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext0 Normal Indent;}{\s20\ql \fi-1800\li1800\ri0\sb120\widctlpar\tx1800\nooverflow\faroman\rin0\lin1800\itap0 
\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext20 hangtag;}{\s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls2047\ilvl11\rin0\lin720\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext21 bullet 1;}{\s22\ql \fi-360\li1440\ri0\sb120\widctlpar\tx1440{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0
\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls2047\ilvl11\rin0\lin1440\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon21 \snext22 bullet 2;}{\s23\ql \fi-360\li2160\ri0\sb120\widctlpar\tx2160{\*\pn 
\pnlvlbody\ilvl11\ls2047\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls2047\ilvl11\rin0\lin2160\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon22 \snext23 bullet 3;}{
\s24\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}\nooverflow\faroman\ls2047\ilvl11\rin0\lin720\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 
\sbasedon19 \snext24 step;}{\s25\qc \li0\ri0\sb240\sl240\slmult0\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \b\f1\fs36\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext0 Title;}{
\s26\qc \li0\ri0\sb120\keepn\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext27 figure;}{\s27\ql \li1440\ri1440\sb120\keep\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp40 
\nooverflow\faroman\rin1440\lin1440\rtlgutter\itap0 \fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon28 \snext28 figcap1;}{\s28\ql \li1440\ri1440\sb120\keep\keepn\widctlpar\nooverflow\faroman\rin1440\lin1440\itap0 
\fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext28 figcap;}{\s29\qc \li1440\ri1440\sb120\keep\widctlpar\brdrt\brdrs\brdrw15\brsp60 \nooverflow\faroman\rin1440\lin1440\rtlgutter\itap0 
\b\i\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext0 figtitle;}{\s30\ql \fi-360\li1980\ri1440\sb120\keep\keepn\widctlpar\tx1800\tqr\tx2880{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls2047\ilvl11\rin1440\lin1980\itap0 \fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon28 \snext30 figbullet;}{\s31\ql \li360\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin360\itap0 
\f5\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon19 \snext31 code;}{\s32\qr \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon0 \snext32 logo;}{
\s33\qc \li1440\ri1440\sb120\keep\widctlpar\brdrt\brdrs\brdrw15\brsp60 \nooverflow\faroman\rin1440\lin1440\rtlgutter\itap0 \b\i\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon29 \snext33 C;}{
\s34\ql \fi-720\li720\ri0\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \f5\fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon31 \snext34 tinycode;}{\s35\ql \fi-1800\li2160\ri0\sb120\widctlpar
\tx2160\nooverflow\faroman\rin0\lin2160\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon20 \snext35 hangtag indent;}{\s36\ql \li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl11\ls2047\pnrnot0\pndec\pnf6 }
\nooverflow\faroman\ls2047\ilvl11\rin0\lin720\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 \sbasedon21 \snext21 bullet 1 contin;}}{\*\latentstyles\lsdstimax156\lsdlockeddef0}{\*\listtable{\list\listtemplateid-1302533378\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid74129094}{\list\listtemplateid-1848761354\listsimple
{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\lin720 }{\listname ;}\listid258104906}{\list\listtemplateid-1848761354
\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\lin360 }{\listname ;}\listid470556239}
{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\lin720 }{\listname 
;}\listid552735978}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\lin360 }
{\listname ;}\listid935017049}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 
\fi-360\li720\lin720 }{\listname ;}\listid1135366059}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers
;}\f3\fbias0 \fi-360\li720\lin720 }{\listname ;}\listid1191457294}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\lin720 }{\listname ;}\listid1387336271}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0
\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\lin720 }{\listname ;}\listid1413504018}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold
\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\lin720 }{\listname ;}\listid1469854322}{\list\listtemplateid-1848761354\listsimple{\listlevel\levelnfc255\levelnfcn255\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelold\levelspace0\levelindent360{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\lin360 }{\listname ;}\listid1679230187}}{\*\listoverridetable{\listoverride\listid935017049\listoverridecount0\ls1}
{\listoverride\listid470556239\listoverridecount0\ls2}{\listoverride\listid1679230187\listoverridecount0\ls3}{\listoverride\listid258104906\listoverridecount0\ls4}{\listoverride\listid1387336271\listoverridecount0\ls5}{\listoverride\listid74129094
\listoverridecount0\ls6}{\listoverride\listid1413504018\listoverridecount0\ls7}{\listoverride\listid1135366059\listoverridecount0\ls8}{\listoverride\listid552735978\listoverridecount0\ls9}{\listoverride\listid1469854322\listoverridecount0\ls10}
{\listoverride\listid1191457294\listoverridecount0\ls11}}{\*\rsidtbl \rsid7471257}{\*\generator Microsoft Word 11.0.6568;}{\info{\title WinSock 2 Debug and Trace Facilities}{\author David B. Andersen}{\operator Bernardo}
{\creatim\yr2006\mo6\dy12\hr23\min34}{\revtim\yr2006\mo6\dy12\hr23\min34}{\version2}{\edmins0}{\nofpages11}{\nofwords4094}{\nofchars23339}{\*\company MSFT}{\nofcharsws27379}{\vern24579}}
\facingp\widowctrl\ftnbj\aenddoc\ftnrestart\noextrasprl\prcolbl\cvmme\sprsspbf\brkfrm\swpbdr\lytprtmet\hyphcaps0\horzdoc\fracwidth\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow1\dgvshow0
\jexpand\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\bdrrlswsix\nolnhtadjtbl\oldas\rsidroot7471257 \fet0{\*\ftnsep \pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {
\insrsid7471257 \chftnsep 
\par }}{\*\ftnsepc \pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 \chftnsepc 
\par }}{\*\aftnsep \pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 \chftnsep 
\par }}{\*\aftnsepc \pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 \chftnsepc 
\par }}\sectd \linex0\endnhere\sectdefaultcl\sftnbj\sftnrestart {\footerl \pard\plain \s15\ql \li0\ri0\sb120\widctlpar\tqr\tx8640\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 Page }
{\field{\*\fldinst {\insrsid7471257 page}}{\fldrslt {\lang1024\langfe1024\noproof\insrsid7471257 10}}}{\insrsid7471257 \tab }{\field{\*\fldinst {\insrsid7471257 title }}{\fldrslt {\insrsid7471257 WinSock 2 Debug and Trace Facilities}}}{\insrsid7471257 

\par }}{\footerr \pard\plain \s15\ql \li0\ri0\sb120\widctlpar\tqr\tx8640\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\field{\*\fldinst {\insrsid7471257 title }}{\fldrslt {\insrsid7471257 
WinSock 2 Debug and Trace Facilities}}}{\insrsid7471257 \tab Page }{\field{\*\fldinst {\insrsid7471257 page}}{\fldrslt {\lang1024\langfe1024\noproof\insrsid7471257 1}}}{\insrsid7471257 
\par }}{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}
{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \s25\ql \li0\ri0\sb240\sl240\slmult0\widctlpar\nooverflow\faroman\rin0\lin0\itap0\pararsid7471257 
\b\f1\fs36\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\field{\*\fldinst {\insrsid7471257 title }}{\fldrslt {\insrsid7471257 WinSock 2 Debug and Trace Facilities}}}{\insrsid7471257 
\par }\pard\plain \s20\ql \fi-1800\li1800\ri0\sb120\widctlpar\tx1800\nooverflow\faroman\rin0\lin1800\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 \tab 
\par }\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel0\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 1.\tab Introduction
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 Developers of WinSock 2 applications and service providers need to be able to isolate bugs to one of:

\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\sb120\widctlpar{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls1\rin0\lin360\itap0\pararsid7471257 {
\insrsid7471257 The client application, 
\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\sb120\widctlpar{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls2\rin0\lin360\itap0\pararsid7471257 {
\insrsid7471257 The WinSock 2 DLL, or 
\par {\pntext\pard\plain\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\sb120\widctlpar{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}\nooverflow\faroman\ls3\rin0\lin360\itap0\pararsid7471257 {
\insrsid7471257 The service provider (transport or name space)
\par }\pard \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 {\insrsid7471257 The WinSock 2 debug/trace layer address this problem.  It allows all procedure calls across the WinSock 2 API or SPI to be monitored, and to some extent controlled.

\par Developers can use this mechanism to trace the procedure calls, procedure returns, parameter values, and return values.  Parameter values and returns can be altered on procedure-call or procedure-return.  If desired, a procedure-call can even be prevented
 or redirected.  With access to this level of information and control, it should be easy for a developer to isolate any problem to the application, WinSock 2 DLL or service provider.
\par The debug/trace layer is supported only by a specially instrumented version of the WinSock 2 DLL.  The SDK license terms do not allow re-distribution of this instrumented WinSock 2 DLL in order to prevent inappropriate use of the debug hooks in production
 systems.
\par This document serves two purposes.  First, it defines the interface between the WinSock2 DLL and an auxiliary debug/trace DLL.  Second, it describes th
e functionality, design, and implementation of the default debug/trace DLL (named dt_dll.dll), which is supplied in source-code form with the WinSock 2 SDK.  Developers may find that the default debug/trace DLL supplies all the necessary functionality for
 their purposes.  However, they are also free to modify the code to provide additional debugging functionality, or they may start from scratch and build a new debug/trace DLL.  In the latter case, only the interface definition portion of this document may
 be relevant, and the reader can skip the section describing the default DLL.  The default DLL does contain hooks, however, which allow it to be extended for all but the most complex types of debugging and tracing.
\par }\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel0\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 2.\tab The Interface
\par }\pard\plain \s2\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 2.1\tab Overview
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
As mentioned above, the debug/trace layer is composed of a specially-instrumented WinSock 2 DLL, combined with an auxiliary debug/trace DLL.  The interface between these two modules is defined by two functions which must be exported by dt_dll.dll and call
ed }{\i\insrsid7471257 WSAPreApiNotify}{\insrsid7471257  and }{\i\insrsid7471257 WSAPostApiNotify}{\insrsid7471257 
. When the instrumented WinSock 2 DLL loads, it attempts to load dt_dll.dll and retrieve pointers to these functions (the header file dt_dll.h in the WinSock 2 sources gives typedefs for these pointers, as well as prototypes of the exported functions).  L
ater, the application will call an API function.  However, the instrumented WinSock 2 DLL has API function names bound to special hook functions. These hook functions wrap calls to WSAPre/PostApiNotify around the call to the actual 
API (and SPI) functions, as follows.
\par {\pntext\pard\plain\s21 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls4\rin0\lin720\itap0\pararsid7471257 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
Before the hook function does anything, it calls the WSAPreApiNotify function, passing along all the information about the call and parameters. WSAPreApiNotify, implemented in the debug/trace DLL, returns a boolean indicating whether the original procedur
e call should proceed or not.  If WSAPreApiNotify returns a \'93should proceed\'94 indication, the instrumented WinSock 2 DLL goes ahead and proceeds with the function execution.  When the execution is ready to return to the a
pplication, the instrumented WinSock 2 DLL calls the WSAPostApiNotify function in dt_dll.dll.  When WSAPostApiNotify returns, the WinSock 2 DLL returns to the application..
\par {\pntext\pard\plain\s21 \f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls5\rin0\lin720\itap0\pararsid7471257 {\insrsid7471257 
When the instrumented WinSock 2 DLL is about to call a SPI function, the WinSock 2 DLL first calls WSAPreApiNotify in the auxiliary DLL.  WSAPreApiNotify returns an indication of whether or not the call should proceed.  If the call should proceed, the ins
trumented WinSock 2 DLL calls the SPI function.  After the SPI function returns, the WinSock 2 DLL calls WSAPostApiNotify and eventually returns to the caller.
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The execution path through these debug hooks for a typical function such as WSAConnect is illustrated in the figure below:
\par }\pard\plain \s26\qc \li0\ri0\sb120\keepn\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 {\pict\wmetafile8\picw19117\pich13740\picwgoal10838\pichgoal7790 \picscalex53\picscaley53 
0100090000035904000005004400000000000400000003010800050000000c025706d208050000000b02fffffeff1400000026060f001d0043726561746f723a204d6778776d6620322e30612030322f32332f3933001700000026060f002400417574686f72733a20426f6220476965736520616e642053636f747420566f
6c6c6d65721100000026060f001700436f6d70617469626c6520776974682050534352495054000400000002010200050000000102ffffff000400000004010d000400000005010100040000000601010008000000fa0200000000000000000000040000002d0100000400000004010d000400000002010100080000002503
0200070299030702a70507000000fc020000000000000000040000002d0101000c0000002403040015028b050702a705fa018b0515028b050a000000250303000702a7053f02a7053f02d1030c000000240304003102ed033f02d1034d02ed033102ed03080000002503020007022803d80528030c00000024030400bc051a
03d8052803bc053603bc051a030a00000025030300d8052803d8059903070299030c000000240304002302a7030702990323028b032302a70308000000250302003f02d1031006d1030c00000024030400f405c3031006d103f405df03f405c3030a000000250303001006d1031006f0023f02f0020c000000240304005b02
fd023f02f0025b02e2025b02fd02080000002503020007023f01d8053f010c00000024030400bc053101d8053f01bc054d01bc0531010a00000025030300d8053f01d805b0010702b0010c000000240304002302be010702b0012302a2012302be0108000000250302003f02e9011006e9010c00000024030400f405db0110
06e901f405f701f405db010a000000250303001006e901100607013f0207010c000000240304005b0215013f0207015b02f9005b02150108000000250302000702b001070228030c0000002403040015020c0307022803fa010c0315020c0308000000250302003f02f0023f02e9010c00000024030400310205023f02e901
4d0205023102050208000000250302000702710007023f010c000000240304001502230107023f01fa0123011502230108000000250302003f0207013f0271000c0000002403040031028d003f0271004d028d0031028d0008000000fa02050000000000ffffff00040000002d010200040000000201020004000000060102
004400000024032000da00b800d800b800d600ba00d6001e04d7001e04d8001f04d9001f04da0020046004200461041f0462041f0462041e0463041e0463041d0464041c046404bc006304bb006304ba006204b9006204b8006004b800da00b800da00c0006004c0005c04bc005c041c0460041804da001804de001c04de00
bc00da00c000da00b80044000000240320004205b8004005b8003e05ba003e051e043f051e0440051f0441051f0442052004c8082004c9081f04ca081f04ca081e04cb081e04cb081d04cc081c04cc08bc00cb08bb00cb08ba00ca08b900ca08b800c808b8004205b8004205c000c808c000c408bc00c4081c04c808180442
05180446051c044605bc004205c0004205b8003600000024031900da002105d7002105d6002205d6005106d8005106d90052066104520662045106630451066304500664045006640423056204210560042105da002105da002505600425055c0423055c04500660044e06da004e06de005006de002305da002505da002105
040000002d01000007000000fc020100000000000000040000002d0103000400000002010100070000001804a004c3022f0452021c000000fb02b5ff21000000000090010000000000000222417269616c00e652ed3bbf040000e65719003053000000000000872bd6520004040000002d01040008000000320a4304760201
00000036000700000018046501e101f400700108000000320a07019301010000003100070000001804fb01e1018b01700108000000320a9d0193010100000032000700000018044e03e101dd02700108000000320aef029301010000003300070000001804e403e1017303700108000000320a860393010100000034000700
00001804cd05e1015c05700108000000320a6e0593010100000035000700000018046c02c302fb01520208000000320a0e0276020100000037000700000018049600d5022600650208000000320a3800880201000000380008000000320a0000ffff01000000570008000000320a00004b0001000000690008000000320a00
005b00010000006e0008000000320a0000850001000000530008000000320a0000b800010000006f0008000000320a0000e20001000000630008000000320a00000801010000006b0008000000320a00002d0101000000200008000000320a0000440101000000320008000000320a5700de0001000000440008000000320a
57001401010000004c0008000000320a57003e01010000004c0008000000320a5f00890701000000640008000000320a5f00b30701000000740008000000320a5f00c707010000005f0008000000320a5f00f10701000000640008000000320a5f001b08010000006c0008000000320a5f002d08010000006c000800000032
0a5f003e08010000002e0008000000320a5f00520801000000640008000000320a5f007c08010000006c0008000000320a5f008d08010000006c0008000000320ac504210301000000730008000000320ac504470301000000650008000000320ac504710301000000720008000000320ac5048a0301000000760008000000
320ac504af0301000000690008000000320ac504c00301000000630008000000320ac504e50301000000650008000000320ac504100401000000200008000000320ac504260401000000700008000000320ac504500401000000720008000000320ac5046904010000006f0008000000320ac5049304010000007600080000
00320ac504b80401000000690008000000320ac504c70401000000640008000000320ac504f10401000000650008000000320ac5041b0501000000720003000000000000000000000000000000000000000000}}{\insrsid7471257 
\par }\pard\plain \s27\ql \li1440\ri1440\sb120\keep\keepn\widctlpar\brdrt\brdrs\brdrw15\brsp40 \nooverflow\faroman\rin1440\lin1440\rtlgutter\itap0 \fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
A typical execution path for WSAConnect involving the debug/trace layer is shown.  (1) A client application calls WSAConnect.  The WinSock 2 DLL calls the WSAPreApiNotify entry point in dt_dll.dll passing WSAConnect call information.  The dt_dll.dll decod
es the call info and returns.  (2) The WinSock 2 DLL pro
ceeds until it is about to call the provider.  (3) The WinSock 2 DLL calls WSAPreApiNotify with WSPConnect call information.  The dt_dll.dll decodes the information and returns.  (4) The WinSock 2 DLL calls the service provider\rquote 
s WSPConnect function, which (5) performs the connect and returns.
\par (6) The WinSock 2 DLL calls WSAPostApiNotify with WSPConnect call information.  The dt_dll.dll decodes and returns.  The WinSock 2 DLL completes its processing.  (7) the WinSock 2 DLL calls WSAPostApiNotify with WSACo
nnect call information.  The dt_dll.dll decodes and returns.  (8) The WinSock 2 DLL returns the final result to the application.
\par }\pard\plain \s29\qc \li1440\ri1440\sb120\keep\widctlpar\brdrt\brdrs\brdrw15\brsp60 \nooverflow\faroman\rin1440\lin1440\rtlgutter\itap0 \b\i\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
Typical execution through the debug/trace layer
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 It is important to note the sequence of events as viewed by the dt_dll.dll:
\par {\pntext\pard\plain\s24 \fs20 \hich\af0\dbch\af0\loch\f0 1.\tab}}\pard\plain \s24\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin0\lin720\itap0\pararsid7471257 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 WSAPreApiNotify announces a call into the WinSock 2 DLL at the WSAConnect function
\par {\pntext\pard\plain\s24 \fs20 \hich\af0\dbch\af0\loch\f0 2.\tab}}\pard \s24\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin0\lin720\itap0\pararsid7471257 {\insrsid7471257 WSAPreApiNotify announces a call out of the WinSock 2 DLL to the WSPConnect function
\par {\pntext\pard\plain\s24 \fs20 \hich\af0\dbch\af0\loch\f0 3.\tab}}\pard \s24\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin0\lin720\itap0\pararsid7471257 {\insrsid7471257 WSAPostApiNotify announces a return back into the WinSock 2 DLL from the WSPConnect function.
\par {\pntext\pard\plain\s24 \fs20 \hich\af0\dbch\af0\loch\f0 4.\tab}}\pard \s24\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec\pnstart1\pnindent360\pnhang {\pntxta .}}
\nooverflow\faroman\ls6\rin0\lin720\itap0\pararsid7471257 {\insrsid7471257 WSAPostApiNotify announces a return back from the WinSock 2 DLL from the WSAConnect function.
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 Since the invocation of the service provider\rquote 
s WSPConnect function is nested within the invocation of the API-level WSAConnect function, the Pre/Post notification pair announcing the SPI activity is nested between the Pre/Post notification pair announcing
 the API activity.  The default dt_dll.dll supplied with the SDK (see below) includes fairly straightforward logic to match \'93post\'94 notifications with their corresponding \'93pre\'94 notifications for each thread in spite of any intervening activity.

\par }\pard\plain \s2\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 2.2\tab Procedure Specifications
\par }\pard\plain \s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 2.2.1\tab WSAPreApiNotify
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 WSAPreApiNotify announces the start of processing for the WinSock 2 DLL\rquote 
s implementation of an API function or the start of processing for a service provider\rquote s SPI function.  A notification code passed to this procedure indicates the specific function inv
ocation that is being announced.  The dt_dll.dll must implement WSAPreApiNotify.  Note that WSAPreApiNotify has \'93C\'94 calling sequence with a variable argument list.
\par }\pard\plain \s31\ql \li360\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin360\itap0 \f5\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 BOOL WINAPIV\line WSAPreApiNotify(\line     IN  INT    NotificationCode,\line 
    OUT LPVOID ReturnCode,\line     IN  LPSTR  LibraryName,\line     ...);
\par }\pard\plain \s35\ql \fi-1800\li2160\ri0\sb120\widctlpar\tx2160\nooverflow\faroman\rin0\lin2160\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 NotificationCode\tab 
Supplies a value indicating the specific function invocation that is being announced.  Values for this parameter corresponding to each API and SPI function are defined in the header file.  Additional values may be defined in the future to
 announce other WinSock 2 processing events of interest.
\par ReturnCode\tab Returns a value tha
t should replace the return value of the announced function if the dt_dll.dll elects to skip the processing that would otherwise occur.  The actual type of the value depends on the specific function being announced.  This value is ignored if WSAPreApiNoti
fy returns FALSE.
\par LibraryName\tab Supplies the name of the library invoked.  For API function announcements, this is \'93winsock2.dll\'94.  For SPI function announcements, this is the path of the service provider DLL.
\par ...\tab Supplies a variable argument list of pointers to each of the parameters of the specific function being announced.  For example, for a function with three INT parameters, the variable argument list has three \'93pointer-to-INT\'94 values.
\par }\pard\plain \s20\ql \fi-1800\li1800\ri0\sb120\widctlpar\tx1800\nooverflow\faroman\rin0\lin1800\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\b\insrsid7471257 Return Value}{\insrsid7471257 \tab 
If WSAPreApiNotify returns TRUE, the caller (WinSock 2 DLL) will skip the processing that otherwise would have been done and return from the original announced function.  The value used as the return value of the announced function is the current value i
n the location pointed to by ReturnCode.  If WSAPreApiNotify returns FALSE, the ReturnCode value is ignored and processing proceeds as usual.
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The variable argument list is filled with pointers to each of the formal parameters that were passed to the original announced function.  So for announcing a function such as connect(SOCKET s, const struct sockaddr FAR *name, int namelen), the call sequen
ce looks something like the following:
\par }\pard\plain \s31\ql \li360\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin360\itap0 \f5\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 BOOL  should_skip;\line int   connect_return;\line \line 
should_skip = (* lpWSAPreApiNotify) (\line     DTCODE_connect,             // NotificationCode\line     (LPVOID) & connect_return,  // ReturnCode\line     \'93winsock2.dll\'94,             // LibraryName\line     & s,\line     & name,\line     & namelen);
\line \line if (should_skip) \{\line     return(connect_return);\line \}
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 This gives the WSAPreApiNotify function full access to the parameters of the function being announced }{
\i\insrsid7471257 but with an extra level of indirection}{\insrsid7471257 
.  The extra level of indirection is not needed in most cases, since a typical WSAPreApiNotify function will simply log or display parameter values and return.  However, since WSAPreApiNotify has pointers to the original announced function\rquote 
s formal parameters, WSAPreApiNotify has the ability to modify the actual parameter values before any processing begins.  This gives the dt_dll.dll a very powerful tool to use in more complex debugging, diagnostic, and testing scenarios.
\par Similarly, the WSAPreApiNotify function has a pointer to a variable where the original announced function\rquote s return value will be stored.  The dt_dll.dll can modify this variable and return TRUE to indicate that processing should
 be skipped for this API or SPI function.  The modified return value is used as the return value from the announced function as if the value had been determined from the actual processing.  Together with read/write access to the formal parameters this giv
es the dt_dll.dll the ability to completely replace the announced function if desired.  Note that a typical dt_dll.dll that only does logging or display returns FALSE and the ReturnCode parameter is ignored.
\par }\pard\plain \s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 2.2.2\tab WSAPostApiNotify
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 WSAPostApiNotify announces the completion of processing for the WinSock 2 DLL\rquote 
s implementation of an API function or announces a return from processing by a service provider\rquote s SPI function.  A notification code passed to this procedure indicates the specific function completion or
 return that is being announced.  The dt_dll.dll must implement WSAPostApiNotify.  Note that WSAPostApiNotify has \'93C\'94 calling sequence with a variable argument list.
\par }\pard\plain \s31\ql \li360\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin360\itap0 \f5\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 BOOL WINAPIV\line WSAPostApiNotify(\line     IN     INT    NotificationCode,\line 
    IN OUT LPVOID ReturnCode,\line     IN     LPSTR  LibraryName,\line     ...);
\par }\pard\plain \s35\ql \fi-1800\li2160\ri0\sb120\widctlpar\tx2160\nooverflow\faroman\rin0\lin2160\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 NotificationCode\tab 
Supplies a value indicating the specific function completion or return that is being announced.  Values for this parameter corresponding to each API and SPI function are defined in the header file.  Additional values may be defined in the
 future to announce other WinSock 2 processing events of interest.
\par ReturnCode\tab Supplies the return value determined by function processing or returned from the service provider. Returns a value that should repla
ce the return value from the function processing or the value returned from the service provider.  The actual type of the value depends on the specific function completion or return being announced.
\par LibraryName\tab Supplies the name of the library whose processing has just completed.  For API function announcements, this is \'93winsock2.dll\'94.  For SPI function announcements, this is the path of the service provider DLL.
\par ...\tab Supplies a variable argument list of pointers to each of the parameters of the specific function being announced.  For example, for a function with three INT parameters, the variable argument list has three \'93pointer-to-INT\'94 values.
\par }\pard\plain \s20\ql \fi-1800\li1800\ri0\sb120\widctlpar\tx1800\nooverflow\faroman\rin0\lin1800\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\b\insrsid7471257 Return Value}{\insrsid7471257 \tab 
For announcements of API processing completion or SPI function return, the return value is ignored.  The dt_dll.dll\rquote 
s implementation should return FALSE.  The interpretation of the return value is reserved for possible future use with new NotificationCode values.
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 The variable argument list is filled with pointers to each of the formal parameters that were 
passed to the original announced function.  So for announcing completion of processing for a function such as connect(SOCKET s, const struct sockaddr FAR *name, int namelen), the call sequence looks something like the following:
\par }\pard\plain \s31\ql \li360\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin360\itap0 \f5\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 BOOL  dont_care;\line int   connect_return;\line \line 
connect_return = actual_connect_processing(s, name, namelen);\line \line dont_care = (* lpWSAPostApiNotify) (\line     DTCODE_connect,             // NotificationCode\line     (LPVOID) & connect_return,  // ReturnCode\line     \'93winsock2.dll\'94
,             // LibraryName\line     & s,\line     & name,\line     & namelen);\line \line return(connect_return);
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
As with WSAPreApiNotify above, the WSAPostApiNotify function has full access to the parameters of the function being announced but with an extra level of indirection (we realize this is not particularly useful).  WSAPostApiNotify can modify any buffers or
 variables supplied as out parameters, but beware that it must go through an extra level of indirection to get to them. 
\par Similarly, the WSAPostApiNotify function has a pointer to a variable where the original announced function\rquote 
s return value was stored.  The dt_dll.dll can modify this variable to alter the return value determined from processing or returned from the service provider. Note that a typical dt_dll.dll that only does logging or dis
play leaves ReturnCode value unmodified.
\par }\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel0\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 3.\tab Typical Implementation
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The following pseudo-code example illustrates one way a fragment of a WSAPreApiNotify function could be implemented.  The actual dt_dll.dll source code is somewhat more elaborate and differently organized since processing common to all notifications is 
\'93factored out\'94 to reduce the source-code size.  The dt_dll.dll implementation also contains additional logic not shown here to match pre/post notifications, generate log output, synchronize mu
ltiple-thread access to the log output etc.  See the section on the default debug/trace DLL, below, for more details.
\par }\pard\plain \s31\ql \li360\ri0\sb120\keep\widctlpar\nooverflow\faroman\rin0\lin360\itap0 \f5\fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 \line BOOL WINAPIV\line WSAPreApiNotify(\line     IN  INT    NotificationCode,\line 
    OUT LPVOID ReturnCode,\line     IN  LPSTR  LibraryName,\line     ...)\line \{\line     va_list  vl;     // used for variable arg-list parsing\line \line     // Prepare to parse variable argument list\line     va_start(vl, LibraryName);\line \line 
    // Determine which function is being announced\line     switch (NotificationCode) \{\line \line         case DCODE_connect:\line             // handle a \'93connect\'94 announcement\line             \{\line 
                // declare some local variables for parameters\line                 // and return value\line                 int                   * RetVal = (int *) ReturnCode;\line                 SOCKET                * s;\line 
                struct sockaddr FAR * * name;\line                 int                   * namelen;\line \line                 // parse parameters out of variable argument list\line                 s       = va_arg(vl, SOCKET *);\line 
                name    = va_arg(vl, struct sockaddr FAR * *);\line                 namelen = va_arg(vl, int *);\line \line                 // construct a log entry including one of the\line                 // parameter values.  Note the \'93extra\'94
 level\line                 // of indirection when accessing the \'93namelen\'94\line                 // parameter value.\line                 wsprintf(\line                     Buffer,\line                     \'93
Library: %s, Function: connect, namelen=%d\\n\'94,\line                     LibraryName,\line                     * namelen);\line \line #if defined(DEMO_PARAM_MODIFICATION)\line                 // illustrate parameter value modification\line 
                * namelen = sizeof(sockaddr);\line #endif\line \line #if defined(DEMO_EXECUTION_SKIPPING)\line                 // illustrate return-value substitution and\line                 // execution skipping\line         
        * RetVal = SOCKET_ERROR;\line                 return(TRUE);  // skip further execution\line #endif\line             \}\line             break;\line \line     \} // switch (NotificationCode)\line \line 
    return(FALSE);  // allow execution to proceed normally\line \line \}  // WSAPreApiNotify
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
\par }\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel0\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 4.\tab DT_DLL.H header file (excerpt)
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The following is an excerpt from the dt_dll.h header file that defines the syntax of the interface between the WinSock 2 DLL and the auxiliary dt_dll.dll.  The long list of manifest constants for the function announcement codes 
is mostly omitted for brevity.
\par }\pard\plain \s34\ql \fi-720\li720\ri0\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \f5\fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
\par /*++
\par 
\par Copyright (c) 1995 Intel Corp
\par 
\par File Name:
\par 
\par     dt_dll.h
\par 
\par Abstract:
\par 
\par     Definitions, constants, and data structures for the Debug/Trace
\par     DLL for the WinSock2 DLL.  Please refer to the design spec for 
\par     more information.
\par 
\par Author:
\par 
\par     Michael A. Grafton
\par 
\par Revision History:
\par 
\par     10-August-1995 mike_grafton@ccm.jf.intel.com
\par        -- first working draft
\par 
\par --*/
\par 
\par #ifndef _DT_DLL_H
\par #define _DT_DLL_H
\par 
\par 
\par BOOL WINAPIV
\par WSAPreApiNotify(
\par     IN  INT    NotificationCode,
\par     OUT LPVOID ReturnCode,
\par     IN  LPSTR  LibraryName,
\par     ...);
\par 
\par BOOL WINAPIV
\par WSAPostApiNotify(
\par     IN     INT    NotificationCode,
\par     IN OUT LPVOID ReturnCode,
\par     IN     LPSTR  LibraryName,
\par     ...);
\par 
\par 
\par 
\par // API function codes for Pre/PostApiNotify functions
\par 
\par #define DTCODE_accept 1
\par #define DTCODE_bind 2
\par 
\par // skipping ...
\par 
\par #define DTCODE_WSAAccept 22
\par #define DTCODE_WSAAsyncSelect 23
\par #define DTCODE_WSACancelBlockingCall 24
\par 
\par // skipping ...
\par 
\par #define DTCODE_WSPAccept 73
\par #define DTCODE_WSPAsyncSelect 74
\par #define DTCODE_WSPBind 75
\par #define DTCODE_WSPCancelBlockingCall 76
\par #define DTCODE_WSPCleanup 77
\par 
\par // skipping...
\par 
\par #define DTCODE_WPUCloseEvent 103
\par #define DTCODE_WPUCloseSocketHandle 104
\par 
\par // skipping...
\par 
\par #endif _DT_DLL_H
\par 
\par 
\par }\pard\plain \s1\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel0\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.\tab The Default Debug/Trace DLL
\par }\pard\plain \s2\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.1\tab Overview
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The default debug/trace DLL supplied with the WinSock2 SDK provides a simple logging mechanism for API and SPI boundary crossings, as well as a base implementation from which developers can create more complicated debugging and tracing schemes.  This sect
ion of the document describes both the functionality of the default DLL -- i.e. what you can expect from it \'93out of the box\'94
 -- as well as the design and implementation of the module.  Developers can use this information to quickly and easily modify the DLL to suit their particular debugging needs.
\par }\pard\plain \s2\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.2\tab Functionality
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The default debug/trace DLL, when loaded by the specially instrumented WinSock 2 DLL, simply logs some key information about each API/SPI call or return event, as reported by WSAPre/PostApiNotify.  Ea
ch line of output corresponds to one such event, and each contains the following information:
\par {\pntext\pard\plain\s21 \i\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls7\rin0\lin720\itap0\pararsid7471257 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\i\insrsid7471257 line number}{\insrsid7471257  of the output.
\par {\pntext\pard\plain\s21 \i\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls8\rin0\lin720\itap0\pararsid7471257 {\i\insrsid7471257 thread ID }{\insrsid7471257 of the application thread that made the call.
\par {\pntext\pard\plain\s21 \i\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls9\rin0\lin720\itap0\pararsid7471257 {\i\insrsid7471257 function call ID}{\insrsid7471257  to keep track of nested calls (see below for further explanation).
\par {\pntext\pard\plain\s21 \i\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls10\rin0\lin720\itap0\pararsid7471257 {\i\insrsid7471257 function name}{\insrsid7471257  of the API or SPI.
\par {\pntext\pard\plain\s21 \i\f3\fs20 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \s21\ql \fi-360\li720\ri0\sb120\widctlpar\tx720{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pnf3\pnstart1\pnindent360\pnhang {\pntxtb \'b7}}
\nooverflow\faroman\ls11\rin0\lin720\itap0\pararsid7471257 {\i\insrsid7471257 event type}{\insrsid7471257 , i.e. whether this was a call event or a return event.
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 The }{\i\insrsid7471257 function call ID}{\insrsid7471257 
 field of the debugging output helps the reader of the listing quickly identify the matching }{\i\insrsid7471257 xxxx() called}{\insrsid7471257  and }{\i\insrsid7471257 xxxx() returned}{\insrsid7471257  lines
.  This will be helpful when API functions may be nested several levels deep and the matching lines have several lines of intervening WinSock 2 activity in between them.  As you can see below, API and SPI functions are treated exactly the same, and thus a
ll SPI calls are nested within a corresponding API call.  It should also be noted that the function call IDs are local to the calling thread; as described below in the implementation notes, each thread has it\rquote 
s own separate stack of function call numbers to keep track of this nesting.
\par Here is the first several lines of a listing created by the WS2 Chat sample application:
\par }\pard\plain \s34\ql \fi-720\li720\ri0\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \f5\fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
\par (0) Log initiated: 10-28-1995, 17:6:5
\par (1) Process ID: 0xFFFEFEB5   Thread ID: 0xFFFEFA15
\par (2) TID: 0xFFFEFA15   Function call: 0   WSAStartup() called.
\par (3) TID: 0xFFFEFA15   Function Call: 0   WSAStartup() returned.
\par (4) TID: 0xFFFEFA15   Function call: 1   WSAEnumProtocols() called.
\par (5) TID: 0xFFFEFA15   Function Call: 1   WSAEnumProtocols() returned.
\par (6) TID: 0xFFFEFA15   Function call: 2   WSAEnumProtocols() called.
\par (7) TID: 0xFFFEFA15   Function Call: 2   WSAEnumProtocols() returned.
\par (8) TID: 0xFFFEFA15   Function call: 3   WSASocket() called.
\par (9) TID: 0xFFFEFA15   Function call: 4   WSPSocket() called.
\par (10) TID: 0xFFFEFA15   Function Call: 4   WSPSocket() returned.
\par (11) TID: 0xFFFEFA15   Function Call: 3   WSASocket() returned.
\par (12) TID: 0xFFFEFA15   Function call: 5   bind() called.
\par (13) TID: 0xFFFEFA15   Function call: 6   WSPBind() called.
\par (14) TID: 0xFFFEFA15   Function Call: 6   WSPBind() returned.
\par (15) TID: 0xFFFEFA15   Function Call: 5   bind() returned.
\par (16) TID: 0xFFFEFA15   Function call: 7   WSAAsyncSelect() called.
\par (17) TID: 0xFFFEFA15   Function call: 8   WSPAsyncSelect() called.
\par (18) TID: 0xFFFEFA15   Function Call: 8   WSPAsyncSelect() returned.
\par (19) TID: 0xFFFEFA15   Function Call: 7   WSAAsyncSelect() returned.
\par (20) TID: 0xFFFEFA15   Function call: 9   listen() called.
\par (21) TID: 0xFFFEFA15   Function call: 10   WSPListen() called.
\par (22) TID: 0xFFFEFA15   Function Call: 10   WSPListen() returned.
\par (23) TID: 0xFFFEFA15   Function Call: 9   listen() returned.
\par 
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
When the debug/trace DLL is loaded, it looks in the registry to determine whether the Winsock calls made by this application should be logged. To select which applications should be logged by DT_DLL, add a key under }{\f2\fs16\insrsid7471257 
HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Winsock2\\Parameters\\DT_DLL_App_Data}{\insrsid7471257  with the application\rquote s name. For example to log Internet Explorer the key \'93iexplore.exe\'94 would be created under the above me
ntioned location. Note that this is a }{\i\insrsid7471257 key}{\insrsid7471257  and not a value under }{\f1\fs16\insrsid7471257 DT_DLL_App_Data}{\insrsid7471257 .
\par }\pard\plain \s2\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel1\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.3\tab Implementation
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The following is a brief description of the implementation of the default debug/trace DLL.  It is intended as a \'93roadmap\'94 to the code.  Please refer to the code itself for more detailed comments.
\par }\pard\plain \s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.3.1\tab Thread Stacks
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
The debug/trace DLL uses a fairly straightforward stack class to keep track of function call ID numbers.  When the DLL is notified of the application creating a new thread, it creates an instance 
of a cstack object and stores a pointer to the object in thread local storage (TLS). This is a classic stack with one small difference; the }{\i\insrsid7471257 push()}{\insrsid7471257 
 method, rather than taking a pointer to a piece of data, takes no parameters.  Instead, it simply pushes a private variable called }{\i\insrsid7471257 counter}{\insrsid7471257  onto the stack, and increments it\rquote s value (}{\i\insrsid7471257 counter
}{\insrsid7471257  is initialized to zero).  Pop simply pulls the integer off the stack.
\par When an API function is called, WSAPreApiNotify retrieves it\rquote s the stack object, records the counter, and
 then performs a push operation.  The output is then displayed. Any number of nested, intervening API or SPI functions can now take place,  pushing and popping their own function call IDs, but they will all have returned by the time WSAPostApiNotify is ca
lled for this function in this thread.  We then pop the same counter off the stack and print that number in the output.  Note that if WSAPreApiNotify determines that it wants to short-circuit the API or SPI function by returning FALSE, it pops the counter
 off the stack, but no output is displayed.  Thus, it is possible for there to be no matching }{\i\insrsid7471257 return }{\insrsid7471257 notification for some }{\i\insrsid7471257 call}{\insrsid7471257  events.
\par }\pard\plain \s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.3.2\tab Handler Functions
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
Both WSAPre- and WSAPostApiNotify can be called with over 100 different notification codes.  To handle all the different possibilities, the debug/trace DLL uses a slew of }{\i\insrsid7471257 handler functions}{\insrsid7471257 
, one for each possible notification code.  These functions are contained in handlers.cpp.  Rather than using a giant switch statement to call the appropriate handler
 function, we use a table of function pointers which is initialized during the DLL_PROCESS_ATTACH segment of DllMain().  WSAPre/PostApiNotify both use the same method to call the handler functions -- the notification code is used to index into the pointer
 table and that pointer is dereferenced with a common set of parameters. These parameters mostly duplicate the information passed to WSAPre/PostApiNotify (i.e. a pointer to the API function\rquote 
s return value, and a pointer to the variable-length parameter list
).  A few additional parameters give other information to the handler functions, such as a boolean to distinguish the calling functions from each other, and a buffer into which the handler may dump the rest of the (function-specific) output line.
\par Here is a typical handler function:
\par }\pard\plain \s34\ql \fi-720\li720\ri0\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 \f5\fs16\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
\par 
\par BOOL CALLBACK
\par DTHandler_accept(
\par     IN     va_list vl,
\par     IN OUT LPVOID  ReturnValue,
\par     IN     LPSTR   LibraryName,
\par     OUT    char    *Buffer,
\par     IN     int     Index,
\par     IN     int     BufLen,
\par     IN     BOOL    PreOrPost)
\par \{
\par     SOCKET *RetVal = (SOCKET *)ReturnValue;
\par     SOCKET *s = va_arg(vl, SOCKET *);
\par     struct sockaddr FAR **addr = va_arg(vl, struct sockaddr FAR **);
\par     int FAR **addrlen = va_arg(vl, int FAR **);
\par 
\par     wsprintf(Buffer + Index, "accept() %s.\\r\\n",
\par              PreOrPost ? "called" : "returned");
\par     DTTextOut(DebugWindow, LogFileHandle, Buffer, OutputStyle);
\par     return(FALSE);
\par \}
\par 
\par }\pard\plain \ql \li0\ri0\keep\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 It doesn\rquote 
t do much; basically, it uses the va_arg() macro to strip off pointers to the original API function\rquote s parameters, 
and puts these pointers into local variables.   If the developer wants to examine the parameters passed into any particular API/SPI call, he is encouraged to set breakpoints in these handler functions; at that point, he can use the debugger to dereference
 the local variables that point to the parameters (don\rquote 
t forget about that extra level of indirection!). After stripping off the parameters, the handler functions print some output into the given buffer and return FALSE, indicating to WSAPreApiNotify to con
tinue with execution of the function (WSAPostApiNotify ignores this return value, of course).  It is here, in these handler functions, that the more ambitious developer could add her code.  Type-specific formatting procedures could be written to output th
e API parameters in a readable way.  Or some processing may need to occur if indeed the API function is to be short-circuited.  All these possibilities are left as exercises for the reader.
\par 
\par }\pard\plain \s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.3.3\tab Thread Synchronization
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 There are a few minor thread synchron
ization issues addressed in the default implementation of dt_dll.dll.  First, the bodies of WSAPre/PostApiNotify are protected from simultaneous use of the global text buffer by a Critical Section variable.  Another solution would have been to give each t
hread its own buffer in thread local storage.
\par Secondly, an event is used to ensure that the two line of header information printed at startup are not printed after (or in the middle of) text from API function calls and returns.  This was happening because t
he debug window is created by another thread, and it is entirely possible for the original, intializing thread to return to the application, call an API function, and print some output well before the debug window is created by the new thread and the init
ialization information printed out.
\par }\pard \ql \fi-720\li720\ri0\keep\widctlpar\nooverflow\faroman\rin0\lin720\itap0 {\insrsid7471257 
\par }\pard\plain \s3\ql \li0\ri0\sb120\keepn\widctlpar\tx480\nooverflow\faroman\outlinelevel2\rin0\lin0\itap0 \b\f1\fs24\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 5.3.4\tab Error Preservation
\par }\pard\plain \ql \li0\ri0\sb120\widctlpar\nooverflow\faroman\rin0\lin0\itap0 \fs20\lang1033\langfe1041\cgrid\langnp1033\langfenp1041 {\insrsid7471257 
Because WSAPre/PostApiNotify have system calls in them, it is possible for them to change the value that would be returned by WSAGetLastError() or GetLastError().  This could be a very bad thing 
-- for instance, an error set by the real API function would be lost after WSAPostApiNotify writes over it.  To counter this, these functions have some code in them to preserve the error code as it exists when they are invoked.  However, it also possible 
that one of the handler functions may wish to change the error using SetLastError(), especially if a short-circuit is taking place.  WSAPre/PostApiNotify both exit with the error code being either the same value it was upon invocation, or, if the handler 
function changed the value, the new value.
\par }}