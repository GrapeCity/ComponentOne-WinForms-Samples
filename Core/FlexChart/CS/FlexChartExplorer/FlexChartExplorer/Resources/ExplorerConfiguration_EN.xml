<?xml version="1.0" encoding="utf-8" ?>
<items>
  <item name="Home" title="" status="" type="FlexChartExplorer.Samples.Home" icon="iconHome">
    <description></description>
  </item>

  <item name="Introduction" title="" status="" type="FlexChartExplorer.Samples.Introduction" icon="iconIntro">
    <description>
      The sample below shows [b]FlexChart[/b]'s basic features. It binds the chart to a data source and allows you to select the chart type, series stacking, and rotation.
      If you move the mouse over a chart element, a tooltip will appear showing details about the data point.

			The simplest way to use FlexChart is to:

			1. Set the chart's [b]DataSource[/b] property to an array of data objects,
			2. Set the chart's [b]BindingX[/b] property to the name of the property that contains the X values (in this example country names), and
			3. Add one or more [b]Series[/b] objects to the chart's [b]Series[/b] collection and set their [b]Binding[/b] property to the name of the property that contains the Y values (in this example the Revenue and Expenses).
		</description>
	</item>

  <item name="What's New" icon="iconWhatsNew" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
    <items>
      <item name="Animation" title="" status="" type="FlexChartExplorer.Samples.Animation">
		  <summary></summary>
          <description>
             The sample shows animation when loading or updating data in FlexChart control.
          </description>
      </item>
      <item name="Pie Animation" title="" status="" type="FlexChartExplorer.Samples.PieAnimation">
		  <summary></summary>
		  <description>
          The sample shows animation when loading or updating data in FlexPie control.
        </description>
      </item>
      <item name="Legend Scrolling" title="" status="" type="FlexChartExplorer.Samples.LegendScrolling">
		  <summary></summary>
		  <description>
          The sample shows vertical scrolling in chart legend.
        </description>
      </item>
      <item name="Auto Pie Labels" title="" status="" type="FlexChartExplorer.Samples.PieAutoLabels">
		  <summary></summary>
		  <description>
          The sample shows automatic positioning of data labels in pie chart.
        </description>
      </item>
      <item name="MultiPie" title="" status="" type="FlexChartExplorer.Samples.MultiPie">
		  <summary>
			  Create multiple pie charts by listing properties in FlexPie's Binding.
		  </summary>
        <description>
          The view shows how to create multiple pie charts based on the same data source.

		  To create multiple pie charts, just specify several comma-separated properties in [b]FlexPie's Binding[/b].
		</description>
	  </item>
	  <item name="FlexChart Toolbar" title="" status="" type="FlexChartExplorer.Samples.Toolbar" >
		  <summary>
			  Use FlexChartToolbar for quick access to chart settings at runtime.
		  </summary>
		<description>
			The sample below demonstrates the use of [b]FlexChartToolbar[/b] component.
			The [b]FlexChart's toolbar[/b] provides quick and easy access to common chart settings and actions at runtime.
		</description>
	    </item>
	</items>
  </item>

  <item name="Features" title="" status="" type="" icon="iconFeatures" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
    <items>
      <item name="Concepts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Core" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Chart Fundamentals" title="" status="" type="FlexChartExplorer.Samples.ChartFundamentals" >
				  <summary>
					  Customize FlexChart elements like ChartArea, Header, Footer, Axes, and Legend.
				  </summary>
				  <description>
                  The sample below shows the fundamental elements of FlexChart. Each of these elements can be customized using the extensive set of APIs that are available:
                  - [b]ChartArea[/b]: The area within the control but outside the axes.
                  - [b]Header[/b]: The chart header, above the plot area.
                  - [b]Footer[/b]: The chart footer, below the plot area.
                  - [b]PlotArea[/b]: The area within the chart axes.
                  - [b]AxisX[/b]: The X-axis, usually horizontal.
                  - [b]AxisY[/b]: The Y-axis, usually vertical.
                  - [b]Legend[/b]: The chart legend, usually on the right of the plot area.
                  - [b]Series[/b]: A chart series.
                  - [b]SeriesSymbol[/b]: A symbol in a chart series.
                  - [b]DataLabel[/b]: A label attached to a data point.
                </description>
              </item>
              <item name="Rendering" title="" status="" type="FlexChartExplorer.Samples.Rendering" keyWords="default,directX">
				  <summary>
					  Compare Default vs. DirectX RenderModes in FlexChart's RenderMode.
				  </summary>
				  <description>
                  The sample below shows the comparison between [b]Default[/b] and [b]DirectX[/b] RenderModes of FlexChart.

									You can specify how FlexChart should be rendered by setting it's [b]RenderMode[/b] property.
								</description>
							</item>
						</items>
					</item>

          <item name="Binding" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic" title="Basic Binding" status="" type="FlexChartExplorer.Samples.Binding" keyWords="binding,interpolate null,empty point">
				  <summary>
					  Use FlexChart to plot two values from a single data array, binding "Sales" and "Downloads".
				  </summary>
				  <description>
                  The sample below shows how you can use [b]FlexChart[/b] to show two sets of values from a single array of data. This is the most common usage scenario for [b]FlexChart[/b].
                  The sample does the following:

									1. Set the chart's [b]DataSource[/b] property to an array of data objects. Each data object has values for "Date", "Sales", and "Downloads".
									2. Set the chart's [b]BindingX[/b] property to "Date".
									3. Add a [b]Series[/b] object to the chart's [b]Series[/b] array and set its [b]Binding[/b] property to "Sales".
									4. Add a second [b]Series[/b] object to the chart's [b]Series[/b] array and set its [b]Binding[/b] property to 'Downloads'.

									In addition to binding, this sample shows the effect of the [b]InterpolateNulls[/b] and [b]LegendToggle[/b] properties. When you set [b]InterpolateNulls[/b] to true, the chart fills in gaps created by null values in the data. When you set [b]LegendToggle[/b] to true, the chart toggles the visibility of the series when you click its name in the legend.
								</description>
							</item>
							<item name="Series" title="Series Binding" status="" type="FlexChartExplorer.Samples.SeriesBinding">
								<summary>
									Use FlexChart to show data from multiple sources, one per series with "X" and "Y" bindings.
								</summary>
								<description>
									The sample below shows how you can use [b]FlexChart[/b] to show data from multiple data sources, one per series.
									The sample does the following:

									1. Set the chart's [b]BindingX[/b] and [b]Binding[/b] properties to "X" and "Y".
									2. Add a [b]Series[/b] object to the chart's [b]Series[/b] array and set its [b]DataSource[/b] property to a collection of objects that have "X" and "Y" properties.
									3. Add a second [b]Series[/b] object to the chart's [b]Series[/b] array and set its [b]DataSource[/b] property to a different collection of objects that also have "X" and "Y" properties.

									Alternatively, we could have set the [b]BindingX[/b] and [b]Binding[/b] properties on the [b]Series[/b] objects instead of setting then on the chart. In this case this was not necessary because the binding names are the same for all series.
								</description>
							</item>
							<item name="Axis" title="Axis Binding" status="" type="FlexChartExplorer.Samples.AxisBinding" >
								<summary>
									Customize FlexChart axis labels by setting AxisX.DataSource and bindings.
								</summary>
								<description>
									The sample below shows how you can use [b]FlexChart's[/b] Axis Binding feature to customize the axis labels. FlexChart allows setting a different [b]DataSource[/b] on each Axis for generating the labels that are drawn on it. By specifying the axis DataSource you can control the number of labels that are drawn on the axis as well as their text.

									This sample does the following:

									1. Sets the [b]AxisX.DataSource[/b] to a collection of objects.
									2. Sets the [b]AxisX.Binding[/b] to a comma-separated string such as "Value,Text" where the 'Value' represents the property name that specifies the value on the axis and 'Text' represents the property name that contains the corresponding axis label text that you want to display.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>
      <item name="Chart Types" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Column" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic" title="Column" status="" type="FlexChartExplorer.Samples.Column" >
				  <summary>
					  Use column charts to compare categories; bar length shows proportional values.
				  </summary>
				  <description>
                  [b]Column[/b] charts are typically used to compare discrete data across categories with the length of each bar being proportional to the value it represents. The categories being compared are placed on the horizontal axis of the chart while the discrete values are shown on the vertical axis.
                </description>
              </item>
              <item name="Clustered" title="Clustered Column" status="" type="FlexChartExplorer.Samples.ClusteredColumn" >
				<summary>
					Clustered columns display multiple data sets side-by-side, grouped by category.
				</summary>
				<description>
                  Clustered columns are used to display two or more data sets on the chart. The data sets are represented by individual series which are placed side-by-side and grouped together under categories on the horizontal axis.
                </description>
              </item>
              <item name="Stacked" title="Stacked Column" status="" type="FlexChartExplorer.Samples.StackedColumn" >
				  <summary>
					  Stacked columns show category totals with segments for sub-categories. Set Stacking in FlexChart for stacked or 100% stacked charts.
				  </summary>
				  <description>
                  Stacked column charts are used to show how each value contributes to the total amount in a category. It shows the division of a larger category into sub-categories. Unlike the Clustered Column chart, the columns in a Stacked Column chart are placed on top of each other.

									In [b]FlexChart[/b] you can set the [b]Stacking[/b] property to create Stacked and 100 percent stacked charts. The Stacked100pc makes it easier to see the relative differences between quantities in each group.
								</description>
							</item>
							<item name="Stacked Groups" title="Stacked Column Groups" status="" type="FlexChartExplorer.Samples.StackGroupedColumn">
								<summary>
									StackedGroup charts combine stacked and clustered columns to show data distributions.
								</summary>
								<description>
									The StackedGroup charts are a combination of Stacked and Clustered Column charts allowing users to simultaneously group multiple data sets and view the distribution of each category in smaller sub-categories.
								</description>
							</item>
						</items>
					</item>

          <item name="Bar" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic" title="Bar" status="" type="FlexChartExplorer.Samples.Bar" >
				  <summary>
					  Bar charts compare data across categories with horizontal bars, ideal for long labels.
				  </summary>
                <description>
                  [b]Bar[/b] charts are similar to [b]Column[/b] charts in terms of usage,i.e, they too are used to compare discrete data across categories with the length of each bar being proportional to the value it represents. However, unlike Column charts, the bars in a Bar chart are oriented horizontally which makes Bar chart more suitable for use-cases where the category names are longer or the number of categories itself is large.
                </description>
              </item>
              <item name="Clustered" title="Clustered Bar" status="" type="FlexChartExplorer.Samples.ClusteredBar" >
				  <summary>
					  Clustered Bars display multiple data sets side-by-side, grouped by category on the vertical axis.
				  </summary>
				  <description>
                  Clustered Bars are used to display two or more data sets on the chart. The data sets are represented by individual series which are placed side-by-side and grouped together under categories on the vertical axis.
								</description>
							</item>
							<item name="Stacked" title="Stacked Bar" status="" type="FlexChartExplorer.Samples.StackedBar" >
								<summary>
									Stacked bar charts in FlexChart show category distribution with stacking options.
								</summary>
								<description>
									Stacked bar charts are used to show how each value contributes to the total amount in a category. It shows the division of a larger category into sub-categories. Unlike the Clustered Bar chart, the bars in a Stacked Bar chart are placed on top of each other.

									In [b]FlexChart[/b] you can set the [b]Stacking[/b] property to create Stacked and 100 percent stacked charts. The Stacked100pc makes it easier to see the relative differences between quantities in each group.
								</description>
							</item>
							<item name="Stacked Groups" title="Stacked Bar Groups" status="" type="FlexChartExplorer.Samples.StackGroupedBar" >
								<summary>
									StackedGroup charts combine stacked and clustered bar charts to show grouped data and sub-category distributions.
								</summary>
								<description>
									The StackedGroup charts are a combination of Stacked and Clustered Bar charts allowing users to simultaneously group multiple data sets and view the distribution of each category in smaller sub-categories.
								</description>
							</item>
							<item name="Tornado" title="" status="" type="FlexChartExplorer.Samples.Tornado" >
								<summary>
									Tornado chart demo: use a two-sided bar chart with multiple plot areas for better category comparison.
								</summary>
								<description>
									[b]Tornado[/b] chart is a special, two sided [b]Bar[/b] chart that can be used for better comparison of categories.

									This view shows how multiple [b]Plot Areas[/b] along with [b]Bar[/b] chart type can be used to create a Tornado chart.
								</description>
							</item>
						</items>
					</item>

          <item name="Line" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic" title="Line" status="" type="FlexChartExplorer.Samples.LineChart" >
				  <summary>
					 Line charts are used to visualize quantitative data over a continuous interval or time period. They are helpful to show trends in data and analyze how the data is changing over time.
				  </summary>
				  <description>
                  [b]Line[/b] charts are used to visualize quantitative data over a continuous interval or time period. They are helpful to show trends in data and analyze how the data is changing over time.
                </description>
              </item>
              <item name="Stacked" title="Stacked Line" status="" type="FlexChartExplorer.Samples.StackedLine" >
				  <summary></summary>
				  <description>
                  Stacked line charts are line charts where the series don't overlap with each other. This allows better readability of data.
                </description>
              </item>
              <item name="Spline" title="" status="" type="FlexChartExplorer.Samples.Spline" >
				  <summary>
					  Spline charts are specialized form of line charts that plot a fitted curve through each data point in the series.
				  </summary>
				  <description>
                  [b]Spline[/b] charts are specialized form of line charts that plot a fitted curve through each data point in the series.
                </description>
              </item>
              <item name="Line Symbols" title="" status="" type="FlexChartExplorer.Samples.LineSymbols">
				  <summary>
					  LineSymbols charts are useful when we want to highlight the occurrence of individual data points along the trend.
				  </summary>
				  <description>
                  [b]LineSymbols[/b] charts are useful when we want to highlight the occurrence of individual data points along the trend.
                </description>
              </item>
              <item name="Spline Symbols" title="" status="" type="FlexChartExplorer.Samples.SplineSymbols" >
				  <summary>
					  A SplineSymbols chart is a spline chart with symbols drawn on the line to highlight the occurrence of individual data points along the trend.
				  </summary>
				  <description>
                  A [b]SplineSymbols[/b] chart is a spline chart with symbols drawn on the line to highlight the occurrence of individual data points along the trend.
                </description>
              </item>
            </items>
          </item>

          <item name="Area" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic" title="Area" status="" type="FlexChartExplorer.Samples.Area">
				  <summary>
					  Area chart demo: display trends over time with colored areas beneath the line, similar to line charts.
				  </summary>
				  <description>
                  [b]Area[/b] charts are similar to line charts with the difference being that the area below the line is filled with colors. They are useful for displaying trends over time.
                </description>
              </item>
              <item name="Stacked" title="Stacked Area" status="" type="FlexChartExplorer.Samples.StackedArea" >
				  <summary>
					  Stacked area chart demo: compare trends of multiple series over time, visualizing part-to-whole relationships with total and individual series heights.
				  </summary>
				  <description>
                  Stacked area charts are used to compare trends of multiple series over a period of time. They are extremely useful in visualizing part-to-whole relationships where the total vertical of a stacked area chart shows the whole, while the height of each different series shows the parts.
                </description>
              </item>
              <item name="Spline" title="Spline Area" status="" type="FlexChartExplorer.Samples.SplineArea" >
				  <summary></summary>
				  <description>
                  SplineArea charts are special form of Area charts. SplineArea charts fill the area below the curved line connecting the data points.
                </description>
              </item>
            </items>
          </item>

          <item name="Point" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Scatter" title="" status="" type="FlexChartExplorer.Samples.Scatter" >
				  <summary>
					  Scatter chart demo: display data distribution using Cartesian coordinates to show relationships between two variables.
				  </summary>
				  <description>
                  [b]Scatter[/b] charts are mainly used to show distribution of data . They use a collection of points placed using cartesian coordinates to display values from two variables. By displaying a variable in each axis, you can detect if a relationship or correlation between the two variables exists
                </description>
              </item>
              <item name="Bubble" title="" status="" type="FlexChartExplorer.Samples.Bubble" >
				  <summary>
					  FlexChart Bubble chart demo: visualize relationships among three variables by binding X, Y, and bubble size values.
				  </summary>
				  <description>
                  The sample below shows how to create bubble charts using [b]FlexChart[/b] control.
                  
                  Bubble charts are used to show relationship among three variables. Bubble charts are similar to other chart types, except in addition to X and Y you must specify a binding for the bubble size. This is done by setting the [b]Binding[/b] property to a comma-delimited string that specifies the name of the properties to be used for the Y and size values for each bubble.
                </description>
              </item>
            </items>
          </item>

          <item name="Step" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Step Line" title="" status="" type="FlexChartExplorer.Samples.StepLine" >
				  <summary></summary>
				  <description>
                  StepLine charts connect data points by horizontal and vertical straight lines. They help us to see intermittent trends which normal Line charts might not be showing.
                </description>
              </item>
              <item name="Step Area" title="" status="" type="FlexChartExplorer.Samples.StepArea">
				  <summary></summary>
				  <description>
                  StepArea chart fills the area below the StepLine.So, it helps to show the data point values in terms of volume.
                </description>
              </item>
              <item name="Step Symbols" title="" status="" type="FlexChartExplorer.Samples.StepSymbols" >
				  <summary></summary>
				  <description>
                  StepSymbols, like LineSymbols charts, highlight the individual data point in a trend by drawing a symbol for each data point.
                </description>
              </item>
            </items>
          </item>

          <item name="Pie" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic" title="Pie Chart" status="" type="FlexChartExplorer.Samples.FlexPieIntroduction" >
				  <summary>
					  FlexPie demo: bind chart to a data source and display tooltips with data point details on hover.
				  </summary>
				  <description>
                  The sample below shows [b]FlexPie[/b]'s basic features. It binds the chart to a data source.

									If you move the mouse over a chart element, a tooltip will appear showing details about the data point.
								</description>
							</item>
							<item name="Doughnut" title="" status="" type="FlexChartExplorer.Samples.Doughnut">
								<summary>
									This view shows how FlexPie's InnerRadius property can be used to create a Doughnut chart.
								</summary>
								<description>
									This view shows how [b]FlexPie[/b]'s InnerRadius property can be used to create a [b]Doughnut[/b] chart.
								</description>
							</item>
							<item name="MultiPie" title="" status="" type="FlexChartExplorer.Samples.MultiPie">
								<summary>
									FlexPie demo: create multiple pie charts from the same data source by specifying comma-separated properties in Binding.
								</summary>
								<description>
									The view shows how to create multiple pie charts based on the same data source.

									To create multiple pie charts, just specify several comma-separated properties in [b]FlexPie's Binding[/b].
								</description>
							</item>
						</items>
					</item>

          <item name="Heatmap" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Gradient Color" title="Heatmap: Gradient Colors" status="New" type="FlexChartExplorer.Samples.GradientColors">
				  <summary>
					  FlexChart Heatmap demo: use gradient color scale to display data from a 2D array, with cell color depending on data values.
				  </summary>
				  <description>
                  [b]Heatmap[/b] charts represent data through variations in coloring.

									The sample below shows a [b]Heatmap[/b] series in FlexChart with gradient color scale. The data from a two-dimensional array is shown as a table. The color of table's cell depends on the corresponding data value. Heatmap with gradient color scales are useful when the data being displayed is continuous in nature.

								</description>
							</item>
							<item name="Color Axis" title="Heatmap: Color Axis" status="New" type="FlexChartExplorer.Samples.ColorAxis">
								<summary>
									Heatmap demo: plot with gradient color axis, displaying function f(x,y) values with color correspondence shown on the color axis.
								</summary>
								<description>
									The sample below shows a [b]Heatmap[/b] plot with gradient color axis. The data from function f(x,y) is displayed in the heatmap with gradient coloring. The correspondence with color and function value is shown on the auxiliary color axis.
								</description>
							</item>
							<item name="Discrete Color" title="Heatmap: Discrete Colors" status="New" type="FlexChartExplorer.Samples.DiscreteColors">
								<summary>
									Heatmap demo: plot with discrete color scale, where color depends on the data value's interval, with intervals shown in the legend.
								</summary>
								<description>
									The sample below shows a [b]Heatmap[/b] plot with discrete color scale. In case of discrete color scale, the color depends on which interval the corresponding data value belongs to. All data points from the same interval have the same color. The list of user-defined intervals is shown on the chart legend.
								</description>
							</item>
						</items>
					</item>

          <item name="Financial Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="CandleStick" title="" status="" type="FlexChartExplorer.Samples.CandleStick">
				  <summary>
					  FlexChart Candlestick demo: create charts by setting ChartType and Binding properties for high, low, open, and close values.
				  </summary>
				  <description>
                  [b]FlexChart[/b] supports two types of financial chart: Candlestick and HighLowOpenClose. To use them, set the [b]ChartType[/b] property to the type you want, and set the series [b]Binding[/b] property to a comma-delimited string that specifies the fields that contain the high, low, open, and close values in the data source.

									The sample below shows how to create Candlestick charts with [b]FlexChart[/b] control.
								</description>
							</item>
							<item name="HLOC" title="" status="" type="FlexChartExplorer.Samples.HLOC">
								<summary>
									FlexChart financial demo: create HighLowOpenClose charts by setting ChartType and Binding properties for high, low, open, and close values.
								</summary>
								<description>
									[b]FlexChart[/b] supports two types of financial chart: Candlestick and HighLowOpenClose. To use them, set [b]ChartType[/b] property to the type you want, and set the series [b]Binding[/b] property to a comma-delimited string that specifies the fields that contain the high, low, open, and close values in the data source.

									This view shows how to create HighLowOpenClose charts with [b]FlexChart[/b] control.
								</description>
							</item>
						</items>
					</item>

          <item name="Statistical Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Box and Whisker" title="" status="" type="FlexChartExplorer.Samples.BoxAndWhisker" >
				  <summary>
					  The Box &#38; Whisker series is normally used to compare distributions between different sets of numerical data.

				  </summary>
				  <description>
                  The [b]Box &#38; Whisker[/b] series is normally used to compare distributions between different sets of numerical data.
                </description>
              </item>
              <item name="Error Bars" title="" status="" type="FlexChartExplorer.Samples.ErrorBar" >
				  <summary>
					  The Error bar helps you see margins of error and standard deviations at a glance.
				  </summary>
				  <description>
                  The [b]Error bar[/b] helps you see margins of error and standard deviations at a glance.
                </description>
              </item>
              <item name="Histogram" title="" status="Upd" type="FlexChartExplorer.Samples.Histogram" >
				  <summary>
					  Histogram chart demo: study data distribution by dividing into bins and plotting frequency of items in each bin.
				  </summary>
				  <description>
                  A [b]Histogram[/b] chart is used to study the distribution of non-categorical data by dividing it into bins of specified width. It plots the frequency of data items that fall in each of these bins.
                </description>
              </item>
              <item name="RangedHistogram" title="" status="" type="FlexChartExplorer.Samples.RangedHistogram" >
                <summary>
					Histogram chart demo: analyze categorical and non-categorical data with binning options and Overflow/Underflow support.
				</summary>
				  <description>
                  An unique Histogram chart that can be used to study categorical as well as non-categorical data. Provides multiple binning options as well as support for Overflow and Underflow bins.
                </description>
              </item>
              <item name="Pareto" title="" status="" type="FlexChartExplorer.Samples.Pareto" >
				  <summary>
					  Pareto chart demo: histogram with descending columns and a rising line for cumulative percentage to prioritize issues.
				  </summary>
				  <description>
                  A [b]Pareto[/b] is a special histogram chart with columns sorted in descending order and a rising line that represents the cumulative total percentage. Pareto charts makes it easier to analyze most significant issues and priorities corrective actions.
                </description>
              </item>
              <item name="Waterfall" title="" status="" type="FlexChartExplorer.Samples.Waterfall" >
				  <summary>
					  FlexChart Waterfall series demo: visualize how a starting position changes through a series of increases or decreases.
				  </summary>
				  <description>
                  The sample below shows [b]Waterfall[/b] Series in FlexChart.

									The Waterfall series is normally used to demonstrate how the starting position either increases or decreases through a series of changes.
								</description>
							</item>
						</items>
					</item>

          <item name="Special Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Break-Even" title="Break-Even chart" status="New" type="FlexChartExplorer.Samples.BreakEvenChart" >
				  <summary>
					  Break-Even chart demo: visualize sales volume where total costs equal sales.
				  </summary>
				  <description>
                  [b]Break-Even[/b] chart is a chart that shows the sales volume level at which total costs equal sales.
                </description>
              </item>
              <item name="Floating Bar" title="" status="" type="FlexChartExplorer.Samples.FloatBar" >
				  <summary>
					  Floating Bar chart demo: display horizontal/vertical bars representing value ranges, like temperature ranges in cities.
				  </summary>
				  <description>
                  [b]Floating Bar[/b] chart is normally used to display a series of horizontal or vertical bars, with each bar representing a range of values. The sample below shows two series of vertical bars which represent the temperature ranges in different cities for various months.
                </description>
              </item>
              <item name="Gantt Chart" title="Gantt Chart" status="" type="FlexChartExplorer.Samples.Gantt" >
				  <summary>
					  Gantt chart demo: use horizontal floating bars for scheduling tasks and activities in a project.
				  </summary>
				  <description>
                  [b]Gantt[/b] chart is a series of horizontal floating bars primarily used for scheduling activities and tasks in a project. The sample below shows a Gantt chart for planning the phases of a release.
                </description>
              </item>
              <item name="Funnel Chart" title="Funnel Chart" status="" type="FlexChartExplorer.Samples.FunnelChart" >
				  <summary>
					  FlexChart Funnel demo: create and visualize stages in a linear process using a Funnel chart.
				  </summary>
				  <description>
                  [b]Funnel[/b] charts are an excellent tool for summarizing data. It enables users to quickly visualize stages in a linear process.
                  The  sample below demonstrates creating a [b]Funnel[/b] chart in FlexChart.
                </description>
              </item>
              <item name="Radar Chart" title="" status="" type="FlexChartExplorer.Samples.RadarChart" >
				  <summary>
					  FlexRadar demo: create radar chart by setting ItemsSource, BindingX, and adding Series for radial axis values.
				  </summary>
				  <description>
                  The sample below shows how to create radar chart with [b]FlexRadar[/b] control. Using FlexRadar is very similar to FlexChart:
                  1. Set the chart's [b]ItemsSource[/b] property to a collection of data objects.
                  2. Set the chart's [b]BindingX[/b] property to the name of the property that contains the values on circular axis.
                  3. Add one or more [b]Series[/b] to the chart's Series collection and set their [b]Binding[/b] property to the name of the property that contains the values on radial axis.
                </description>
              </item>

							<item name="Polar Chart" title="" status="" type="FlexChartExplorer.Samples.PolarChart" >
								<summary>
									FlexRadar demo: plot functions using polar coordinates with angular x-values in degrees.
								</summary>
								<description>
									The [b]FlexRadar[/b] control represents a [b]Polar[/b] chart when x-values are numbers that specifies angular values in degrees.

									The sample below shows plot of function defined in polar coordinates.
								</description>
							</item>
							<item name="Sunburst" title="" status="" type="FlexChartExplorer.Samples.Sunburst" >
								<summary>
									Sunburst charts are used for visualizing hierarchical data in circular form.The sample below shows basic features of a Sunburst chart.
								</summary>
								<description>
									[b]Sunburst[/b] charts are used for visualizing hierarchical data in circular form.The sample below shows basic features of a Sunburst chart.
								</description>
							</item>
							<item name="TreeMap" title="" status="" type="FlexChartExplorer.Samples.TreeMap" >
								<summary>
									TreeMap charts are compact way of visualizing hierarchical data in form of nested rectangles with area of each rectangle depicting the quantity of each category.
								</summary>
								<description>
									[b]TreeMap[/b] charts are compact way of visualizing hierarchical data in form of nested rectangles with area of each rectangle depicting the quantity of each category.
								</description>
							</item>
						</items>
					</item>

          <item name="Combination Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Combination Charts" title="" status="" type="FlexChartExplorer.Samples.CombinationCharts">
				  <summary></summary>
				  <description>
                  The sample below demonstrates how different chart types can be used for different series in a chart.
                </description>
              </item>
            </items>
          </item>
        </items>
      </item>

      <item name="Chart Elements" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Titles" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Headers And Footers" title="" status="" type="FlexChartExplorer.Samples.HeaderFooter">
				  <summary>
					  FlexChart header/footer demo: add and customize with Header.Content, Footer.Content, Header.Style, and Footer.Style.
				  </summary>
				  <description>
                  The sample below demonstrates how you can add a header and a footer in FlexChart by setting the [b]Header.Content[/b] and [b]Footer.Content[/b] properties. You can also customize the header/footer Font and Color using the [b]Header.Style[/b] and [b]Footer.Style[/b] properties.
                </description>
              </item>
              <item name="Axis Title" title="" status="" type="FlexChartExplorer.Samples.AxisTitle">
				  <summary>
					  FlexChart axis title demo: set and customize axis titles with Axis.Title and Axis.TitleStyle properties.
				  </summary>
				  <description>
                  The sample below demonstrates the use of axis titles. Axis Titles makes it clearer what values an axis is representing. In FlexChart you can set the axis title by setting the [b]Axis.Title[/b] property of the Axis. You can also customize the axis title's Font and Color using the [b]Axis.TitleStyle[/b].
                </description>
              </item>
            </items>
          </item>

          <item name="Series" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Introduction" title="Series: Introduction" status="" type="FlexChartExplorer.Samples.ChartSeries">
				  <summary>
					  FlexChart Series demo: add and style series with custom DataSource, ChartType, and Bindings.
				  </summary>
				  <description>
                  The sample below demonstrates adding and styling [b]Series[/b] in FlexChart. A [b]Series[/b] in FlexChart represents a series of data points that is to be displayed in the chart.

									Each Series in FlexChart can have a DataSource, ChartType, Bindings, etc. different from the chart object itself.
								</description>
							</item>
							<item name="Toggle Series" title="" status="" type="FlexChartExplorer.Samples.Toggle">
								<summary>
									FlexChart series visibility demo: toggle series using the LegendToggle property for user interaction.
								</summary>
								<description>
									The sample below demonstrates toggling the visibility of a series in the chart. This is useful when you have a number of series plotted on the chart. You can allow the end-users to focus on a single or few series by simply tapping a legend item.

									To enable legend toggling set the [b]LegendToggle[/b] property to true.
								</description>
							</item>
						</items>
					</item>

          <item name="Axes" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Multiple Axis" title="" status="" type="FlexChartExplorer.Samples.Axes">
				  <summary></summary>
				  <description>
                  The sample below demonstrates FlexChart with multiple Y-Axis. Charts with secondary axes are useful for plotting multiple data sets with different types of units.
                </description>
              </item>
              <item name="Axis Grouping" title="" status="" type="FlexChartExplorer.Samples.AxisGrouping">
				  <summary>
					  FlexChart axis label grouping demo: use GroupNames for grouping and GroupItemsPath for hierarchical data.
				  </summary>
				<description>
                  The sample below demonstrates grouping of axis labels in FlexChart. You can set the [b]Axis.GroupNames[/b] to the name of the property by which the axis labels should be grouped. To display more than one group level on the axis specify a comma-separated string to the GroupNames property.

									In case your data is organized in a hierarchical structure, then you also need to set the [b]GroupItemsPath[/b] property of the axis.
								</description>
							</item>
							<item name="Numeric Axis Grouping" title="" status="" type="FlexChartExplorer.Samples.NumericAxisGrouping">
								<summary>
									FlexChart numeric axis demo: group labels using a custom GroupProvider implementing IAxisGroupProvider.
								</summary>
								<description>
									The sample below demonstrates grouping of numeric axis labels.

									Numeric values on an axis can be grouped by creating a custom [b]GroupProvider[/b] implementing the [b]IAxisGroupProvider[/b] interface.
								</description>
							</item>
							<item name="DateTime Axis Grouping" title="" status="" type="FlexChartExplorer.Samples.DateTimeAxisGrouping">
								<summary>
									FlexChart DateTime axis demo: group date-time labels using DateTimeGroupProvider based on axis range and MajorUnit.
								</summary>
								<description>
									The sample below demonstrates grouping of date-time axis labels. FlexChart provides a [b]DateTimeGroupProvider[/b] which allows automatic generation of groups based upon the axis range and the axis MajorUnit value.
								</description>
							</item>
							<item name="Collapsible Axis Grouping" title="" status="New" type="FlexChartExplorer.Samples.CollapsibleAxisGrouping">
								<summary>
									FlexChart Axis groups demo: expand/collapse groups using GroupVisibilityLevel property, with positive/negative values for level control.
								</summary>
								<description>
									The sample below demonstrates how axis groups can be expanded/collapsed in FlexChart by using the [b]Axis.GroupVisibilityLevel[/b] property.

									The collapsing can start either from the highest group level or the lowest group level. This is determined by the sign of the GroupVisibilityLevel value. Positive values specify the anchor at the highest level, while negative values specify the anchor at level 1.

									The absolute value of GroupVisibilityLevel specifies the most expanded level of the groups moving away from the anchor.
								</description>
							</item>
							<item name="Axis Labels" title="" status="" type="FlexChartExplorer.Samples.AxisLabels">
								<summary>
									FlexChart Axis demo: prevent label overlap by using StaggeredLines and OverlappingLabels properties.
								</summary>
								<description>
									The sample below demonstrates various [b]Axis[/b] options available in FlexChart to avoid overlapping of axis labels.

									You can set the [b]StaggeredLines[/b] count to draw the labels in a staggered fashion and/or set the [b]OverlappingLabels[/b] property to hide, show, trim or word-wrap labels that overlap.
								</description>
							</item>
							<item name="Numeric Labels" title="" status="" type="FlexChartExplorer.Samples.NumericLabels">
								<summary>
									The sample below demonstrates various Axis options for numeric axis labels.
								</summary>
								<description>
									The sample below demonstrates various [b]Axis[/b] options for numeric axis labels.
								</description>
							</item>
						</items>
					</item>

          <item name="Data Labels" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Introduction" title="DataLabels Introduction" status="" type="FlexChartExplorer.Samples.Labels">
				  <summary>
					  FlexChart DataLabel demo: add labels to each data point using the DataLabel property.
				  </summary>
				  <description>
                  The sample below demonstrates how you can use [b]FlexChart[/b]'s [b]DataLabel[/b] property to add labels to each data point.
                </description>
              </item>
              <item name="Auto Labels" title="" status="" type="FlexChartExplorer.Samples.AutoLabels">
				  <summary>
					  FlexChart DataLabel demo: automatic positioning to avoid overlapping when Position is set to Auto.
				  </summary>
				  <description>
                  The sample below demonstrates automatic positioning of DataLabels in FlexChart. When [b]DataLabel.Position[/b] is [b]Auto[/b] the chart performs automatic label layout trying to avoid their overlapping.
                </description>
              </item>
              <item name="Custom Labels" title="" status="" type="FlexChartExplorer.Samples.CustomLabels">
				  <summary>
					  FlexChart LabelRendering demo: customize and cancel data label rendering based on point index.
				  </summary>
				  <description>
                  This view demonstrates how you can use [b]FlexChart[/b]'s [b]LabelRendering[/b] event to customize the DataLabel's rendering.
                  
                  The sample below demonstrates canceling the rendering of certain data labels based on their point index.
                </description>
              </item>
            </items>
          </item>

          <item name="Legends" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic Legends" title="" status="" type="FlexChartExplorer.Samples.Legends">
				  <summary>
					  FlexChart Legend demo: control position, orientation, text wrapping, max width, and item grouping.
				  </summary>
				  <description>
                  This view shows how you can use the [b]FlexChart[/b] Legend properties.
                  The sample does the following:
                  1.Set legend position property to decide how you locate the legend. such as "Auto", "Left", "Top", "Right" and "Bottom".
                  2.Set legend orientations.
                  3.Set the mode of legend text wrapping. such as "None", "Wrap" and "Truncate".
                  4.Set a value more than 0 to legend item maxWidth property, set 0 to disable legend textWrapping.
                  5.Set the LegendGroup property of each series to group items within the legend.  Legend items within each group are arranged by the legend orientation property while the legend groups are arranged based on the legend position.
                </description>
              </item>
              <item name="Legend Items" title="" status="" type="FlexChartExplorer.Samples.LegendItems">
				  <summary></summary>
				  <description>
                  The sample below shows each point of a series in a different color and displays its corresponding customized entry in the Legend.
                </description>
              </item>
              <item name="Legend Range" title="" status="" type="FlexChartExplorer.Samples.LegendRange">
				  <summary></summary>
				  <description>
                  The sample below shows distributing a series into different range of values having different colors and display their corresponding entries in the legend.
                </description>
              </item>
              <item name="Legend Scrolling" title="" status="New" type="FlexChartExplorer.Samples.LegendScrolling">
                <summary></summary>
				  <description>
                  The sample shows vertical scrolling in chart legend.
                </description>
              </item>
            </items>
          </item>

          <item name="Plot Areas" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Multiple Plot Areas" title="" status="" type="FlexChartExplorer.Samples.PlotAreas">
				  <summary>
					  FlexChart with multiple plot areas: improve readability for series with different scales.
				  </summary>
				  <description>
                  The sample below demonstrates creating FlexChart with multiple plot areas. This is useful when the values in different series on the chart have different scale. Using multiple plot areas helps in enhancing the chart readability in cases like these.
                </description>
              </item>
              <item name="Zones" title="" status="" type="FlexChartExplorer.Samples.Zones">
				  <summary>
					  FlexChart scatter chart demo: highlight grade ranges using zones, calculated in Rendering event.
				  </summary>
				  <description>
                  The view creates a scatter chart of student grades, highlighting each grade range using zones.

									The zones are drawn in [b]Rendering[b] event of [b]FlexChart[/b]. Statistic values are calculated and plotted.
								</description>
							</item>
						</items>
					</item>

          <item name="Tooltips" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Basic Tooltip" title="" status="" type="FlexChartExplorer.Samples.RegularTooltip">
				  <summary></summary>
				  <description>
                  The view shows use of regular tooltip for displaying information related to a data point when mouse hovers over it.
                </description>
              </item>
              <item name="Formatted Tooltip" title="" status="" type="FlexChartExplorer.Samples.FormattedTooltip">
				  <summary></summary>
				  <description>
                  The view shows how HTML/formatted content can be used for Tooltip by using C1SuperTooltip.
                </description>
              </item>
              <item name="Custom Tooltip" title="" status="" type="FlexChartExplorer.Samples.CustomTooltip">
				  <summary>
					  FlexChart custom Tooltip demo: use C1SuperTooltip with MouseMove events and hit-testing for drill-down chart.
				  </summary>
				  <description>
                  The sample below demonstrate creating a custom Tooltip for FlexChart using [b]C1SuperTooltip[/b]. A drilled down chart is created using FlexChart's MouseMove events and hit-testing and used as a customized tooltip for FlexChart.
                </description>
              </item>
            </items>
          </item>

          <item name="Line Markers" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Introduction" title="LineMarker Introduction" status="" type="FlexChartExplorer.Samples.LineMarkerIntroduction">
				  <summary>
					  FlexChart LineMarker demo: dynamically change content using PositionChanged event based on LineMarker's position.
				  </summary>
				  <description>
					The sample demonstrates the use of the [b]LineMarkers[/b] in FlexChart. A LineMarker displays the precise data values for a given position on the chart by dragging horizontal and/or vertical lines over the plot with an attached label. It is useful in scenarios, where a user has a lot of data in a line or area chart, or if a user wants to display data from multiple series in a single label. With built-in interactions, such as Drag and Move, a user can drag the line marker and more precisely select the data point on the chart.
                </description>
              </item>
              <item name="Custom Content" title="LineMarkers : Custom Content" status="" type="FlexChartExplorer.Samples.LineMarkerContent">
				  <summary>
					  FlexChart LineMarker demo: dynamically change content using PositionChanged event based on LineMarker's position.
				  </summary>
				  <description>
                  FlexChart allows you to change the LineMarker's content dynamically at runtime. In this sample we use the LineMarker's PositionChanged event to find out the desired content based on the current position of the LineMarker.
                </description>
              </item>
              <item name="Custom Drawing" title="LineMarkers : Custom Drawing" status="" type="FlexChartExplorer.Samples.LineMarkerPaint">
				  <summary></summary>
				  <description>
                  The sample below demonstrates how you can use the LineMarker's Paint event and customize the content being drawn.
                </description>
              </item>
            </items>
          </item>

          <item name="Annotations" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Introduction" title="Annotations: Introduction" status="" type="FlexChartExplorer.Samples.Basic">
				  <summary>
					  FlexChart annotations demo: create various shapes (line, rectangle, text, etc.) with different attachment types.
				  </summary>
				  <description>
                  The sample below shows basic usage of [b]Annotations[/b] in FlexChart. In FlexChart, you can create Annotations of various shapes and sizes. The types supported include: [b]Line[/b], [b]Rectangle[/b], [b]Square[/b], [b]Polygon[/b], [b]Circle[/b], [b]Ellipse[/b], [b]Text[/b]and [b]Image[/b].

									The annotations can be attached to FlexChart using any of the following four Attachments: [b]Absolute[/b], [b]Relative[/b], [b]DataCoordinate[/b], [b]DataIndex[/b].
								</description>
							</item>
							<item name="Comments" title="" status="" type="FlexChartExplorer.Samples.Advanced">
								<summary></summary>
								<description>
									The sample below shows how to display annotations easily on a FlexChart to show comments and useful information about data points on the plot area itself.
								</description>
							</item>
							<item name="Callouts" title="" status="" type="FlexChartExplorer.Samples.Callouts">
								<summary></summary>
								<description>
									The sample below shows how to use Polygon type annotations to display different shapes of callouts.
								</description>
							</item>
							<item name="Editable Annotations" title="" status="" type="FlexChartExplorer.Samples.EditableAnnotation">
								<summary>
									FlexChart annotations demo: add, edit, move, and delete annotations with various attachment options.
								</summary>
								<description>
									This sample shows how to add and edit annotations in [b]FlexChart[/b].

									Following operations are supported in this sample:

									1. You can click on one of the Annotation symbol in the Toolbar to choose a pre-defined Annotation type. After selecting the symbol, click and drag on the chart's PlotArea to add the selected Annotation type.
									2. You can click on one of the AnnotationAttachment symbol (Absolute, Data or Relative coordinates) in the Toolbar to specify how to attach the new annotations.
									3. You can double-click an Annotation to edit its text.
									4. You can drag and move annotations around the chart. Click the 'AllowMove' button to enable/disable moving of Annotations.
									5. You can delete a selected Annotation by pressing the 'Delete' Key or by using the Context Menu.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>

      <item name="Chart Appearance" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Palettes" title="" status="" type="FlexChartExplorer.Samples.Palettes">
			  <summary></summary>
			  <description>
              The view shows how you can use different built-in Palettes and CustomPalette for FlexChart.
            </description>
          </item>
          <item name="ExtendedPalettes" title="Extended Palettes" status="" type="FlexChartExplorer.Samples.ExtendedPalettes">
			  <summary></summary>
			  <description>
              The view shows how you can use extended palettes for charting controls.
            </description>
          </item>
          <item name="Line Styles" title="" status="" type="FlexChartExplorer.Samples.LineStyles" keyWords="customize,custom drawing, SymbolRendering, SymbolRendered">
			  <summary></summary>
			  <description>
              The sample below shows how to customize a single Line series with different styles and colors.
            </description>
          </item>
          <item name="Symbol Color" title="" status="" type="FlexChartExplorer.Samples.SymbolColor" keyWords="customize,custom drawing, SymbolRendering, SymbolRendered">
			  <summary>
				  Series.SymbolRendering demo: specify data point color based on its y-value.
			  </summary>
			  <description>
              The sample below demonstrates how you can use [b]Series.SymbolRendering[/b] event to specify color of each data point.

							The color of data point depends on y-value of data point.
						</description>
					</item>
					<item name="Slice Color" title="" status="" type="FlexChartExplorer.Samples.SliceColor" keyWords="customize,slicerendered,slicerendering,custom drawing">
						<summary>
							FlexPie demo: use SliceRendering and SliceRendered events for light-to-dark slice colors based on values.
						</summary>
						<description>
							The sample below use SliceRendering and SliceRendered events in FlexPie. Slices will be painted from light to dark depending on their values.
						</description>
					</item>
					<item name="TreeMap Node Color" title="" status="" type="FlexChartExplorer.Samples.TreeMapNodeColor" keyWords="customize,,custom drawing,noderendering">
						<summary>
							TreeMap demo: display two variables using size and color, with NodeRendering for custom colors.
						</summary>
						<description>
							TreeMaps can be used to display two quantitative variables simultaneously, one represented by each rectangle's size and the other represented by its color.

							The sample below demonstrates how you can use TreeMap.NodeRendering event to specify color of each node.
						</description>
					</item>
					<item name="Animation" title="" status="New" type="FlexChartExplorer.Samples.Animation">
						<description>
							The sample shows animation when loading or updating data in FlexChart control.
						</description>
					</item>
					<item name="Pie Animation" title="" status="New" type="FlexChartExplorer.Samples.PieAnimation">
						<summary></summary>
						<description>
							The sample shows animation when loading or updating data in FlexPie control.
						</description>
					</item>
				</items>
			</item>

      <item name="Interaction" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Selection" title="" status="" type="" >
            <items>
              <item name="Cartesian Chart Selection" title="" status="" type="FlexChartExplorer.Samples.CartesianChartSelection" >
				  <summary>
					  FlexChart selection demo: modes include None (disabled), Point (select point), and Series (select series).
				  </summary>
				  <description>
                  The sample below demonstrates [b]FlexChart[/b]'s selection feature. FlexChart provides 3 different [b]SelectionMode[/b]:
                  1. None: In this mode, Selection on FlexChart gets disabled
                  2. Point: In this mode, clicking a data point would show it as selected with the current [b]SelectionStyle[/b].
                  3. Series: In this mode, clicking a data point would show all the data points in that series as selected with the current [b]SelectionStyle[/b].
                </description>
              </item>
              <item name="Pie Chart Selection" title="" status="" type="FlexChartExplorer.Samples.FlexPieSelection">
				  <summary>
					  FlexPie selection demo: enable by setting SelectionMode to Point.
				  </summary>
				<description>
                  The sample below shows [b]FlexPie[/b]'s selection feature.To enable selection in FlexPie, set the 'SelectionMode' property to 'Point'.
                </description>
              </item>
              <item name="Sunburst Selection" title="" status="" type="FlexChartExplorer.Samples.SunburstSelection">
				  <summary>
					  Sunburst selection demo: enable by setting SelectionMode to Point.
				  </summary>
				  <description>
                  The sample below shows [b]Sunburst[/b]'s selection feature. To enable selection in Sunburst charts, set the 'SelectionMode' property to 'Point'.
                </description>
              </item>
              <item name="TreeMap Selection" title="" status="" type="FlexChartExplorer.Samples.TreeMapSelection" >
				  <summary>
					  TreeMap selection demo: set MaxDepth to 0 and SelectionMode to Point.
				  </summary>
				  <description>
                  The sample below demonstrates the [b]TreeMap[/b]'s selection feature. To enable selection of nodes in TreeMap set the [b]MaxDepth[/b] to 0 and [b]SelectioMode[/b] to Point.
                </description>
              </item>
            </items>
          </item>

          <item name="Hit Test" title="" status="" type="FlexChartExplorer.Samples.HitTest" >
			  <summary>
				  FlexChart HitTest demo: get nearest chart element for interactive features.
			  </summary>
			  <description>
              The sample below demonstrates the use of [b]FlexChart[/b]'s [b]HitTest[/b] method.
              The [b]HitTest[/b] method takes a point and returns the nearest chart element. It can be used to provide interactive features such as clickable regions, drill-downs, etc.
              Move mouse over chart to see information about the chart element that is closest to the mouse.
            </description>
          </item>
			<!-- FLexchart toolbar theme issue, uncomment when fixed -->
	<!--
      <item name="FlexChart Toolbar" title="" status="new" type="FlexChartExplorer.Samples.Toolbar" >
						<summary>
							FlexChartToolbar demo: quick access to common chart settings and actions.
						</summary>
						<description>
							The sample below demonstrates the use of [b]FlexChartToolbar[/b] component.
							The [b]FlexChartToolbar[/b] provides quick and easy access to common chart settings and actions at runtime.
						</description>
					</item>
      -->		

					<item name="FlexChart Ribbon" title="" status="new" type="FlexChartExplorer.Samples.Ribbon" >
						<summary>
							FlexChart with C1Ribbon: quick access to chart settings and actions at runtime.
						</summary>
						<description>
							The sample below demonstrates the use of [b]FlexChart[/b]'s components for [b]C1Ribbon[/b].
							These components provides quick and easy access to common chart settings and actions at runtime.
						</description>
					</item>

					<item name="Multi Tab Ribbon" title="" status="new" type="FlexChartExplorer.Samples.MultiTabRibbon" >
						<summary>
							Demo of C1Ribbon with tabs, FlexChart, and a mini chart with range selector.
						</summary>
						<description>
							The sample below demonstrates the [b]C1Ribbon[/b] with multiple tabs created using [b]FlexChart[/b]'s ribbon components.
							The Data tab includes mini chart with range selector.
						</description>
					</item>

					<item name="Drill Down" title="" status="" type="" >
						<items>
							<item name="Basic DrillDown" title="" status="" type="FlexChartExplorer.Samples.BasicDrillDown" >
								<summary>
									Drill down in FlexChart by clicking data points or breadcrumbs to navigate.
								</summary>
								<description>
									This sample shows performing drilldown in FlexChart. Click a data point to drill down into the details, or click on the breadcrumb to return to a higher level.
								</description>
							</item>
							<item name="Sunburst DrillDown" title="" status="" type="FlexChartExplorer.Samples.SunburstDrill" >
								<summary>
									SunBurst drilldown demo: enable by setting DrillDown property to true.
								</summary>
								<description>
									This sample shows performing drilldown in SunBurst. To enable drilldown on a SunBurst chart, set the [b]DrillDown[/b] property to [b]true[/b].
								</description>
							</item>
							<item name="TreeMap DrillDown" title="" status="" type="FlexChartExplorer.Samples.TreeMapDrill" >
								<summary>
									TreeMap drilldown demo: set MaxDepth > 0, left-click to drill down, right-click to go up.
								</summary>
								<description>
									This sample shows performing drilldown in TreeMap. Drill-down on a TreeMap chart gets enable by setting the [b]MaxDepth[/b] to value greater than 0.

									You can left-click a cell to drilldown to the next level and right-click with to drill back one level up.
								</description>
							</item>
							<item name="Asynchronous Drill Down" title="" status="" type="FlexChartExplorer.Samples.AsynchronousDrillDown" >
								<summary>
									Demo of asynchronous drilldown in FlexChart: click data points for details, use breadcrumb to go back.
								</summary>
								<description>
									This sample demonstrates performing an asynchronous drilldown operation in FlexChart. Click a data point to drill down into the details, or click on the bread crumb to return to a higher level.
								</description>
							</item>
						</items>
					</item>

					<item name="Selection" title="" status="" type="" >
						<items>
							<item name="Cartesian Chart Selection" title="" status="" type="FlexChartExplorer.Samples.CartesianChartSelection" >
								<summary>
									FlexChart supports 3 SelectionMode options: None, Point, and Series, each with customizable SelectionStyle.
								</summary>
								<description>
									The sample below demonstrates [b]FlexChart[/b]'s selection feature. FlexChart provides 3 different [b]SelectionMode[/b]:
									1. None: In this mode, Selection on FlexChart gets disabled
									2. Point: In this mode, clicking a data point would show it as selected with the current [b]SelectionStyle[/b].
									3. Series: In this mode, clicking a data point would show all the data points in that series as selected with the current [b]SelectionStyle[/b].
								</description>
							</item>
							<item name="Pie Chart Selection" title="" status="" type="FlexChartExplorer.Samples.FlexPieSelection" >
								<summary>
									Enable node selection in FlexPie by setting the SelectionMode property to Point.
								</summary>
								<description>
									The sample below shows [b]FlexPie[/b]'s selection feature.To enable selection in FlexPie, set the 'SelectionMode' property to 'Point'.
								</description>
							</item>
							<item name="Sunburst Selection" title="" status="" type="FlexChartExplorer.Samples.SunburstSelection" >
								<summary>
									Enable selection in Sunburst charts by setting SelectionMode to Point.
								</summary>
								<description>
									The sample below shows [b]Sunburst[/b]'s selection feature. To enable selection in Sunburst charts, set the 'SelectionMode' property to 'Point'.
								</description>
							</item>
							<item name="TreeMap Selection" title="" status="" type="FlexChartExplorer.Samples.TreeMapSelection" >
								<summary>
									Enable node selection in TreeMap by setting MaxDepth to 0 and SelectionMode to Point.
								</summary>
								<description>
									The sample below demonstrates the [b]TreeMap[/b]'s selection feature. To enable selection of nodes in TreeMap set the [b]MaxDepth[/b] to 0 and [b]SelectioMode[/b] to Point.
								</description>
							</item>
						</items>
					</item>

					<item name="Zoom and Scroll" title="" status="" type="" keyWords="zoom,scroll,pan">
						<items>
							<item name="Zoom" title="" status="" type="FlexChartExplorer.Samples.Zoom" >
								<summary>
									Implement custom zoom in FlexChart by selecting a rectangular area with the mouse.
								</summary>
								<description>
									The sample below shows how to implement a custom zoom for [b]FlexChart[/b] control.
									Use the mouse to select a rectangular area on the plot area. The chart will zoom in on the selected area. When you are done, click the 'Reset Zoom' button to return to the original view.
								</description>
							</item>
							<item name="Axis Scrollbars" title="" status="" type="FlexChartExplorer.Samples.AxisScrollbar" >
								<summary>
									AxisScrollbars in FlexChart enable zooming and panning along both axes.
								</summary>
								<description>
									FlexChart supports displaying [b]AxisScrollbars[/b] both along the X-Axis and Y-Axis. The AxisScrollbars allows you to zoom-in/zoom-out and pan along both the chart axes.
								</description>
							</item>
							<item name="Range Selector" title="" status="" type="FlexChartExplorer.Samples.RangeSelector" >
								<summary>
									RangeSelector is a slider to zoom and pan FlexChart along the x-axis.
								</summary>
								<description>
									[b]RangeSelector[/b] is a range slider control that allows you to zoom-in/zoom-out of FlexChart and pan along the x-axis.
								</description>
							</item>
							<item name="Mouse Interaction" title="" status="new" type="FlexChartExplorer.Samples.MouseInteraction" >
								<summary>
									Pan and zoom FlexChart with the mouse: wheel to zoom, drag to pan.
								</summary>
								<description>
									The sample shows panning and zooming [b]FlexChart[/b] using mouse. You can use mouse wheel to zoom-in/zoom-out and dragging mouse to pan along axes.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>

      <item name="Analytics" title="" status="" type="" keyWords="analysis"  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Top N" title="" status="" type="FlexChartExplorer.Samples.TopN" >
			  <summary>
				  Exclude small values in FlexChart and show only the top-N points or aggregate others.
			  </summary>
			  <description>
              The sample below shows how to exclude the points with small values from the chart except the [b]Top-N[/b] points. You can also aggregate them into a single cumulative point by selecting the [b]Show Others[/b] checkbox.
            </description>
          </item>
          <item name="Sorting" title="" status="" type="FlexChartExplorer.Samples.Sorting" >
			  <summary>
				  Sort FlexChart series data in ascending, descending, or custom order.
			  </summary>
			  <description>
              The sample below shows how to sort series data in an ascending or descending order. You can also sort the data according to your customizable order, such as the match of two series in this example.
            </description>
          </item>
          <item name="Aggregation" title="" status="" type="FlexChartExplorer.Samples.Aggregation" >
			  <summary>
				  Show an aggregated view of data in FlexChart with customizable aggregation functions.
			  </summary>
			  <description>
              The sample below shows how to show an aggregated view of a large amount of data. You can also specify on what function you would like to use to aggregate the data.
            </description>
          </item>
          <item name="Trend Line" title="" status="" type="FlexChartExplorer.Samples.TrendLine" >
			<summary>
				Use TrendLines in FlexChart with different FitType and draggable points to update the equation.
			</summary>
			  <description>
              The sample below shows using TrendLines in FlexChart. You can use different trend line types by setting the [b]FitType[/b] property of TrendLine.

							The points on the plot can also be dragged using mouse which would update the trend line and its equation automatically.
						</description>
					</item>
					<item name="Y-Function Series" title="" status="" type="FlexChartExplorer.Samples.YFunctionSeriesSample">
						<summary>
							Implement a Y-Function Series in FlexChart using the Function property.
						</summary>
						<description>
							The sample below shows how to implement a Y-Function Series in FlexChart.

							The Y-Function Series allows to plot a function that is defined with formula y=y(x). Use the 'Function' property to specify the function.
						</description>
					</item>
					<item name="Parameteric Function Series" title="" status="" type="FlexChartExplorer.Samples.ParametricFunctionSeriesSample">
						<summary>
							Implement a Parametric Function Series in FlexChart using XFunction and YFunction.
						</summary>
						<description>
							The sample below shows how to implement a Parametric Function Series in FlexChart.

							The Parametric Function Series allows to plot a function that is defined parametrically with formulas x = x(t) and y = y(t). Use the 'XFunction' and 'YFunction' properties to specify the functions for x and y coordinates.
						</description>
					</item>
				</items>
			</item>

      <item name="Export and Print" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
        <items>
          <item name="Print" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Single Page" title="Single Page Printing" status="" type="FlexChartExplorer.Samples.SinglePagePrint">
				  <summary>
					  Print FlexChart on a single page with configurable scale, location, and size.
				  </summary>
				  <description>
                  The sample shows printing FlexChart to a single page. It allows configuring the PrintScale and the location and size of the chart on the page.
								</description>
							</item>
							<item name="Multiple Page" title="Multiple Page Printing" status="" type="FlexChartExplorer.Samples.MultiPagePrint">
								<summary>
									Print FlexChart in various ways: multiple charts per page, scaled, or subset data.
								</summary>
								<description>
									The sample shows how to print FlexChart in a variety of ways including:

									- Printing multiple charts per page.
									- Printing multiple charts on multiple pages where each chart is scaled to fit the entire page.
									- Printing a single chart as sub charts where each printed page contains the Y-axis and a subset of data
									- Printing a single chart as a stripped chart where the Y-axis is printed only on the first page.
								</description>
							</item>
						</items>
					</item>

          <item name="Export and Import" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
            <items>
              <item name="Save Image" title="" status="" type="FlexChartExplorer.Samples.SaveImage">
				  <summary>
					  Use SaveImage in FlexChart to export charts as JPG, PNG, or SVG.
				  </summary>
				  <description>
                  The sample below shows using FlexChart's SaveImage method, saving the chart to a Stream which is further used to export the chart as an image.

									FlexChart supports saving charts into multiple formats like JPG, PNG and SVG.
								</description>
							</item>
							<item name="Serialization" title="" status="" type="FlexChartExplorer.Samples.Serialization">
								<summary>
									Library to serialize/deserialize FlexChart and FlexPie in XML, JSON, Binary.
								</summary>
								<description>
									The sample below demonstrates and provides a library to serialize and deserialize FlexChart properties. The sample provides source for building a library (DLL) for the purposes of serializing
									and deserializing FlexCharts and FlexPie charts.  Several serialization formats are addressed
									including XML, JSON and Binary formats.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>
		</items>
	</item>
</items>