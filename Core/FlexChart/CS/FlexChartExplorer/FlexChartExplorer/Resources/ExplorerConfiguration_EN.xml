<?xml version="1.0" encoding="utf-8" ?>
<items>
	<item name="Home" title="" status="" type="FlexChartExplorer.Samples.Home" icon="iconHome">
		<description></description>
	</item>

	<item name="Introduction" title="" status="" type="FlexChartExplorer.Samples.Introduction" icon="iconIntro">
		<description>
			The modern, high-performance FlexChart control supports flexible data binding and an easy-to-use API for complete configuration and quick customization. This demo shows basic chart types and stacking options
		</description>
	</item>

	<item name="What's New" icon="iconWhatsNew" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
		<items>
			<item name="Animation" title="" status="" type="FlexChartExplorer.Samples.Animation">
				<summary></summary>
				<description>
					Add animation when FlexChart is loaded or when data points are updated. Choose an easing function and how to animate the data points.
				</description>
			</item>
			<item name="Pie Animation" title="" status="" type="FlexChartExplorer.Samples.PieAnimation">
				<summary></summary>
				<description>
					Add animation when FlexPie is loaded or when data points are updated. Choose an easing function and how to animate the data points.
				</description>
			</item>
			<item name="Legend Scrolling" title="" status="" type="FlexChartExplorer.Samples.LegendScrolling">
				<summary></summary>
				<description>
					The FlexChart legend supports scrolling when there are too many items in view.
				</description>
			</item>
			<item name="Auto Pie Labels" title="" status="" type="FlexChartExplorer.Samples.PieAutoLabels">
				<summary></summary>
				<description>
					The sample shows automatic positioning of data labels in pie chart.
				</description>
			</item>
			<item name="MultiPie" title="" status="" type="FlexChartExplorer.Samples.MultiPie">
				<summary>
					Create multiple pie charts by listing properties in FlexPie's Binding.
				</summary>
				<description>
					Use FlexPie to visualize more data in a single chart by creating multiple pie chart series. This demo shows how to create multiple pie charts based on the same data source.

					To create multiple pie charts, just specify several comma-separated properties in FlexPie's Binding.
				</description>
			</item>
			<item name="FlexChart Toolbar" title="" status="" type="FlexChartExplorer.Samples.Toolbar" >
				<summary>
					Use FlexChartToolbar for quick access to chart settings at runtime.
				</summary>
				<description>
					Allow the end-user to edit aspects of the chart using run-time chart editors. The toolbar enables users to modify basic features of the chart.
				</description>
			</item>
			<item name="Axis Break" title="" status="" type="FlexChartExplorer.Samples.AxisBreak">
				<summary>
					FlexChart with axis break.
				</summary>
				<description>
					Display the same data series on two plot areas simulating axis break. Custom axis appearance and 'break area' are drawn in chart Rendered event handler.
				</description>
			</item>
		</items>
	</item>

	<item name="Features" title="" status="" type="" icon="iconFeatures" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
		<items>
			<item name="Concepts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Core" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Chart Fundamentals" title="" status="" type="FlexChartExplorer.Samples.ChartFundamentals" >
								<summary>
									Customize FlexChart elements like ChartArea, Header, Footer, Axes, and Legend.
								</summary>
								<description>
									The FlexChart control is composed of several regions including the Chart Area, Plot Area, Header, Footer, Axes and Legend. This demo shows the fundamental elements of FlexChart. Each of these elements can be customized using the extensive set of APIs that are available:

									• ChartArea: The area within the control but outside the axes.
									• Header: The chart header, above the plot area.
									• Footer: The chart footer, below the plot area.
									• PlotArea: The area within the chart axes.
									• AxisX: The X-axis, usually horizontal.
									• AxisY: The Y-axis, usually vertical.
									• Legend: The chart legend, usually on the right of the plot area.
									• Series: A chart series.
									• SeriesSymbol: A symbol in a chart series.
									• DataLabel: A label attached to a data point.
								</description>
							</item>
							<item name="Rendering" title="" status="" type="FlexChartExplorer.Samples.Rendering" keyWords="default,directX">
								<summary>
									Compare Default vs. DirectX RenderModes in FlexChart's RenderMode.
								</summary>
								<description>
									FlexChart supports Direct2D rendering which is the most direct and optimal approach to drawing graphics when performance is a concern. FlexChart can render 50k data points in about 5 milliseconds on an average laptop. Or, you may use the standard GDI+ rendering with no dependencies on DirectX libraries. This demo shows the comparison between Default and DirectX RenderModes of FlexChart.

									You can specify how FlexChart should be rendered by setting it's RenderMode property.
								</description>
							</item>
						</items>
					</item>

					<item name="Binding" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic" title="Basic Binding" status="" type="FlexChartExplorer.Samples.Binding" keyWords="binding,interpolate null,empty point">
								<summary>
									Use FlexChart to plot two values from a single data array, binding "Sales" and "Downloads".
								</summary>
								<description>
									Data bind FlexChart to any .NET IEnumberable collection or DataTable. Plus, you can bind each series to its own data source allowing you to visualize and compare unrelated data. This demo does the following:

									1. Set the chart's DataSource property to an array of data objects. Each data object has values for "Date", "Sales", and "Downloads".
									2. Set the chart's BindingX property to "Date".
									3. Add a Series object to the chart's Series array and set its Binding property to "Sales".
									4. Add a second Series object to the chart's Series array and set its Binding property to 'Downloads'.

									In addition to binding, this sample shows the effect of the InterpolateNulls and LegendToggle properties. When you set InterpolateNulls to true, the chart fills in gaps created by null values in the data. When you set LegendToggle to true, the chart toggles the visibility of the series when you click its name in the legend.
								</description>
							</item>
							<item name="Series" title="Series Binding" status="" type="FlexChartExplorer.Samples.SeriesBinding">
								<summary>
									Use FlexChart to show data from multiple sources, one per series with "X" and "Y" bindings.
								</summary>
								<description>
									You can data bind each series to a separate data source and display the data which is not there in the original data source. This demo shows how you can use FlexChart to show data from multiple data sources, one per series.

									1. Set the chart's BindingX and Binding properties to "X" and "Y".
									2. Add a Series object to the chart's Series array and set its DataSource property to a collection of objects that have "X" and "Y" properties.
									3. Add a second Series object to the chart's Series array and set its DataSource property to a different collection of objects that also have "X" and "Y" properties.

									Alternatively, we could have set the BindingX and Binding properties on the Series objects instead of setting then on the chart. In this case this was not necessary because the binding names are the same for all series.
								</description>
							</item>
							<item name="Axis" title="Axis Binding" status="" type="FlexChartExplorer.Samples.AxisBinding" >
								<summary>
									Customize FlexChart axis labels by setting AxisX.DataSource and bindings.
								</summary>
								<description>
									Axis labels are automatically generated based upon the data source. If you need custom axis labels you can bind the axis to a custom collection. FlexChart allows setting a different DataSource on each Axis for generating the labels that are drawn on it. By specifying the axis DataSource you can control the number of labels that are drawn on the axis as well as their text.

									1. Sets the AxisX.DataSource to a collection of objects.
									2. Sets the AxisX.Binding to a comma-separated string such as "Value,Text" where the 'Value' represents the property name that specifies the value on the axis and 'Text' represents the property name that contains the corresponding axis label text that you want to display.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>
			<item name="Chart Types" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Column" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic" title="Column" status="" type="FlexChartExplorer.Samples.Column" >
								<summary>
									Use column charts to compare categories; bar length shows proportional values.
								</summary>
								<description>
									Column charts are typically used to compare discrete data across categories with the length of each bar being proportional to the value it represents. The categories being compared are placed on the horizontal axis of the chart while the discrete values are shown on the vertical axis.
								</description>
							</item>
							<item name="Clustered" title="Clustered Column" status="" type="FlexChartExplorer.Samples.ClusteredColumn" >
								<summary>
									Clustered columns display multiple data sets side-by-side, grouped by category.
								</summary>
								<description>
									Clustered columns are used to display two or more data sets on the chart. The data sets are represented by individual series which are placed side-by-side and grouped together under categories on the horizontal axis.
								</description>
							</item>
							<item name="Stacked" title="Stacked Column" status="" type="FlexChartExplorer.Samples.StackedColumn" >
								<summary>
									Stacked columns show category totals with segments for sub-categories. Set Stacking in FlexChart for stacked or 100% stacked charts.
								</summary>
								<description>
									Stacked column charts are used to show how each value contributes to the total amount in a category. It shows the division of a larger category into sub-categories. Unlike the Clustered Column chart, the columns in a Stacked Column chart are placed on top of each other.

									In FlexChart you can set the Stacking property to create Stacked and 100 percent stacked charts. The Stacked100pc makes it easier to see the relative differences between quantities in each group.
								</description>
							</item>
							<item name="Stacked Groups" title="Stacked Column Groups" status="" type="FlexChartExplorer.Samples.StackGroupedColumn">
								<summary>
									StackedGroup charts combine stacked and clustered columns to show data distributions.
								</summary>
								<description>
									The Stacked Group charts are a combination of Stacked and Clustered Column charts allowing users to simultaneously group multiple data sets and view the distribution of each category in smaller sub-categories.
								</description>
							</item>
						</items>
					</item>

					<item name="Bar" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic" title="Bar" status="" type="FlexChartExplorer.Samples.Bar" >
								<summary>
									Bar charts compare data across categories with horizontal bars, ideal for long labels.
								</summary>
								<description>
									Bar charts are similar to Column charts in terms of usage,i.e, they too are used to compare discrete data across categories with the length of each bar being proportional to the value it represents. However, unlike Column charts, the bars in a Bar chart are oriented horizontally which makes Bar chart more suitable for use-cases where the category names are longer or the number of categories itself is large.
								</description>
							</item>
							<item name="Clustered" title="Clustered Bar" status="" type="FlexChartExplorer.Samples.ClusteredBar" >
								<summary>
									Clustered Bars display multiple data sets side-by-side, grouped by category on the vertical axis.
								</summary>
								<description>
									Clustered Bars are used to display two or more data sets on the chart. The data sets are represented by individual series which are placed side-by-side and grouped together under categories on the vertical axis.
								</description>
							</item>
							<item name="Stacked" title="Stacked Bar" status="" type="FlexChartExplorer.Samples.StackedBar" >
								<summary>
									Stacked bar charts in FlexChart show category distribution with stacking options.
								</summary>
								<description>
									Stacked bar charts are used to show how each value contributes to the total amount in a category. It shows the division of a larger category into sub-categories. Unlike the Clustered Bar chart, the bars in a Stacked Bar chart are placed on top of each other.

									In FlexChart you can set the Stacking property to create Stacked and 100 percent stacked charts. The Stacked100pc makes it easier to see the relative differences between quantities in each group.
								</description>
							</item>
							<item name="Stacked Groups" title="Stacked Bar Groups" status="" type="FlexChartExplorer.Samples.StackGroupedBar" >
								<summary>
									StackedGroup charts combine stacked and clustered bar charts to show grouped data and sub-category distributions.
								</summary>
								<description>
									The Stacked Group charts are a combination of Stacked and Clustered Bar charts allowing users to simultaneously group multiple data sets and view the distribution of each category in smaller sub-categories.
								</description>
							</item>
							<item name="Tornado" title="" status="" type="FlexChartExplorer.Samples.Tornado" >
								<summary>
									Tornado chart demo: use a two-sided bar chart with multiple plot areas for better category comparison.
								</summary>
								<description>
									Tornado charts, also known as wing bar or butterfly charts, are a variation of bar charts for comparing two sets of data values in a stack of horizontal bars.

									This demo shows how multiple Plot Areas along with Bar chart type can be used to create a Tornado chart.
								</description>
							</item>
						</items>
					</item>

					<item name="Line" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic" title="Line" status="" type="FlexChartExplorer.Samples.LineChart" >
								<summary>
									Line charts are used to visualize quantitative data over a continuous interval or time period. They are helpful to show trends in data and analyze how the data is changing over time.
								</summary>
								<description>
									Line charts are used to visualize quantitative data over a continuous interval or time period. They are helpful to show trends in data and analyze how the data is changing over time.
								</description>
							</item>
							<item name="Stacked" title="Stacked Line" status="" type="FlexChartExplorer.Samples.StackedLine" >
								<summary></summary>
								<description>
									Stacked line charts are line charts where the series don't overlap with each other. This allows better readability of data.
								</description>
							</item>
							<item name="Spline" title="" status="" type="FlexChartExplorer.Samples.Spline" >
								<summary>
									Spline charts are specialized form of line charts that plot a fitted curve through each data point in the series.
								</summary>
								<description>
									Spline charts are specialized form of line charts that plot a fitted curve through each data point in the series.
								</description>
							</item>
							<item name="Line Symbols" title="" status="" type="FlexChartExplorer.Samples.LineSymbols">
								<summary>
									LineSymbols charts are useful when we want to highlight the occurrence of individual data points along the trend.
								</summary>
								<description>
									Line Symbols charts are useful when we want to highlight the occurrence of individual data points along the trend.
								</description>
							</item>
							<item name="Spline Symbols" title="" status="" type="FlexChartExplorer.Samples.SplineSymbols" >
								<summary>
									A SplineSymbols chart is a spline chart with symbols drawn on the line to highlight the occurrence of individual data points along the trend.
								</summary>
								<description>
									A Spline Symbols chart is a spline chart with symbols drawn on the line to highlight the occurrence of individual data points along the trend.
								</description>
							</item>
						</items>
					</item>

					<item name="Area" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic" title="Area" status="" type="FlexChartExplorer.Samples.Area">
								<summary>
									Area chart demo: display trends over time with colored areas beneath the line, similar to line charts.
								</summary>
								<description>
									Area charts are similar to line charts with the difference being that the area below the line is filled with colors. They are useful for displaying trends over time.
								</description>
							</item>
							<item name="Stacked" title="Stacked Area" status="" type="FlexChartExplorer.Samples.StackedArea" >
								<summary>
									Stacked area chart demo: compare trends of multiple series over time, visualizing part-to-whole relationships with total and individual series heights.
								</summary>
								<description>
									Stacked area charts are used to compare trends of multiple series over a period of time. They are extremely useful in visualizing part-to-whole relationships where the total vertical of a stacked area chart shows the whole, while the height of each different series shows the parts.
								</description>
							</item>
							<item name="Spline" title="Spline Area" status="" type="FlexChartExplorer.Samples.SplineArea" >
								<summary></summary>
								<description>
									Spline area charts are special form of area charts. Spline area charts fill the area below the curved line connecting the data points.
								</description>
							</item>
						</items>
					</item>

					<item name="Point" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Scatter" title="" status="" type="FlexChartExplorer.Samples.Scatter" >
								<summary>
									Scatter chart demo: display data distribution using Cartesian coordinates to show relationships between two variables.
								</summary>
								<description>
									Scatter charts are mainly used to show distribution of data . They use a collection of points placed using cartesian coordinates to display values from two variables. By displaying a variable in each axis, you can detect if a relationship or correlation between the two variables exists.
								</description>
							</item>
							<item name="Bubble" title="" status="" type="FlexChartExplorer.Samples.Bubble" >
								<summary>
									FlexChart Bubble chart demo: visualize relationships among three variables by binding X, Y, and bubble size values.
								</summary>
								<description>
									This demo shows how to create bubble charts using FlexChart control.

									Bubble charts are used to show relationship among three variables. Bubble charts are similar to other chart types, except in addition to X and Y you must specify a binding for the bubble size. This is done by setting the Binding property to a comma-delimited string that specifies the name of the properties to be used for the Y and size values for each bubble.
								</description>
							</item>
						</items>
					</item>

					<item name="Step" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Step Line" title="" status="" type="FlexChartExplorer.Samples.StepLine" >
								<summary></summary>
								<description>
									Step Line charts connect data points by horizontal and vertical straight lines. They help us to see intermittent trends which normal Line charts might not be showing.
								</description>
							</item>
							<item name="Step Area" title="" status="" type="FlexChartExplorer.Samples.StepArea">
								<summary></summary>
								<description>
									Step Area chart fills the area below the Step Line. So, it helps to show the data point values in terms of volume.
								</description>
							</item>
							<item name="Step Symbols" title="" status="" type="FlexChartExplorer.Samples.StepSymbols" >
								<summary></summary>
								<description>
									Step Symbol charts, like Line Symbol charts, highlight the individual data point in a trend by drawing a symbol for each data point.
								</description>
							</item>
						</items>
					</item>

					<item name="Pie" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic" title="Pie Chart" status="" type="FlexChartExplorer.Samples.FlexPieIntroduction" >
								<summary>
									FlexPie demo: bind chart to a data source and display tooltips with data point details on hover.
								</summary>
								<description>
									FlexPie is a specialized pie chart control for creating pie and doughnut charts. It supports selection, data labels, animation, multiple pie layouts, exploded slices and flexible customization. This demo shows FlexPie's basic features and binds the chart to a data source.

									If you move the mouse over a chart element, a tooltip will appear showing details about the data point.
								</description>
							</item>
							<item name="Doughnut" title="" status="" type="FlexChartExplorer.Samples.Doughnut">
								<summary>
									This view shows how FlexPie's InnerRadius property can be used to create a Doughnut chart.
								</summary>
								<description>
									Doughnut pie charts display a hole in the middle. This demo shows how FlexPie's InnerRadius property can be used to create a Doughnut chart.
								</description>
							</item>
							<item name="MultiPie" title="" status="" type="FlexChartExplorer.Samples.MultiPie">
								<summary>
									FlexPie demo: create multiple pie charts from the same data source by specifying comma-separated properties in Binding.
								</summary>
								<description>
									Use FlexPie to visualize more data in a single chart by creating multiple pie chart series. This demo shows how to create multiple pie charts based on the same data source.

									To create multiple pie charts, just specify several comma-separated properties in FlexPie's Binding.
								</description>
							</item>
						</items>
					</item>

					<item name="Heatmap" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Gradient Color" title="Heatmap: Gradient Colors" status="New" type="FlexChartExplorer.Samples.GradientColors">
								<summary>
									FlexChart Heatmap demo: use gradient color scale to display data from a 2D array, with cell color depending on data values.
								</summary>
								<description>
									Heat maps are the graphical representations that use color coding to plot the two dimensional data. This demo shows a Heatmap series in FlexChart with gradient color scale. The data from a two-dimensional array is shown as a table. The color of table's cell depends on the corresponding data value. Heatmap with gradient color scales are useful when the data being displayed is continuous in nature.
								</description>
							</item>
							<item name="Color Axis" title="Heatmap: Color Axis" status="New" type="FlexChartExplorer.Samples.ColorAxis">
								<summary>
									Heatmap demo: plot with gradient color axis, displaying function f(x,y) values with color correspondence shown on the color axis.
								</summary>
								<description>
									This demo shows a Heatmap plot with gradient color axis. The data from function f(x,y) is displayed in the heatmap with gradient coloring. The correspondence with color and function value is shown on the auxiliary color axis.
								</description>
							</item>
							<item name="Discrete Color" title="Heatmap: Discrete Colors" status="New" type="FlexChartExplorer.Samples.DiscreteColors">
								<summary>
									Heatmap demo: plot with discrete color scale, where color depends on the data value's interval, with intervals shown in the legend.
								</summary>
								<description>
									This demo shows a Heatmap plot with discrete color scale. In case of discrete color scale, the color depends on which interval the corresponding data value belongs to. All data points from the same interval have the same color. The list of user-defined intervals is shown on the chart legend.
								</description>
							</item>
						</items>
					</item>

					<item name="Financial Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="CandleStick" title="" status="" type="FlexChartExplorer.Samples.CandleStick">
								<summary>
									FlexChart Candlestick demo: create charts by setting ChartType and Binding properties for high, low, open, and close values.
								</summary>
								<description>
									The candlestick chart displays the Open, Close, High, and Low Stock Prices for each day in the series. The vertical bar spans the High and Low values for the day. This demo shows a combination chart with a column series.
								</description>
							</item>
							<item name="HLOC" title="" status="" type="FlexChartExplorer.Samples.HLOC">
								<summary>
									FlexChart financial demo: create HighLowOpenClose charts by setting ChartType and Binding properties for high, low, open, and close values.
								</summary>
								<description>
									FlexChart supports two types of financial chart: Candlestick and HighLowOpenClose. Also known as high-low-open-close, HLOC charts illustrate movements in the price of a financial instrument over time. To use it, set ChartType property and set the series Binding property to a comma-delimited string that specifies the fields that contain the high, low, open, and close values in the data source.
								</description>
							</item>
						</items>
					</item>

					<item name="Statistical Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Box and Whisker" title="" status="" type="FlexChartExplorer.Samples.BoxAndWhisker" >
								<summary>
									The Box &#38; Whisker series is normally used to compare distributions between different sets of numerical data.
								</summary>
								<description>
									Box &#38; Whisker charts graphically depict groups of numerical data through their quartile, mean, median and outliers. The box &#38; whisker series is normally used to compare distributions between different sets of numerical data.
								</description>
							</item>
							<item name="Error Bars" title="" status="" type="FlexChartExplorer.Samples.ErrorBar" >
								<summary>
									The Error bar helps you see margins of error and standard deviations at a glance.
								</summary>
								<description>
									Error bars help you see margins of error and standard deviations at a glance. They can be shown as a standard error amount, a percentage, or a standard deviation.
								</description>
							</item>
							<item name="Histogram" title="" status="Upd" type="FlexChartExplorer.Samples.Histogram" >
								<summary>
									Histogram chart demo: study data distribution by dividing into bins and plotting frequency of items in each bin.
								</summary>
								<description>
									A histogram chart consists of rectangles whose area is proportional to the frequency of a variable and whose width is equal to the class interval.
								</description>
							</item>
							<item name="RangedHistogram" title="" status="" type="FlexChartExplorer.Samples.RangedHistogram" >
								<summary>
									Histogram chart demo: analyze categorical and non-categorical data with binning options and Overflow/Underflow support.
								</summary>
								<description>
									Shows a histogram chart with bins which is also known as a ranged axis.
								</description>
							</item>
							<item name="Pareto" title="" status="" type="FlexChartExplorer.Samples.Pareto" >
								<summary>
									Pareto chart demo: histogram with descending columns and a rising line for cumulative percentage to prioritize issues.
								</summary>
								<description>
									This special histogram chart includes columns in descending order and a rising line that represents cumulative total percentage. Pareto charts makes it easier to analyze most signficant issues and prioritize corrective actions.
								</description>
							</item>
							<item name="Waterfall" title="" status="" type="FlexChartExplorer.Samples.Waterfall" >
								<summary>
									FlexChart Waterfall series demo: visualize how a starting position changes through a series of increases or decreases.
								</summary>
								<description>
									A waterfall chart helps understand the cumulative effect of sequentially introduced positive or negative values. Optionally, display auto-calculated intermediate totals in the waterfall chart.
								</description>
							</item>
						</items>
					</item>

					<item name="Special Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Break-Even" title="Break-Even chart" status="New" type="FlexChartExplorer.Samples.BreakEvenChart" >
								<summary>
									Break-Even chart demo: visualize sales volume where total costs equal sales.
								</summary>
								<description>
									A break-even chart shows the sales volume level at which total costs equal sales. The chart plots revenue, fixed costs, and variable costs on the vertical axis, and volume on the horizontal axis.
								</description>
							</item>
							<item name="Floating Bar" title="" status="" type="FlexChartExplorer.Samples.FloatBar" >
								<summary>
									Floating Bar chart demo: display horizontal/vertical bars representing value ranges, like temperature ranges in cities.
								</summary>
								<description>
									A floating bar or range column chart shows two values, a minimum and maximum, for each column or bar.
								</description>
							</item>
							<item name="Gantt Chart" title="Gantt Chart" status="" type="FlexChartExplorer.Samples.Gantt" >
								<summary>
									Gantt chart demo: use horizontal floating bars for scheduling tasks and activities in a project.
								</summary>
								<description>
									A Gantt chart is a horizontal floating bar typically with time along the X axis and tasks along the Y axis.
								</description>
							</item>
							<item name="Funnel Chart" title="Funnel Chart" status="" type="FlexChartExplorer.Samples.FunnelChart" >
								<summary>
									FlexChart Funnel demo: create and visualize stages in a linear process using a Funnel chart.
								</summary>
								<description>
									Funnel charts are an excellent tool for summarizing data. It enables users to quickly visualize stages in a linear process.

									This view demonstrates a Funnel chart in FlexChart with triangular or rectangular shape.
								</description>
							</item>
							<item name="Radar Chart" title="" status="" type="FlexChartExplorer.Samples.RadarChart" >
								<summary>
									FlexRadar demo: create radar chart by setting ItemsSource, BindingX, and adding Series for radial axis values.
								</summary>
								<description>
									Display multivariate observations with an arbitrary number of variables. The FlexRadar control supports line, area, column, scatter and stacked chart types.
								</description>
							</item>

							<item name="Polar Chart" title="" status="" type="FlexChartExplorer.Samples.PolarChart" >
								<summary>
									FlexRadar demo: plot functions using polar coordinates with angular x-values in degrees.
								</summary>
								<description>
									The FlexRadar control can generate polar charts with lines, columns, filled areas and symbols when x-values are numbers that specifies angular values in degrees.
								</description>
							</item>
							<item name="Sunburst" title="" status="" type="FlexChartExplorer.Samples.Sunburst" >
								<summary>
									Sunburst charts are used for visualizing hierarchical data in circular form.The sample below shows basic features of a Sunburst chart.
								</summary>
								<description>
									Visualize hierarchical data from a root node (center) outward to lower hierarchies using the ComponentOne Sunburst control. A segment of the inner circle is a parent to the segments of the outer circle which lie within the angular sweep of a parent.
								</description>
							</item>
							<item name="TreeMap" title="" status="" type="FlexChartExplorer.Samples.TreeMap" >
								<summary>
									TreeMap charts are compact way of visualizing hierarchical data in form of nested rectangles with area of each rectangle depicting the quantity of each category.
								</summary>
								<description>
									Display hierarchical information combined with relative quantity using the ComponentOne TreeMap control. Highlight hierarchical, tree-structured data as a set of nested rectangles and help to analyze the anomalies in the data set.
								</description>
							</item>
						</items>
					</item>

					<item name="Combination Charts" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Combination Charts" title="" status="" type="FlexChartExplorer.Samples.CombinationCharts">
								<summary></summary>
								<description>
									You can set the chart type on the FlexChart control or on each individual series, enabling you to create combination charts. You can combine different Cartesian chart types together in the same plot.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>

			<item name="Chart Elements" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Titles" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Headers And Footers" title="" status="" type="FlexChartExplorer.Samples.HeaderFooter">
								<summary>
									FlexChart header/footer demo: add and customize with Header.Content, Footer.Content, Header.Style, and Footer.Style.
								</summary>
								<description>
									Shows the chart title and footer text.
								</description>
							</item>
							<item name="Axis Title" title="" status="" type="FlexChartExplorer.Samples.AxisTitle">
								<summary>
									FlexChart axis title demo: set and customize axis titles with Axis.Title and Axis.TitleStyle properties.
								</summary>
								<description>
									Shows rotated text along the axes.
								</description>
							</item>
						</items>
					</item>

					<item name="Series" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Introduction" title="Series: Introduction" status="" type="FlexChartExplorer.Samples.ChartSeries">
								<summary>
									FlexChart Series demo: add and style series with custom DataSource, ChartType, and Bindings.
								</summary>
								<description>
									In FlexChart, a series is represented by the Series class. You can set axis and chart type related properties on the FlexChart control or on the series for more customization.
								</description>
							</item>
							<item name="Toggle Series" title="" status="" type="FlexChartExplorer.Samples.Toggle">
								<summary>
									FlexChart series visibility demo: toggle series using the LegendToggle property for user interaction.
								</summary>
								<description>
									Toggle the visibility of any series using the legend toggle feature. When the user clicks a series from the legend, that series becomes hidden, allowing the user to focus on a subset of the data.
								</description>
							</item>
						</items>
					</item>

					<item name="Axes" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Multiple Axis" title="" status="" type="FlexChartExplorer.Samples.Axes">
								<summary></summary>
								<description>
									You can add multiple Y axes to help visualize multiple series in the same plot area. This demo also shows a combination chart where different Cartesian chart types are combined in a single plot.
								</description>
							</item>
							<item name="Axis Grouping" title="" status="" type="FlexChartExplorer.Samples.AxisGrouping">
								<summary>
									FlexChart axis label grouping demo: use GroupNames for grouping and GroupItemsPath for hierarchical data.
								</summary>
								<description>
									Improve axis readability by displaying hierarchical groups in axis labels.
								</description>
							</item>
							<item name="Numeric Axis Grouping" title="" status="" type="FlexChartExplorer.Samples.NumericAxisGrouping">
								<summary>
									FlexChart numeric axis demo: group labels using a custom GroupProvider implementing IAxisGroupProvider.
								</summary>
								<description>
									Improve axis readability by displaying hierarchical groups in axis labels. Use axis grouping to create ranged bins for a numeric axis to improve readability.
								</description>
							</item>
							<item name="DateTime Axis Grouping" title="" status="" type="FlexChartExplorer.Samples.DateTimeAxisGrouping">
								<summary>
									FlexChart DateTime axis demo: group date-time labels using DateTimeGroupProvider based on axis range and MajorUnit.
								</summary>
								<description>
									Improve axis readability by displaying hierarchical groups in axis labels. Axis grouping is helpful for visualizing dates along the axis that span multiple years.
								</description>
							</item>
							<item name="Collapsible Axis Grouping" title="" status="New" type="FlexChartExplorer.Samples.CollapsibleAxisGrouping">
								<summary>
									FlexChart Axis groups demo: expand/collapse groups using GroupVisibilityLevel property, with positive/negative values for level control.
								</summary>
								<description>
									Improve axis readability by displaying hierarchical groups in axis labels. This demo shows how axis groups can be expanded/collapsed in FlexChart by using the Axis.GroupVisibilityLevelproperty.

									The collapsing can start either from the highest group level or the lowest group level. This is determined by the sign of the GroupVisibilityLevel value. Positive values specify the anchor at the highest level, while negative values specify the anchor at level 1.

									The absolute value of GroupVisibilityLevel specifies the most expanded level of the groups moving away from the anchor.
								</description>
							</item>
							<item name="Axis Labels" title="" status="" type="FlexChartExplorer.Samples.AxisLabels">
								<summary>
									FlexChart Axis demo: prevent label overlap by using StaggeredLines and OverlappingLabels properties.
								</summary>
								<description>
									Avoid overlapping labels on the axis by staggering labels to a second row or rotating the angle.
								</description>
							</item>
							<item name="Numeric Labels" title="" status="" type="FlexChartExplorer.Samples.NumericLabels">
								<summary>
									The sample below demonstrates various Axis options for numeric axis labels.
								</summary>
								<description>
									Add axis labels to highlight the maximum and minimum values in the data.
								</description>
							</item>
						</items>
					</item>

					<item name="Data Labels" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Introduction" title="DataLabels Introduction" status="" type="FlexChartExplorer.Samples.Labels">
								<summary>
									FlexChart DataLabel demo: add labels to each data point using the DataLabel property.
								</summary>
								<description>
									FlexChart can display static text labels above, below or to the side of each data point. Add a border, connecting line and rotate the labels for additional customization.
								</description>
							</item>
							<item name="Auto Labels" title="" status="" type="FlexChartExplorer.Samples.AutoLabels">
								<summary>
									FlexChart DataLabel demo: automatic positioning to avoid overlapping when Position is set to Auto.
								</summary>
								<description>
									For large data sets you can configure the data labels to avoid overlap. This demo shows automatic positioning of DataLabels in FlexChart. When DataLabel.Position is Auto the chart performs automatic label layout trying to avoid their overlapping.
								</description>
							</item>
							<item name="Custom Labels" title="" status="" type="FlexChartExplorer.Samples.CustomLabels">
								<summary>
									FlexChart LabelRendering demo: customize and cancel data label rendering based on point index.
								</summary>
								<description>
									This view demonstrates how you can use [b]FlexChart[/b]'s [b]LabelRendering[/b] event to customize the DataLabel's rendering.

									You can cancel the rendering of certain data labels based on their point index.
								</description>
							</item>
						</items>
					</item>

					<item name="Legends" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic Legends" title="" status="" type="FlexChartExplorer.Samples.Legends">
								<summary>
									FlexChart Legend demo: control position, orientation, text wrapping, max width, and item grouping.
								</summary>
								<description>
									A legend is always generated automatically based upon the data series. This view shows how you can use the [b]FlexChart[/b] Legend properties.

									1.Set legend position property to decide how you locate the legend. such as "Auto", "Left", "Top", "Right" and "Bottom".
									2.Set legend orientations.
									3.Set the mode of legend text wrapping. such as "None", "Wrap" and "Truncate".
									4.Set a value more than 0 to legend item maxWidth property, set 0 to disable legend textWrapping.
									5.Set the LegendGroup property of each series to group items within the legend.  Legend items within each group are arranged by the legend orientation property while the legend groups are arranged based on the legend position.
								</description>
							</item>
							<item name="Legend Items" title="" status="" type="FlexChartExplorer.Samples.LegendItems">
								<summary></summary>
								<description>
									Customize the legend item to display images and groups.
								</description>
							</item>
							<item name="Legend Range" title="" status="" type="FlexChartExplorer.Samples.LegendRange">
								<summary></summary>
								<description>
									This demo shows distributing a series into different range of values having different colors and display their corresponding entries in the legend.
								</description>
							</item>
							<item name="Legend Scrolling" title="" status="New" type="FlexChartExplorer.Samples.LegendScrolling">
								<summary></summary>
								<description>
									The FlexChart legend supports scrolling when there are too many items in view.
								</description>
							</item>
						</items>
					</item>

					<item name="Plot Areas" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Multiple Plot Areas" title="" status="" type="FlexChartExplorer.Samples.PlotAreas">
								<summary>
									FlexChart with multiple plot areas: improve readability for series with different scales.
								</summary>
								<description>
									FlexChart supports multiple plot areas allowing you to display multiple charts in a single control with a shared layout and legend. This demo creates a single FlexChart with multiple plot areas. This is useful when the values in different series on the chart have different scale. Using multiple plot areas helps in enhancing the chart readability in cases like these.
								</description>
							</item>
							<item name="Zones" title="" status="" type="FlexChartExplorer.Samples.Zones">
								<summary>
									FlexChart scatter chart demo: highlight grade ranges using zones, calculated in Rendering event.
								</summary>
								<description>
									Highlight areas of the plot using colored alarm zones. The zones are drawn on FlexChart using the rendering event. Zones help to visualize thresholds and highlight certain data points.
								</description>
							</item>
							<item name="Axis Break" title="" status="New" type="FlexChartExplorer.Samples.AxisBreak">
								<summary>
									FlexChart with axis break.
								</summary>
								<description>
									Display the same data series on two plot areas simulating axis break. Custom axis appearance and 'break area' are drawn in chart Rendered event handler.
								</description>
							</item>
						</items>
					</item>

					<item name="Tooltips" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic Tooltip" title="" status="" type="FlexChartExplorer.Samples.RegularTooltip">
								<summary></summary>
								<description>
									Format the data to display in a tooltip when the user hovers over the data point. You can display multiple series' values in a single tooltip.
								</description>
							</item>
							<item name="Formatted Tooltip" title="" status="" type="FlexChartExplorer.Samples.FormattedTooltip">
								<summary></summary>
								<description>
									Format the data to display in a tooltip when the user hovers over the data point. This demo shows a custom formatted tooltip using C1SuperTooltip, enabling you to display rich text using HTML.
								</description>
							</item>
							<item name="Custom Tooltip" title="" status="" type="FlexChartExplorer.Samples.CustomTooltip">
								<summary>
									FlexChart custom Tooltip demo: use C1SuperTooltip with MouseMove events and hit-testing for drill-down chart.
								</summary>
								<description>
									Format the data to display in a tooltip when the user hovers over the data point. This demo creates a custom Tooltip for FlexChart using [b]C1SuperTooltip[/b]. A drilled down chart is created using FlexChart's MouseMove events and hit-testing and used as a customized tooltip for FlexChart.
								</description>
							</item>
						</items>
					</item>

					<item name="Line Markers" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Introduction" title="LineMarker Introduction" status="" type="FlexChartExplorer.Samples.LineMarkerIntroduction">
								<summary>
									FlexChart LineMarker demo: dynamically change content using PositionChanged event based on LineMarker's position.
								</summary>
								<description>
									A line marker can display the precise data values for a given position on the chart by dragging horizontal and/or vertical lines over the plot with an attached label. It is useful in scenarios, where a user has a lot of data in a line or area chart, or if a user wants to display data from multiple series in a single label. With built-in interactions, such as Drag and Move, a user can drag the line marker and more precisely select the data point on the chart.
								</description>
							</item>
							<item name="Custom Content" title="LineMarkers : Custom Content" status="" type="FlexChartExplorer.Samples.LineMarkerContent">
								<summary>
									FlexChart LineMarker demo: dynamically change content using PositionChanged event based on LineMarker's position.
								</summary>
								<description>
									The line marker features enables you to display horizontal or vertical lines that cross the users' cursor and the chart axis. This demo shows additional custom data added to the line marker label.
								</description>
							</item>
							<item name="Custom Drawing" title="LineMarkers : Custom Drawing" status="" type="FlexChartExplorer.Samples.LineMarkerPaint">
								<summary></summary>
								<description>
									The line marker features enables you to display horizontal or vertical lines that cross the users' cursor and the chart axis. This demo shows how to create a custom style and template for the line marker.
								</description>
							</item>
						</items>
					</item>

					<item name="Annotations" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Introduction" title="Annotations: Introduction" status="" type="FlexChartExplorer.Samples.Basic">
								<summary>
									FlexChart annotations demo: create various shapes (line, rectangle, text, etc.) with different attachment types.
								</summary>
								<description>
									Add annotations such as text, images or shapes to the chart to enhance the visualization and style. The annotations can be attached to FlexChart using any of the following four Attachments: [b]Absolute[/b], [b]Relative[/b], [b]DataCoordinate[/b], [b]DataIndex[/b].
								</description>
							</item>
							<item name="Comments" title="" status="" type="FlexChartExplorer.Samples.Advanced">
								<summary></summary>
								<description>
									Add annotations such as text, images or shapes to the chart to add comments and events to the data. Annotations can be used to display and highlight important information about specific data points.
								</description>
							</item>
							<item name="Callouts" title="" status="" type="FlexChartExplorer.Samples.Callouts">
								<summary></summary>
								<description>
									Add annotations such as text, images or shapes to the chart to highlight specific data points. Attached lines help visualize which data point is being highlighted.
								</description>
							</item>
							<item name="Editable Annotations" title="" status="" type="FlexChartExplorer.Samples.EditableAnnotation">
								<summary>
									FlexChart annotations demo: add, edit, move, and delete annotations with various attachment options.
								</summary>
								<description>
									Your users can annotate the FlexChart at runtime using text, images and shapes. Editing annotations allows the application user to define events and points of interest and relies less on the developer. The following operations are supported in this demo:

									1. You can click on one of the Annotation symbol in the Toolbar to choose a pre-defined Annotation type. After selecting the symbol, click and drag on the chart's PlotArea to add the selected Annotation type.
									2. You can click on one of the AnnotationAttachment symbol (Absolute, Data or Relative coordinates) in the Toolbar to specify how to attach the new annotations.
									3. You can double-click an Annotation to edit its text.
									4. You can drag and move annotations around the chart. Click the 'AllowMove' button to enable/disable moving of Annotations.
									5. You can delete a selected Annotation by pressing the 'Delete' Key or by using the Context Menu.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>

			<item name="Chart Appearance" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Palettes" title="" status="" type="FlexChartExplorer.Samples.Palettes">
						<summary></summary>
						<description>
							Choose from sixteen pre-defined color palettes or create a custom one.
						</description>
					</item>
					<item name="ExtendedPalettes" title="Extended Palettes" status="" type="FlexChartExplorer.Samples.ExtendedPalettes">
						<summary></summary>
						<description>
							FlexChart also supports qualitative, diverging, and sequential color palettes for more professional looking charts.
						</description>
					</item>
					<item name="Line Styles" title="" status="" type="FlexChartExplorer.Samples.LineStyles" keyWords="customize,custom drawing, SymbolRendering, SymbolRendered">
						<summary></summary>
						<description>
							This demo shows how to change the style of different line segments on a single line series.
						</description>
					</item>
					<item name="Symbol Color" title="" status="" type="FlexChartExplorer.Samples.SymbolColor" keyWords="customize,custom drawing, SymbolRendering, SymbolRendered">
						<summary>
							Series.SymbolRendering demo: specify data point color based on its y-value.
						</summary>
						<description>
							This demo shows how to customize the color of the data point symbol based upon the value. You can use the [b]Series.SymbolRendering[/b] event to specify color of each data point. The color of data point depends on y-value of data point.
						</description>
					</item>
					<item name="Slice Color" title="" status="" type="FlexChartExplorer.Samples.SliceColor" keyWords="customize,slicerendered,slicerendering,custom drawing">
						<summary>
							FlexPie demo: use SliceRendering and SliceRendered events for light-to-dark slice colors based on values.
						</summary>
						<description>
							This demo shows how to customize the FlexPie slice based upon the value. The SliceRendering and SliceRendered events are used to paint each slice from light to dark depending on their values.
						</description>
					</item>
					<item name="TreeMap Node Color" title="" status="" type="FlexChartExplorer.Samples.TreeMapNodeColor" keyWords="customize,,custom drawing,noderendering">
						<summary>
							TreeMap demo: display two variables using size and color, with NodeRendering for custom colors.
						</summary>
						<description>
							This demo shows how to customize the TreeMap node based upon the value. You can use the TreeMap.NodeRendering event to specify the color of each node.
						</description>
					</item>
					<item name="Animation" title="" status="New" type="FlexChartExplorer.Samples.Animation">
						<description>
							Add animation when FlexChart is loaded or when data points are updated. Choose an easing function and how to animate the data points.
						</description>
					</item>
					<item name="Pie Animation" title="" status="New" type="FlexChartExplorer.Samples.PieAnimation">
						<summary></summary>
						<description>
							Add animation when FlexPie is loaded or when data points are updated. Choose an easing function and how to animate the data points.
						</description>
					</item>
				</items>
			</item>

			<item name="Interaction" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Selection" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Cartesian Chart Selection" title="" status="" type="FlexChartExplorer.Samples.CartesianChartSelection" >
								<summary>
									FlexChart selection demo: modes include None (disabled), Point (select point), and Series (select series).
								</summary>
								<description>
									Select a single data point or an entire data series in your chart. This demo shows [b]FlexChart[/b]'s selection feature. FlexChart provides 3 different [b]SelectionMode[/b]:

									1. None: In this mode, Selection on FlexChart gets disabled
									2. Point: In this mode, clicking a data point would show it as selected with the current [b]SelectionStyle[/b].
									3. Series: In this mode, clicking a data point would show all the data points in that series as selected with the current [b]SelectionStyle[/b].
								</description>
							</item>
							<item name="Pie Chart Selection" title="" status="" type="FlexChartExplorer.Samples.FlexPieSelection">
								<summary>
									FlexPie selection demo: enable by setting SelectionMode to Point.
								</summary>
								<description>
									Selected slices of FlexPie can be highlighted or exploded. To enable selection in FlexPie, set the 'SelectionMode' property to 'Point'.
								</description>
							</item>
							<item name="Sunburst Selection" title="" status="" type="FlexChartExplorer.Samples.SunburstSelection">
								<summary>
									Sunburst selection demo: enable by setting SelectionMode to Point.
								</summary>
								<description>
									Selected slices of Sunburst can be highlighted or exploded. To enable selection in Sunburst charts, set the 'SelectionMode' property to 'Point'.
								</description>
							</item>
							<item name="TreeMap Selection" title="" status="" type="FlexChartExplorer.Samples.TreeMapSelection" >
								<summary>
									TreeMap selection demo: set MaxDepth to 0 and SelectionMode to Point.
								</summary>
								<description>
									Select a single node of TreeMap and highlight the selection. To enable selection of nodes in TreeMap set the [b]MaxDepth[/b] to 0 and [b]SelectioMode[/b] to Point.
								</description>
							</item>
						</items>
					</item>

					<item name="Hit Test" title="" status="" type="FlexChartExplorer.Samples.HitTest">
						<summary>
							FlexChart HitTest demo: get nearest chart element for interactive features.
						</summary>
						<description>
							With flexible hit-testing you can determine the closest data point to anywhere the user clicks. This enables custom drill-down solutions beyond basic selection. The [b]HitTest[/b] method takes a point and returns the nearest chart element. Move the mouse over the chart to see information about the chart element that is closest to the mouse.
						</description>
					</item>
					<!-- FLexchart toolbar theme issue, uncomment when fixed -->
					<!--
      <item name="FlexChart Toolbar" title="" status="new" type="FlexChartExplorer.Samples.Toolbar" >
						<summary>
							FlexChartToolbar demo: quick access to common chart settings and actions.
						</summary>
						<description>
							Allow the end-user to edit aspects of the chart using run-time chart editors. The toolbar enables users to modify basic features of the chart.
						</description>
					</item>
      -->

					<item name="FlexChart Ribbon" title="" status="new" type="FlexChartExplorer.Samples.Ribbon" >
						<summary>
							FlexChart with C1Ribbon: quick access to chart settings and actions at runtime.
						</summary>
						<description>
							Allow the end-user to edit aspects of the chart using run-time chart editors. This demo shows a custom ribbon UI that enables end-users to modify basic features and export the chart at runtime.
						</description>
					</item>

					<item name="Multi Tab Ribbon" title="" status="new" type="FlexChartExplorer.Samples.MultiTabRibbon" >
						<summary>
							Demo of C1Ribbon with tabs, FlexChart, and a mini chart with range selector.
						</summary>
						<description>
							This demo shows a custom ribbon UI that enables end-users to modify basic features of the chart at runtime.
						</description>
					</item>

					<item name="Drill Down" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Basic DrillDown" title="" status="" type="FlexChartExplorer.Samples.BasicDrillDown" >
								<summary>
									Drill down in FlexChart by clicking data points or breadcrumbs to navigate.
								</summary>
								<description>
									Display aggregated data and allow the user to perform drill-down. Clicking a data point can drill down into a subset of the data. Use the breadcrumb links to reset the chart.
								</description>
							</item>
							<item name="Sunburst DrillDown" title="" status="" type="FlexChartExplorer.Samples.SunburstDrill" >
								<summary>
									SunBurst drilldown demo: enable by setting DrillDown property to true.
								</summary>
								<description>
									With drill-down, you can double-click a data point to drill down into the details.
								</description>
							</item>
							<item name="TreeMap DrillDown" title="" status="" type="FlexChartExplorer.Samples.TreeMapDrill" >
								<summary>
									TreeMap drilldown demo: set MaxDepth > 0, left-click to drill down, right-click to go up.
								</summary>
								<description>
									With drill-down, you can click a data point to drill down into the details.
								</description>
							</item>
							<item name="Asynchronous Drill Down" title="" status="" type="FlexChartExplorer.Samples.AsynchronousDrillDown" >
								<summary>
									Demo of asynchronous drilldown in FlexChart: click data points for details, use breadcrumb to go back.
								</summary>
								<description>
									This demo loads data on-demand as the user drills down. Click a data point to drill down into the details, or click on the bread crumb to return to a higher level.
								</description>
							</item>
						</items>
					</item>

					<item name="Zoom and Scroll" title="" status="" type="" keyWords="zoom,scroll,pan" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Zoom" title="" status="" type="FlexChartExplorer.Samples.Zoom" >
								<summary>
									Implement custom zoom in FlexChart by selecting a rectangular area with the mouse.
								</summary>
								<description>
									This demo shows how to implement zooming in FlexChart by dragging to select a region on the plot area. Use the mouse to select a rectangular area on the plot area. The chart will zoom in on the selected area. When you are done, click the 'Reset Zoom' button to return to the original view.
								</description>
							</item>
							<item name="Axis Scrollbars" title="" status="" type="FlexChartExplorer.Samples.AxisScrollbar" >
								<summary>
									AxisScrollbars in FlexChart enable zooming and panning along both axes.
								</summary>
								<description>
									Axis Scrollbars enable zooming and scaling along either axis in FlexChart. Use the thumbs to scale the axis and drag the thumb to scroll.
								</description>
							</item>
							<item name="Range Selector" title="" status="" type="FlexChartExplorer.Samples.RangeSelector" >
								<summary>
									RangeSelector is a slider to zoom and pan FlexChart along the x-axis.
								</summary>
								<description>
									Focus on a selectable range of data. The range selector features a range slider control that allows you to zoom-in/zoom-out of the chart and pan along the x-axis. The bottom chart visualizes the entire data set, and the top chart is filtered to show the selected range in more detail.
								</description>
							</item>
							<item name="Mouse Interaction" title="" status="new" type="FlexChartExplorer.Samples.MouseInteraction" >
								<summary>
									Pan and zoom FlexChart with the mouse: wheel to zoom, drag to pan.
								</summary>
								<description>
									The sample shows panning and zooming [b]FlexChart[/b] using mouse. You can use mouse wheel to zoom-in/zoom-out and dragging mouse to pan along axes.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>

			<item name="Analytics" title="" status="" type="" keyWords="analysis"  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Top N" title="" status="" type="FlexChartExplorer.Samples.TopN" >
						<summary>
							Exclude small values in FlexChart and show only the top-N points or aggregate others.
						</summary>
						<description>
							The Top N filter displays only show the highest values allowing users to better visualize their data. This demo shows how to exclude the points with small values from the chart except the [b]Top-N[/b] points. You can also aggregate them into a single cumulative point by selecting the [b]Show Others[/b] checkbox.
						</description>
					</item>
					<item name="Sorting" title="" status="" type="FlexChartExplorer.Samples.Sorting" >
						<summary>
							Sort FlexChart series data in ascending, descending, or custom order.
						</summary>
						<description>
							The sorting filter rearranges the data points from highest to lowest. This demo shows how to sort series data in an ascending or descending order. You can also sort the data according to your customizable order, such as the match of two series in this example.
						</description>
					</item>
					<item name="Aggregation" title="" status="" type="FlexChartExplorer.Samples.Aggregation" >
						<summary>
							Show an aggregated view of data in FlexChart with customizable aggregation functions.
						</summary>
						<description>
							The aggregation filter groups and summarizes the data by count, average or sum. This demo shows how to show an aggregated view of a large amount of data. You can also specify on what function you would like to use to aggregate the data.
						</description>
					</item>
					<item name="Trend Line" title="" status="" type="FlexChartExplorer.Samples.TrendLine" >
						<summary>
							Use TrendLines in FlexChart with different FitType and draggable points to update the equation.
						</summary>
						<description>
							Add trend lines to show trends in data and make predictions. FlexChart supports several built-in regression and non-regression trendlines such as linear, average and polynomial. You can use different trend line types by setting the FitType property of the TrendLine object. The points on the plot can also be dragged using mouse which would update the trend line and its equation automatically.
						</description>
					</item>
					<item name="Y-Function Series" title="" status="" type="FlexChartExplorer.Samples.YFunctionSeriesSample">
						<summary>
							Implement a Y-Function Series in FlexChart using the Function property.
						</summary>
						<description>
							FlexChart can render a series based upon a mathematical function. The Y-Function Series allows to plot a function that is defined with formula y=y(x). Use the 'Function' property to specify the function.
						</description>
					</item>
					<item name="Parameteric Function Series" title="" status="" type="FlexChartExplorer.Samples.ParametricFunctionSeriesSample">
						<summary>
							Implement a Parametric Function Series in FlexChart using XFunction and YFunction.
						</summary>
						<description>
							FlexChart can render a series based upon a parametric function. The Parametric Function Series allows to plot a function that is defined parametrically with formulas x = x(t) and y = y(t). Use the 'XFunction' and 'YFunction' properties to specify the functions for x and y coordinates.
						</description>
					</item>
				</items>
			</item>

			<item name="Export and Print" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
				<items>
					<item name="Print" title="" status="" type="" collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Single Page" title="Single Page Printing" status="" type="FlexChartExplorer.Samples.SinglePagePrint">
								<summary>
									Print FlexChart on a single page with configurable scale, location, and size.
								</summary>
								<description>
									Demonstrates how to print FlexChart to a single page. It allows configuring the PrintScale and the location and size of the chart on the page.
								</description>
							</item>
							<item name="Multiple Page" title="Multiple Page Printing" status="" type="FlexChartExplorer.Samples.MultiPagePrint">
								<summary>
									Print FlexChart in various ways: multiple charts per page, scaled, or subset data.
								</summary>
								<description>
									Demonstrates how to print FlexChart across multiple pages in a variety of ways including:

									-Printing multiple charts per page.
									-Printing multiple charts on multiple pages where each chart is scaled to fit the entire page.
									-Printing a single chart as sub charts where each printed page contains the Y-axis and a subset of data
									-Printing a single chart as a stripped chart where the Y-axis is printed only on the first page.
								</description>
							</item>
						</items>
					</item>

					<item name="Export and Import" title="" status="" type=""  collapsed_Image="ChevronDownMed" expanded_Image="ChevronUpMed">
						<items>
							<item name="Save Image" title="" status="" type="FlexChartExplorer.Samples.SaveImage">
								<summary>
									Use SaveImage in FlexChart to export charts as JPG, PNG, or SVG.
								</summary>
								<description>
									This demo shows using FlexChart's SaveImage method, saving the chart to a Stream which is further used to export the chart as an image.

									FlexChart supports saving charts into multiple formats like JPG, PNG and SVG.
								</description>
							</item>
							<item name="Serialization" title="" status="" type="FlexChartExplorer.Samples.Serialization">
								<summary>
									Library to serialize/deserialize FlexChart and FlexPie in XML, JSON, Binary.
								</summary>
								<description>
									This demo provides a library to serialize and deserialize FlexChart properties. The sample provides source for building a library (DLL) for the purposes of serializing
									and deserializing FlexCharts and FlexPie charts.  Several serialization formats are addressed including XML, JSON and Binary formats.
								</description>
							</item>
						</items>
					</item>
				</items>
			</item>
		</items>
	</item>
</items>