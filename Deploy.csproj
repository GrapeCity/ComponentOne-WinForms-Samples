<Project Sdk="Microsoft.Build.NoTargets/3.2.14">

  <PropertyGroup>
    <MSBuildExe>&quot;$(MSBuildBinPath)\msbuild.exe&quot; -nologo</MSBuildExe>
    <StagingFolder>$(MSBuildThisFileDirectory)Staging\</StagingFolder>
    <OutputFolder>$(StagingFolder)Output\</OutputFolder>
    <DemosProject48>Demos.4.8.csproj</DemosProject48>
    <DemosProject8>Demos.8.csproj</DemosProject8>
    <BuildDemosOutputFolder48>$(StagingFolder)Demos48\</BuildDemosOutputFolder48>
    <BuildDemosOutputFolder8>$(StagingFolder)Demos8\</BuildDemosOutputFolder8>
    <TargetFramework>net48</TargetFramework>
    <SignDigitalSignature Condition="'$(SignDigitalSignature)'==''">false</SignDigitalSignature>
    <Notify Condition="'$(Notify)'==''">false</Notify>
    <UseSharedCompilation Condition="'$(UseSharedCompilation)'==''">true</UseSharedCompilation>
    <Configuration Condition="'$(Configuration)'==''">Release</Configuration>
  </PropertyGroup>

  <Target Name="Deploy" AfterTargets="Build">

    <Exec Command="$(MSBuildExe) -r -t:Publish $(DemosProject48) -p:Configuration=$(Configuration) -p:Brand=$(Brand) -p:GenerateManifests=true -p:DebugSymbols=false -p:DebugType=None -p:GenerateDocumentationFile=false -p:OutputPath=$(BuildDemosOutputFolder48) -p:UseSharedCompilation=$(UseSharedCompilation)" />
    <Exec Command="$(MSBuildExe) -r -t:Publish $(DemosProject8) -p:Configuration=$(Configuration) -p:Brand=$(Brand) -p:SelfContained=true -p:RuntimeIdentifier=win-x86 -p:PublishReadyToRun=true -p:ErrorOnDuplicatePublishOutputFiles=false -p:DebugSymbols=false -p:DebugType=None -p:GenerateDocumentationFile=false -p:OutputPath=$(BuildDemosOutputFolder8) -p:UseSharedCompilation=$(UseSharedCompilation)" />
    
    <Exec Command="$(MSBuildExe) -t:SignBinariesWithDigitalSignature $(MSBuildThisFileFullPath) -p:TargetFolder=$(BuildDemosOutputFolder48)" Condition="'$(SignDigitalSignature)'=='true'" />
    <Exec Command="$(MSBuildExe) -t:SignBinariesWithDigitalSignature $(MSBuildThisFileFullPath) -p:TargetFolder=$(BuildDemosOutputFolder8)" Condition="'$(SignDigitalSignature)'=='true'" />

    <Exec Command="$(MSBuildExe) -t:ZipBinariesFolder $(MSBuildThisFileFullPath) -p:Configuration=$(Configuration) -p:Brand=$(Brand) -p:SourceFolder=$(BuildDemosOutputFolder48) -p:AssemblyForVesionPath=$(BuildDemosOutputFolder48)ControlExplorer\C1.Win.4.8.dll -p:DestinationFolder=$(OutputFolder) -p:ZipFilePrefix=C1WinForms-FW48-Demos" />
    <Exec Command="$(MSBuildExe) -t:ZipBinariesFolder $(MSBuildThisFileFullPath) -p:Configuration=$(Configuration) -p:Brand=$(Brand) -p:SourceFolder=$(BuildDemosOutputFolder8) -p:AssemblyForVesionPath=$(BuildDemosOutputFolder8)ControlExplorer\C1.Win.8.dll -p:DestinationFolder=$(OutputFolder) -p:ZipFilePrefix=C1WinForms-Net8-Demos" />

    <Exec Command="$(MSBuildExe) -t:SendBuildNotification $(MSBuildThisFileFullPath) -p:Configuration=$(Configuration) -p:Brand=$(Brand) -p:AssemblyForVesionPath=$(BuildDemosOutputFolder8)ControlExplorer\C1.Win.8.dll -p:DroppedFilesFolder=$(OutputFolder) -p:TeamCityBuildId=$(TeamCityBuildId) -p:NotificationEmailUsername=$(NotificationEmailUsername) -p:NotificationEMailPassword=$(NotificationEmailPassword)" Condition="'$(Notify)'=='true'" />
    
  </Target>

  <Target Name="SignBinariesWithDigitalSignature" Condition="'$(TargetFolder)'!=''">

    <PropertyGroup>
      <SignToolExe>$(SignToolFolder)\signtool.exe</SignToolExe>
    </PropertyGroup>

    <Error
      Text="Set environment variable SignToolFolder to directory which contains signtool.exe file."
      Condition="!Exists('$(SignToolExe)')" />

    <PropertyGroup>
      <SignToolExe>&quot;$(SignToolExe)&quot;</SignToolExe>
    </PropertyGroup>

    <ItemGroup>
      <FileToSign Include="$(TargetFolder)\**\*.dll" />
      <FileToSign Include="$(TargetFolder)\**\*.exe" />
    </ItemGroup>

    <Exec Command="$(SignToolExe) verify /pa /q %(FileToSign.Identity)" ContinueOnError="true" Condition="'%(FileToSign.Identity)'!=''">
      <Output TaskParameter="ExitCode" ItemName="FileToSignExitCode" />
    </Exec>

    <CreateItem Include="@(FileToSign)" AdditionalMetadata="ExitCode=%(FileToSignExitCode.Identity)">
      <Output TaskParameter="Include" ItemName="FileToSignWithExitCode" />
    </CreateItem>

    <Exec Command="$(SignToolExe) sign /a /s my /n GrapeCity /du http://www.grapecity.com /t http://timestamp.digicert.com /fd SHA256 %(FileToSignWithExitCode.Identity)" Condition="'%(FileToSignWithExitCode.Identity)'!='' And '%(FileToSignWithExitCode.ExitCode)'!='0'" />
    <Exec Command="$(SignToolExe) sign /a /as /s my /n GrapeCity /du http://www.grapecity.com /fd SHA1 %(FileToSignWithExitCode.Identity)" Condition="'%(FileToSignWithExitCode.Identity)'!='' And '%(FileToSignWithExitCode.ExitCode)'!='0'" />

  </Target>

  <UsingTask TaskName="GetAssemblyVersion" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <AssemblyPath ParameterType="System.String" Required="true" />
      <AssemblyVersion ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        
        AssemblyVersion = string.Empty;
        
        string assemblyPath = Path.GetFullPath(AssemblyPath);
        if (Path.GetExtension(assemblyPath) != ".dll")
        {
            return false;
        }
        
        if (!File.Exists(assemblyPath))
        {
            return false;
        }
                
        FileVersionInfo versionInfo = FileVersionInfo.GetVersionInfo(assemblyPath);     
        AssemblyVersion = versionInfo.FileVersion.ToString();
        
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="ZipBinariesFolder" Condition="'$(SourceFolder)'!='' And '$(AssemblyForVesionPath)'!='' And '$(DestinationFolder)'!='' And '$(ZipFilePrefix)'!=''">

    <GetAssemblyVersion
      AssemblyPath="$(AssemblyForVesionPath)">
      <Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
    </GetAssemblyVersion>

    <MakeDir Directories="$(DestinationFolder)" />

    <ZipDirectory SourceDirectory="$(SourceFolder)" DestinationFile="$(DestinationFolder)$(ZipFilePrefix)_$(AssemblyVersion)$(FileSuffix).zip" Overwrite="true" />

  </Target>

  <UsingTask TaskName="SendNotificationEmail" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <OutputFolderFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <TeamCityBuildId ParameterType="System.String" Required="true" />
      <EmailProductVersion ParameterType="System.String" Required="true" />
      <EmailSubjectSuffix ParameterType="System.String" />
      <EmailUsername ParameterType="System.String" Required="true" />
      <EmailPassword ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Diagnostics" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="System.Net.Mail" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        
        string buildlog = "<body><style>h1, h2 {font-size: 1.2rem} h1:first-child::before {content: 'Change log '} body { max-width:720px; margin: 0 auto 0 auto; background: #cfd8dc; color: #000;  font-family: 'Poppins', sans-serif; } h2 {color: #050505}</style>";
        
        buildlog += $"<h2><a href='https://ci.grapecitydev.com/viewLog.html?buildId={TeamCityBuildId}&tab=artifacts'>Dropped Files:</a></h2><ul>";

        foreach (ITaskItem file in OutputFolderFiles)
        {
            buildlog += $"<li>{Path.GetFileName(file.ItemSpec)}</li>";
        }
        buildlog += "</ul>";
        
        string body = $"<html><head></head>{buildlog}</body></html>";

        string smtpServer = "smtp.sendgrid.net";
        int smtpPort = 587;
        string smtpUsername = EmailUsername;
        string smtpPassword = EmailPassword;

        MailMessage mail = new MailMessage();
        mail.From = new MailAddress("tcmail@developertools.com", "TeamCity AutoMail");
        mail.To.Add(new MailAddress("c1.dev@developertools.com"));
        string emailSubjectSuffix = string.IsNullOrEmpty(EmailSubjectSuffix) ? string.Empty : EmailSubjectSuffix;
        mail.Subject = $"[drop] C1WinForms Demos {EmailProductVersion} {emailSubjectSuffix}";
        mail.Body = body;
        mail.IsBodyHtml = true;

        SmtpClient smtp = new SmtpClient(smtpServer, smtpPort);
        smtp.UseDefaultCredentials = false;
        smtp.Credentials = new NetworkCredential(smtpUsername, smtpPassword);
        smtp.EnableSsl = true;
        smtp.Send(mail);
        
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="SendBuildNotification" Condition="'$(AssemblyForVesionPath)'!='' And '$(DroppedFilesFolder)'!=''">

    <GetAssemblyVersion
      AssemblyPath="$(AssemblyForVesionPath)">
      <Output TaskParameter="AssemblyVersion" PropertyName="AssemblyVersion" />
    </GetAssemblyVersion>

    <PropertyGroup>
      <TeamCityBuildId Condition="'$(TeamCityBuildId)'==''">0</TeamCityBuildId>
      <EmailProductVersion>$(AssemblyVersion.Substring(4))</EmailProductVersion>
    </PropertyGroup>

    <ItemGroup>
      <OutputFolderFile Include="$(DroppedFilesFolder)\**\*" />
    </ItemGroup>

    <SendNotificationEmail
      OutputFolderFiles="@(OutputFolderFile)"
      TeamCityBuildId="$(TeamCityBuildId)"
      EmailProductVersion="$(EmailProductVersion)"
      EmailSubjectSuffix="$(CommonSuffix)"
      EmailUsername="$(NotificationEmailUsername)"
      EmailPassword="$(NotificationEmailPassword)" />

  </Target>

</Project>